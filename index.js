const Discord = require('discord.js');
const client = new Discord.Client({ intents: [3276799] });
const delay = (ms) => new Promise((resolve) => setTimeout(resolve, ms));
const { token, server_id, prefix_dev, dev, owner } = require('./db/config/config.json');
const base = require('./db/config/config.json')
const Invite = require("discord-inviter-tracker")
const { TicTacToe } = require("discord-gamecord");
const Text = 'Discord Gamecord';
const Inviter = new Invite(client)
const chalk = require('chalk');
const Database = require("easy-json-database")
const database = require('./db/stock/database.json');
const db = { database: new Database('./db/stock/database.json'), statut: new Database('./db/statut.json'), config: new Database('./db/config/base.json'), emoji: new Database('./db/emoji.json'), base: new Database('./db/config/base.json'), module: new Database('./db/module.json'), level: new Database('./db/stock/level.json'), xp: new Database('./db/stock/xp.json'), logs: new Database('./db/statutLogs.json'), money: new Database('./db/stock/money.json'), manage: new Database('./db/stock/manage.json'), modulelogs: new Database('./db/stock/modules_history.json'), verif: new Database('./db/stock/verification.json'), warn: new Database('./db/stock/warns.json'), base: new Database('./db/config/config.json') }
const emoji = require('./db/emoji.json');
const synchronizeSlashCommands = require('@frostzzone/discord-sync-commands');
const { PermissionsBitField, EmbedBuilder, ButtonBuilder, ActionRowBuilder, SelectMenuBuilder, ButtonStyle, channelLink, TextInputStyle, ImageFormat, PermissionFlagsBits, ChannelFlags } = require('discord.js');
const general = require('./db/fr_message/general.json');
const server_infos = require('./db/fr_message/server_infos.json');
const bot_count = require('./db/fr_message/bot_count.json');
const chanel_count = require('./db/fr_message/chanel_count.json')
const level = require('./db/fr_message/level.json')
const xp = require('./db/fr_message/xp.json')
const level_system = require('./db/config/level_system.json')
const config = require('./db/config/base.json')
const statut = require('./db/statut.json');
const embedm = require('./db/fr_message/embed.json');
const configuration = require('./db/fr_message/config_module.json');
const configm = require('./db/fr_message/configuration.json');
const channelc = require('./db/fr_message/logs/channelCreate.json');
const channeld = require('./db/fr_message/logs/channelDelete.json');
const channelu = require('./db/fr_message/logs/channelUpdate.json');
const emojc = require('./db/fr_message/logs/emojiCreate.json');
const emojd = require('./db/fr_message/logs/emojiDelete.json');
const emoju = require('./db/fr_message/logs/emojiUpdate.json');
const banadd = require('./db/fr_message/logs/guildBanAdd.json');
const logs = require('./db/statutLogs.json');
const money = require('./db/stock/money.json');
const ecomoney = require('./db/fr_message/money_cmd.json');
const suggestion = require('./db/fr_message/suggestion.json');
const manage_money = require('./db/fr_message/manage_money.json');
const reset_money = require('./db/fr_message/reset_money.json');
const manage_bot = require('./db/fr_message/manage_bot.json');
const partenariat = require('./db/fr_message/partenariat.json');
const pub = require('./db/fr_message/publicité.json');
const report = require('./db/fr_message/report.json');
const invites = require('./some-database.json');
const partner = require('./db/fr_message/partenariat_mp.json');
const verif = require('./db/stock/verification.json');
const verify = require('./db/fr_message/verif_system.json');
const warn = require('./db/stock/warns.json');
const moderation = require('./db/fr_message/moderation.json');
const userinfo = require('./db/fr_message/user_infos.json');
const help = require('./db/fr_message/help.json');
const ping = require('./db/fr_message/ping.json');
const invite = require('./db/fr_message/invites.json');




///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///Allumage Bot\\\
client.on('ready', async () => {
  console.log(chalk.blue(client.user.tag + ` est maintenant en ligne !`));

  client.user.setPresence({ activities: [{ name: db.base.get(String("statut_name")) }] });

  while (client.login) {

    if (db.module.get(String("partenariat")) === "on") {
      if (((String(new Date().getHours())) === "0") && ((String(new Date().getMinutes())) === "0")) {
        db.database.set(String('partenariat_limite_count'), 0)

        await delay(Number(60) * 1000)
      }
    }
    if (db.module.get(String('time')) > '0') {
      db.module.subtract(String('time'), parseInt(String(1)))
      console.log(chalk.yellow(db.module.get(String('time'))))
      await delay(Number(1) * 1000)
    } else if ((db.module.get(String('bloque')) === '0') || (!(db.module.has(String('bloque'))))) {

      await db.module.set(String('bloque'), '1')
      await delay(Number(2) * 1000)

      console.log(chalk.redBright('Modules Bloqués !'))

      db.module.set(String('utilitaire'), 'off')
      db.module.set(String('level'), 'off')
      db.module.set(String('partenariat'), 'off')
      db.module.set(String('suggestion'), 'off')
      db.module.set(String('welcome'), 'off')
      db.module.set(String('embed'), 'off')
      db.module.set(String('verification'), 'off')
      db.module.set(String('economie'), 'off')
      db.module.set(String('moderation'), 'off')
      db.module.set(String('ghostping'), 'off')
      db.module.set(String('sperso'), 'off')
      db.module.set(String('logs'), 'off')
      db.module.set(String('game'), 'off')
      db.module.set(String('pub'), 'off')
      db.module.set(String('report'), 'off')
      db.module.set(String('invites'), 'off')

      try {

        var embed = new EmbedBuilder()
          .setColor(`${config.color.error}`)
          .setTitle(`${emoji.warn} | MESSAGE IMPORTANT !`)
          .setDescription(`${general.response.end_subscribe}`)

        client.users.cache.get(owner).send({ embeds: ([embed]) })

      } catch (err) {
        console.log(chalk.redBright('USER NOT FOUND'))
      }

      let user = client.users.cache.get(owner)

      var embed = new EmbedBuilder()
        .setColor(`${config.color.error}`)
        .setTitle(`${emoji.diamond}${general.response.subscribe}`)
        .setAuthor({ name: `${emoji.owner} | ` + user.tag + ' | ' + user.id, iconURL: user.displayAvatarURL() })
        .setFooter({ text: client.user.tag + ' / ' + client.user.id, iconURL: client.user.displayAvatarURL() })
        .setDescription(`${emoji.captcha} __**| Modules:**__` + ' **'
          + '\n> ' + db.statut.get(String('utilitaire')) + ' ' + `${emoji.moderateur} | Utilitaire`
          + '\n> ' + db.statut.get(String('moderation')) + ' ' + `${emoji.banned} | Modération`
          + '\n> ' + db.statut.get(String('level')) + ' ' + `${emoji.level} | Niveaux`
          + '\n> ' + db.statut.get(String('partenariat')) + ' ' + `${emoji.partner} | Partenariat`
          + '\n> ' + db.statut.get(String('ghostping')) + ' ' + `${emoji.ping} | Ghostping`
          + '\n> ' + db.statut.get(String('welcome')) + ' ' + `${emoji.welcome} | Bienvenue`
          + '\n> ' + db.statut.get(String('embed')) + ' ' + `${emoji.file} | Embed`
          + '\n> ' + db.statut.get(String('verification')) + ' ' + `${emoji.verify} | Vérification`
          + '\n> ' + db.statut.get(String('economie')) + ' ' + `${emoji.reward} | Economie`
          + '\n> ' + db.statut.get(String('suggestion')) + ' ' + `${emoji.pen} | Suggestion`
          + '\n> ' + db.statut.get(String('partenariat_mp')) + ' ' + `${emoji.link} | Partenariat MP`
          + '\n> ' + db.statut.get(String('sperso')) + ' ' + `${emoji.chanel} | Salons Personnalisés`
          + '\n> ' + db.statut.get(String('logs')) + ' ' + `${emoji.database} | Logs`
          + '\n> ' + db.statut.get(String('game')) + ' ' + `${emoji.game} | Game`
          + '\n> ' + db.statut.get(String('pub')) + ' ' + `${emoji.list} | Publicité`
          + '\n> ' + db.statut.get(String('report')) + ' ' + `${emoji.warn} | Signalement`
          + '\n> ' + db.statut.get(String('invites')) + ' ' + `${emoji.recycle} | Invitation**`
        )

      client.channels.cache.get(String(`${config.system.subscribe}`)).send({ embeds: ([embed]) })

    } else {

      console.log(chalk.gray('Ok'))
      await delay(Number(10) * 1000)
    }
  }

});


//Slashs Commands \\\
synchronizeSlashCommands(client, [{

  name: 'Signaler',
  type: 3,
}, {
  name: 'server_infos',
  description: 'Afficher les informations du serveur',
  options: [

  ]
}, {
  name: 'publicité',
  description: 'Afficher la publicité du serveur.'
}, {
  name: 'ping',
  description: 'Afficher le ping du bot.'
}, {
  name: 'abonnement',
  description: 'Gérer l\'abonnement du bot.'
}, {
  name: 'manage_bot',
  description: 'Gérer le Bot Discord.'
}, {
  name: 'partenariat',
  description: 'Lancer le procéssus de partenariat.'
}, {
  name: 'bot_count',
  description: 'Afficher le nombre de bot que possède le serveur.'
}, {
  name: 'channel_count',
  description: 'Afficher le nombre de salon(s) que possède le serveur.'
}, {
  name: 'level',
  description: 'Afficher le niveau atteint par un utilisateur.',
  options: [{
    type: 6,
    name: 'utilisateur',
    description: 'Sélectionner un utilisateur.',
    required: false,
  },]
}, {
  name: 'user_infos',
  description: 'Afficher les informations d\'un utilisateur.',
  options: [{
    type: 6,
    name: 'utilisateur',
    description: 'Sélectionner un utilisateur.',
    required: false,
  },]
}, {
  name: 'morpion',
  description: 'Jouer au morpion.',
  options: [{
    type: 6,
    name: 'utilisateur',
    description: 'Sélectionner un utilisateur.',
    required: true,
  },]
}, {
  name: 'invites',
  description: 'Afficher le nombre d\'invitations que possède un utilisateur.',
  options: [{
    type: 6,
    name: 'utilisateur',
    description: 'Sélectionner un utilisateur.',
    required: false,
  },]
}, {
  name: 'partenariat_mp',
  description: 'Ajouter une condition lors des partenariats',
  options: [{
    type: 3,
    name: 'action',
    description: 'Que souhaitez vous faire ?',
    required: true,
    choices: [{
      name: 'Consulter les partenaires',
      value: 'viewpartner'
    }, {
      name: 'Modifier la liste des partenaires',
      value: 'editlist'
    },]
  },]
}, {
  name: 'xp',
  description: 'Afficher le nombre d\'XP atteint par un utilisateur.',
  options: [{
    type: 6,
    name: 'utilisateur',
    description: 'Sélectionner un utilisateur.',
    required: false,
  },]
}, {
  name: 'vérifications',
  description: 'Afficher les vérifications obtenus par un utilisateur.',
  options: [{
    type: 6,
    name: 'utilisateur',
    description: 'Sélectionner un utilisateur.',
    require: false,
  },]
}, {
  name: 'reset_money',
  description: "Réinitialiser toute l'économie du serveur."
}, {
  name: 'help',
  description: "Afficher les informations du bot et des commandes."
}, {
  name: 'money',
  description: "Afficher l'argent que possède un utilisateur.",
  options: [{
    type: 6,
    name: 'utilisateur',
    description: 'Sélectionner un utilisateur.',
    required: false,
  },]
}, {
  name: 'unwarn',
  description: "Retirer les avertissements d'un utilisateur.",
  options: [{
    type: 6,
    name: 'utilisateur',
    description: 'Sélectionner un utilisateur.',
    required: true,
  }]
}, {
  name: 'infractions',
  description: "Consulter les avertissements d'un utilisateur.",
  options: [{
    type: 6,
    name: 'utilisateur',
    description: 'Sélectionner un utilisateur.',
    required: true,
  }]
}, {
  name: 'warn',
  description: "Ajouter un avertissement à un utilisateur.",
  options: [{
    type: 6,
    name: 'utilisateur',
    description: 'Sélectionner un utilisateur.',
    required: true,
  }, {
    type: 3,
    name: 'raison',
    description: 'Raison de la sanction.',
    required: true,
  }]
}, {
  name: 'ban',
  description: "Bannir un utilisateur du serveur.",
  options: [{
    type: 6,
    name: 'utilisateur',
    description: 'Sélectionner un utilisateur.',
    required: true,
  }, {
    type: 3,
    name: 'raison',
    description: 'Raison de la sanction.',
    required: true,
  }]
}, {
  name: 'lock',
  description: "Interdir l'accès à un salon aux membres.",
}, {
  name: 'unlock',
  description: "Autoriser l'accès à un salon aux membres.",
}, {
  name: 'kick',
  description: "Expulser un utilisateur du serveur.",
  options: [{
    type: 6,
    name: 'utilisateur',
    description: 'Sélectionner un utilisateur.',
    required: true,
  }, {
    type: 3,
    name: 'raison',
    description: 'Raison de la sanction.',
    required: true,
  }]
}, {
  name: 'unban',
  description: "Débannir un utilisateur du serveur.",
  options: [{
    type: 6,
    name: 'utilisateur',
    description: 'Sélectionner un utilisateur.',
    required: true,
  }, {
    type: 3,
    name: 'raison',
    description: 'Raison de l\'action.',
    required: true,
  }]
}, {
  name: 'say',
  description: "Faire parler le bot.",
  options: [{
    type: 3,
    name: 'blabla',
    description: 'Phrase à prononcer',
    required: true,
  }]
}, {
  name: 'clear',
  description: "Supprimer les messages d'un salon. ",
  options: [{
    type: 3,
    name: 'messages',
    description: 'Nombre de message(s) à supprimer.',
    required: true,
  }]
}, {
  name: 'partenariat_count',
  description: "Afficher le nombre de partenariats faits par un utilisateur.",
  options: [{
    type: 6,
    name: 'utilisateur',
    description: 'Sélectionner un utilisateur.',
    required: false,
  },]
}, {
  name: 'vérification_remove',
  description: "Retirer un salon de la liste des salons de vérification.",
  options: [{
    type: 7,
    name: 'salon',
    description: 'Sélectionner un salon.',
    required: true,
  }]
}, {
  name: 'vérification_add',
  description: "Ajouter un salon à la liste des salons de vérification.",
  options: [{
    type: 7,
    name: 'salon',
    description: 'Sélectionner un salon.',
    required: true,
    choices: [

    ]
  }]
}, {
  name: 'manage_money',
  description: "Modifier l'argent possédée par un utilisateur.",
  options: [{
    type: 6,
    name: 'utilisateur',
    description: 'Selectionner l\'utilisateur en question.',
    required: true,
  }, {
    type: 3,
    name: 'action',
    description: 'Selectionner le type de modification à apporter.',
    required: true,
    choices: [{ name: String('Ajouter'), value: String('add_money') }, { name: String('Retirer'), value: String('remove_money') }],
  }, {
    type: 4,
    name: 'somme',
    description: 'Selectionner la somme d\'argent à Ajouter/Retirer.',
    required: true,
  }]
}, {
  name: 'modules',
  description: 'Gestion des modules (Développeur).'

}, {
  name: 'embed',
  description: 'Créer un embed personnalisé.'

}, {
  name: 'reset_all',
  description: 'Réinitialiser tout le bot.'
}, {
  name: 'configuration',
  description: 'Configurer les différents modules du bot.'
},], {
  debug: false

});

Inviter.on('UserLeave', function (member, uses, inviter, invite) {
  if ((db.module.get(String("invites"))) === "on") {
    if ((db.database.get(String(`${inviter.id}` + '-invites_count'))) > 0) {

      db.database.subtract(String(`${inviter.id}` + '-invites_count'), 1)

    }
  }
})

Inviter.on('UserInvited', function (member, uses, inviter, invite) {
  if ((db.module.get(String("invites"))) === "on") {
    if (member.guild.id === server_id) {

      db.database.add(String(`${inviter.id}` + '-invites_count'), 1)

      if ((db.database.has(String("channel_invites"))) && (!((db.database.get(String("channel_invites"))) === "*`Non défini`*"))) {

        invites1 = db.database.get(String("message_invites"))
        invites2 = invites1.replace('{user.name}', `${member.user.username}`)
        invites3 = invites2.replace('{user.tag}', `${member.user.tag}`)
        invites4 = invites3.replace('{user.id}', `${member.user.id}`)
        invites5 = invites4.replace('{user.mention}', '<@' + `${member.user.id}` + '>')
        invites6 = invites5.replace('{inviter.name}', `${inviter.username}`)
        invites7 = invites6.replace('{inviter.tag}', `${inviter.tag}`)
        invites8 = invites7.replace('{inviter.id}', `${inviter.id}`)
        invites9 = invites8.replace('{inviter.mention}', '<@' + `${inviter.id}` + '>')
        invites10 = invites9.replace('{server.id}', `${member.guild.id}`)
        invites11 = invites10.replace('{server.name}', `${member.guild.name}`)
        invites12 = invites11.replace('{invites}', db.database.get(String(`${inviter.id}` + '-invites_count')))


        client.channels.cache.get(db.database.get(String("channel_invites"))).send({ content: invites12 })

        try {

          if ((db.database.get(String("rank1_invites")) === "*`Non défini`*")) {

          } else {
            if (db.database.get(String(`${inviter.id}` + '-invites_count')) >= db.database.get(String("rank1_invites_number"))) {
              member.guild.members.cache.get(`${inviter.id}`).roles.add(member.guild.roles.cache.get(db.database.get(String("rank1_invites"))))
            }
          }
          if ((db.database.get(String("rank2_invites")) === "*`Non défini`*")) {

          } else {
            if (db.database.get(String(`${inviter.id}` + '-invites_count')) >= db.database.get(String("rank2_invites_number"))) {
              member.guild.members.cache.get(`${inviter.id}`).roles.add(member.guild.roles.cache.get(db.database.get(String("rank2_invites"))))
            }
          }
          if ((db.database.get(String("rank3_invites")) === "*`Non défini`*")) {

          } else {
            if (db.database.get(String(`${inviter.id}` + '-invites_count')) >= db.database.get(String("rank3_invites_number"))) {
              member.guild.members.cache.get(`${inviter.id}`).roles.add(member.guild.roles.cache.get(db.database.get(String("rank3_invites"))))
            }
          }
        } catch (err) {
          console.log(chalk.redBright(err + " | Erreur"))
        }
      }
    }
  }

})

//client.on('emojiDelete', async (emoj) => {
//  if (db.module.get(String('logs')) === "on") {
//  if (db.database.has(String('logs_chanel'))) {



//  var embed = new EmbedBuilder()
//    .setColor(`${config.color.color_error}`)
//   .setTitle(`${emoji.diamond}${emojd.title.text1}`)
//    .setTimestamp()
//   .setDescription(`${emoji.infos}${emojd.description.text1}` + '```' + emoj.name + ' / ' + emoj.id + '```')

//   client.channels.cache.get(db.database.get(String('logs_chanel'))).send({ embeds: ([embed]) })
//   }
// }
//})


//client.on('guildBanAdd', async (ban) => {
//if (db.module.get(String('logs')) === "on") {
//if (db.database.has(String('logs_chanel'))) {
//  ban.guild.fetchAuditLogs({ type: 22 }).then((audit) => {
//   let creator = audit.entries.find((a) => a.target.id == `${ban.id}`)?.executor;
//  let creator2 = client.users.cache.get(creator)


//  var embed = new EmbedBuilder()
//   .setColor(`${config.color.color_error}`)
//   .setTitle(`${emoji.chanel}${banadd.title.text1}`)
//  .setTimestamp()
//  .setDescription(`${emoji.infos}${banadd.description.text1}` + '```' + ban.user.name + ' / ' + ban.user.id + '```\n' +
//    `${emoji.protector}${banadd.description.text2}` + '```' + creator2.tag + ' / ' + creator2.id + '```')


//  client.channels.cache.get(db.database.get(String('logs_chanel'))).send({ embeds: ([embed]) })
//  })
// }
// }
//})

//client.on('emojiUpdate', async (emoj) => {
//if (db.module.get(String('logs')) === "on") {
// if (db.database.has(String('logs_chanel'))) {

//   var embed = new EmbedBuilder()
//   .setColor(`${config.color.color}`)
//    .setTitle(`${emoji.diamond}${emoju.title.text1}`)
//   .setTimestamp()
//    .setDescription(`${emoji.infos}${emoju.description.text1}` + '```' + emoj.name + ' / ' + emoj.id + '```')

//   client.channels.cache.get(db.database.get(String('logs_chanel'))).send({ embeds: ([embed]) })
//   }
// }
//})

//client.on('emojiCreate', async (emoj) => {
// if (db.module.get(String('logs')) === "on") {
//  if (db.database.has(String('logs_chanel'))) {

//   var embed = new EmbedBuilder()
//     .setColor(`${config.color.color_good}`)
//    .setTitle(`${emoji.diamond}${emojc.title.text1}`)
//     .setTimestamp()
//    .setDescription(`${emoji.infos}${emojc.description.text1}` + '```' + emoj.name + ' / ' + emoj.id + '```')

//  client.channels.cache.get(db.database.get(String('logs_chanel'))).send({ embeds: ([embed]) })
//  }
// }
//})

//client.on('channelUpdate', async (chanel) => {
// if (db.module.get(String('logs')) === "on") {
//  if (db.database.has(String('logs_chanel'))) {
//   chanel.guild.fetchAuditLogs({ type: 10 }).then((audit) => {
//    let creator = audit.entries.find((a) => a.target.id == `${chanel.id}`)?.executor;

//   var embed = new EmbedBuilder()
//    .setColor(`${config.color.color}`)
//    .setTitle(`${emoji.chanel}${channelu.title.text1}`)
//   .setTimestamp()
//   .setDescription(`${emoji.infos}${channelu.description.text1}` + '```' + chanel.name + ' / ' + chanel.id + '```\n' +
//     `${emoji.file}${channelu.description.text2}` + '```' + chanel.parent.name + ' / ' + chanel.parentId + '```\n' +
//      `${emoji.community}${channelu.description.text4}` + '```' + creator.tag + ' / ' + creator.id + '```')

//  client.channels.cache.get(db.database.get(String('logs_chanel'))).send({ embeds: ([embed]) })
//  })
//  }
// }
//})


//client.on('channelDelete', async (chanel) => {
// if (db.module.get(String('logs')) === "on") {
//   if (db.database.has(String('logs_chanel'))) {
//     chanel.guild.fetchAuditLogs({ type: 10 }).then((audit) => {
//       let creator = audit.entries.find((a) => a.target.id == `${chanel.id}`)?.executor;

//      var embed = new EmbedBuilder()
//        .setColor(`${config.color.color_error}`)
//         .setTitle(`${emoji.chanel}${channeld.title.text1}`)
//         .setTimestamp()
//        .setDescription(`${emoji.infos}${channeld.description.text1}` + '```' + chanel.name + ' / ' + chanel.id + '```\n' +
//           `${emoji.file}${channeld.description.text2}` + '```' + chanel.parent.name + ' / ' + chanel.parentId + '```\n' +
//           `${emoji.community}${channeld.description.text4}` + '```' + creator.tag + ' / ' + creator.id + '```')

//       client.channels.cache.get(db.database.get(String('logs_chanel'))).send({ embeds: ([embed]) })
//     })
//  }
// }
//})

//client.on('channelCreate', async (chanel) => {
// if (db.module.get(String('logs')) === "on") {
//    if (db.database.has(String('logs_chanel'))) {
//     chanel.guild.fetchAuditLogs({ type: 10 }).then((audit) => {
//       let creator = audit.entries.find((a) => a.target.id == `${chanel.id}`)?.executor;

//        var embed = new EmbedBuilder()
//          .setColor(`${config.color.color_good}`)
//          .setTitle(`${emoji.chanel}${channelc.title.text1}`)
//          .setTimestamp()
//         .setDescription(`${emoji.infos}${channelc.description.text1}` + '```' + chanel.name + ' / ' + chanel.id + '```\n' +
//            `${emoji.file}${channelc.description.text2}` + '```' + chanel.parent.name + ' / ' + chanel.parentId + '```\n' +
//            `${emoji.community}${channelc.description.text4}` + '```' + creator.tag + ' / ' + creator.id + '```')

//        client.channels.cache.get(db.database.get(String('logs_chanel'))).send({ embeds: ([embed]) })
//      })
//    }
//  }
//})

client.on('guildMemberAdd', async (member) => {

  if (db.database.get(String("stat")) === "free") {
    if (member.guild.id === server_id) {
      try {
        member.send({ content: "__**Bot `développé` et `propulsé` par ECLIPSE HOST**__\n\n🧰 **» Tu souhaites un bot gratuit ?**\n📡 **» Tu souhaites heberger ton bot ?**\n\n🍃 **| Rejoins le support:** https://discord.gg/PRU2R4wuWF" })
      } catch (err) {
        console.log(chalk.redBright(err + " | MP Fermé / BOT"))
      }
    }
  }

  if ((db.module.get(String("partenariat_mp"))) === "on") {
    if (member.guild.id === server_id) {


      if (!(((db.database.get(String("partner_1"))) === "") && ((db.database.get(String("partner_2"))) === "") && ((db.database.get(String("partner_3"))) === "") && ((db.database.get(String("partner_3"))) === "") && ((db.database.get(String("partner_4"))) === "") && ((db.database.get(String("partner_5"))) === "") && ((db.database.get(String("partner_6"))) === "") && ((db.database.get(String("partner_7"))) === "") && ((db.database.get(String("partner_8"))) === "") || ((db.database.get(String("partner_9"))) === "") && ((db.database.get(String("partner_10"))) === "") && ((db.database.get(String("partner_11"))) === "") && ((db.database.get(String("partner_11"))) === "") && ((db.database.get(String("partner_12"))) === "") && ((db.database.get(String("partner_13"))) === "") && ((db.database.get(String("partner_14"))) === "") && ((db.database.get(String("partner_15"))) === "") && ((db.database.get(String("partner_16"))) === "") && ((db.database.get(String("partner_17"))) === "") && ((db.database.get(String("partner_18"))) === "") && ((db.database.get(String("partner_19"))) === "") && ((db.database.get(String("partner_20"))) === ""))) {

        member.send({
          content: db.database.get(String("partner_message")) + '\n\n' +
            db.database.get(String("partner_1")) + '\n' +
            db.database.get(String("partner_2")) + '\n' +
            db.database.get(String("partner_3")) + '\n' +
            db.database.get(String("partner_4")) + '\n' +
            db.database.get(String("partner_5")) + '\n' +
            db.database.get(String("partner_6")) + '\n' +
            db.database.get(String("partner_7")) + '\n' +
            db.database.get(String("partner_8")) + '\n' +
            db.database.get(String("partner_9")) + '\n' +
            db.database.get(String("partner_10")) + '\n' +
            db.database.get(String("partner_11")) + '\n' +
            db.database.get(String("partner_12")) + '\n' +
            db.database.get(String("partner_13")) + '\n' +
            db.database.get(String("partner_14")) + '\n' +
            db.database.get(String("partner_15")) + '\n' +
            db.database.get(String("partner_16")) + '\n' +
            db.database.get(String("partner_17")) + '\n' +
            db.database.get(String("partner_18")) + '\n' +
            db.database.get(String("partner_19")) + '\n' +
            db.database.get(String("partner_20")) + '\n'
        })
      }

    } else {
      if ((db.module.get(String("welcome"))) === "on") {
        if (db.database.has(String("message_join_mp"))) {

          let message = db.database.get(String("message_join_mp"))

          let message1 = message.replace('{user.name}', member.user.username)
          let message2 = message1.replace('{user.tag}', member.user.tag)
          let message3 = message2.replace('{user.id}', member.user.id)
          let message4 = message3.replace('{user.mention}', '<@' + member.user.id + '>')
          let message5 = message4.replace('{server.name}', member.guild.name)
          let message6 = message5.replace('{server.id}', member.guild.id)


          member.guild.members.cache.get(member.user.id).send({ content: message6 })
        }
      }
    }
  }

  if ((db.module.get(String("welcome"))) === "on") {
    if (member.guild.id === server_id) {
      if (!(db.database.get(String("rank_give")) === "*`Non défini`*")) {

        try {
          (member.guild.members.cache.get(member.user.id)).roles.add(member.guild.roles.cache.get(db.database.get(String("rank_give"))))
        } catch (err) {
          console.log(chalk.redBright(err + " | Member Not Found"))
        }

      }
    }
  }

  if ((db.module.get(String("welcome"))) === "on") {
    if (member.guild.id === server_id) {
      if (!((db.database.get(String("channel_welcome"))) === "*`Non défini`*")) {

        let message = db.database.get(String("message_join"))

        let message1 = message.replace('{user.name}', member.user.username)
        let message2 = message1.replace('{user.tag}', member.user.tag)
        let message3 = message2.replace('{user.id}', member.user.id)
        let message4 = message3.replace('{user.mention}', '<@' + member.user.id + '>')
        let message5 = message4.replace('{server.name}', member.guild.name)
        let message6 = message5.replace('{server.id}', member.guild.id)


        client.channels.cache.get(db.database.get(String("channel_welcome"))).send({ content: message6 })

        if (((!(db.database.get(String("rank_give")))) === "*`Non défini`*") && (db.database.has(String("message_join")))) {


          (member.guild.members.cache.get(member.user.id)).roles.add(member.guild.roles.cache.get(db.database.get(String("rank_give"))))

        }
      }
    }
  }

  if ((db.module.get(String("ghostping"))) === "on") {
    if (member.guild.id === server_id) {

      if (!((db.database.get(String("channel_gp1"))) === "*`Non défini`*")) {
        client.channels.cache.get(String(db.database.get(String("channel_gp1")))).send({
          content: "<@" + member.id + ">"
        }).then(async (ghostping) => {
          await ghostping.delete()
        })
      }
      if (!((db.database.get(String("channel_gp2"))) === "*`Non défini`*")) {
        client.channels.cache.get(String(db.database.get(String("channel_gp2")))).send({
          content: "<@" + member.id + ">"
        }).then(async (ghostping) => {
          await ghostping.delete()
        })
      }
      if (!((db.database.get(String("channel_gp3"))) === "*`Non défini`*")) {
        client.channels.cache.get(String(db.database.get(String("channel_gp3")))).send({
          content: "<@" + member.id + ">"
        }).then(async (ghostping) => {
          await ghostping.delete()
        })
      }
      if (!((db.database.get(String("channel_gp4"))) === "*`Non défini`*")) {
        client.channels.cache.get(String(db.database.get(String("channel_gp4")))).send({
          content: "<@" + member.id + ">"
        }).then(async (ghostping) => {
          await ghostping.delete()
        })
      }
      if (!((db.database.get(String("channel_gp5"))) === "*`Non défini`*")) {
        client.channels.cache.get(String(db.database.get(String("channel_gp5")))).send({
          content: "<@" + member.id + ">"
        }).then(async (ghostping) => {
          await ghostping.delete()
        })
      }
      if (!((db.database.get(String("channel_gp6"))) === "*`Non défini`*")) {
        client.channels.cache.get(String(db.database.get(String("channel_gp6")))).send({
          content: "<@" + member.id + ">"
        }).then(async (ghostping) => {
          await ghostping.delete()
        })
      }
      if (!((db.database.get(String("channel_gp7"))) === "*`Non défini`*")) {
        client.channels.cache.get(String(db.database.get(String("channel_gp7")))).send({
          content: "<@" + member.id + ">"
        }).then(async (ghostping) => {
          await ghostping.delete()
        })
      }
      if (!((db.database.get(String("channel_gp8"))) === "*`Non défini`*")) {
        client.channels.cache.get(String(db.database.get(String("channel_gp8")))).send({
          content: "<@" + member.id + ">"
        }).then(async (ghostping) => {
          await ghostping.delete()
        })
      }
      if (!((db.database.get(String("channel_gp9"))) === "*`Non défini`*")) {
        client.channels.cache.get(String(db.database.get(String("channel_gp9")))).send({
          content: "<@" + member.id + ">"
        }).then(async (ghostping) => {
          await ghostping.delete()
        })
      }
      if (!((db.database.get(String("channel_gp10"))) === "*`Non défini`*")) {
        client.channels.cache.get(String(db.database.get(String("channel_gp10")))).send({
          content: "<@" + member.id + ">"
        }).then(async (ghostping) => {
          await ghostping.delete()
        })
      }
    }
  }
})

client.on('messageCreate', async (message) => {

  if (message.guildId === server_id) {
    if (!(message.author.bot)) {
      if (db.module.get(String("verification")) === "on") {
        if ((db.verif.has(message.channelId)) && ((db.verif.get(String(message.channelId))) === "verif")) {
          if (((message.content.includes("@everyone")) ||(message.content.includes("@here")) || (message.content.includes("@")))) {

            var embed = new EmbedBuilder()
              .setColor(`${config.color.color_error}`)
              .setDescription(`${emoji.wrong} **| Vous ne pouvez pas poster une publicité contenue une mention !**`)

            message.reply({
              embeds: ([embed])
            }).then(async (response) => {
              try {
              await message.delete()
              await delay(Number(5) * 1000)
              await response.delete()
              } catch (err) {
                console.log(chalk.redBright(err + "| MESSAGE MENTION"))
              }
            })
          } else {
            if (((db.database.get(String("channel_verif")) === "*`Non défini`*") || (db.database.get(String("channel_verif_simple")) === "*`Non défini`*") || (db.database.get(String("channel_logs_verif")) === "*`Non défini`*") || (db.database.get(String("channel_logs_verif_simple")) === "*`Non défini`*") || (db.database.get(String("rank-accès_verif_add")) === "*`Non défini`*") || (db.database.get(String("rank-accès_verif_simple")) === "*`Non défini`*"))) {


              var embed = new EmbedBuilder()
                .setColor(`${config.color.color_error}`)
                .setDescription(`${emoji.wrong}${verify.description.text11}`)

              message.reply({
                embeds: ([embed])
              }).then(async (response) => {
                await delay(Number(3) * 1000)
                await message.delete()
                await response.delete()
              })

            } else {

              let response = message.content
              let member = message.author
              let channel = message.channel

              db.database.add(String("verif_counter"), 1)

              if (response.includes(("publicitaire") || ("publicité") || ("pub") || ("advertising"))) {
                db.database.set(String(db.database.get(String("verif_counter") + "-theme")), "PUBLICITAIRE")
              } else if (response.includes(("communautaire") || ("commu") || ("community") || ("discussions") || ("discuter"))) {
                db.database.set(String(db.database.get(String("verif_counter") + "-theme")), "COMMUNAUTAIRE")
              } else if (response.includes(("gaming") || ("jeux") || ("jeu") || ("game") || ("rp") || ("roleplay"))) {
                db.database.set(String(db.database.get(String("verif_counter") + "-theme")), "GAMING")
              } else if (response.includes(("art") || ("artist") || ("artistique") || ("création") || ("create") || ("creation"))) {
                db.database.set(String(db.database.get(String("verif_counter") + "-theme")), "ARTISTIQUE")
              } else if (response.includes(("youtu") || ("youtube") || ("twitch") || ("chaîne") || ("live") || ("tv"))) {
                db.database.set(String(db.database.get(String("verif_counter") + "-theme")), "VIDEOS/STREAMS")
              } else if (response.includes(("web") || ("site") || ("internet") || ("hebergement") || ("host"))) {
                db.database.set(String(db.database.get(String("verif_counter") + "-theme")), "SITE WEB")
              }

              await db.database.set(String(String(db.database.get(String("verif_counter")) + "-pub")), response)
              await db.database.set(String(String(db.database.get(String("verif_counter")) + "-author")), member.id)
              await db.database.set(String(String(db.database.get(String("verif_counter")) + "-channel")), channel.id)

              var embed = new EmbedBuilder()
                .setTitle(`${emoji.zoom}${verify.title.text1}`)
                .setColor(`${config.color.color_verif_stop}`)
                .setDescription(response + '\n\n\n')
                .setFields(
                  { name: 'Utilisateur', value: "<@" + member.id + "> \n *`" + member.username + "`*", inline: true },
                  { name: 'Salon', value: "<#" + channel.id + "> \n *`" + channel.name + "`*", inline: true }
                )

              const verif_good_accept = new ButtonBuilder()
                .setStyle(ButtonStyle.Success)
                .setLabel("Accepter")
                .setCustomId("verif_good_accept")

              const verif_notgood_refused = new ButtonBuilder()
                .setStyle(ButtonStyle.Danger)
                .setLabel("Refuser")
                .setCustomId("verif_notgood_refused")

              const verif_poubelle = new ButtonBuilder()
                .setStyle(ButtonStyle.Secondary)
                .setLabel("Jeter")
                .setCustomId("verif_poubelle")

              const menu_verif_embed = new ActionRowBuilder()
                .addComponents(verif_good_accept)
                .addComponents(verif_notgood_refused)
                .addComponents(verif_poubelle)

              message.guild.channels.cache.get(db.database.get(String("channel_verif"))).send({ content: "**" + String(db.database.get(String("verif_counter"))) + "**", embeds: ([embed]), components: [menu_verif_embed] })

              var embed = new EmbedBuilder()
                .setColor(`${config.color.color_good}`)
                .setDescription(`${emoji.tick}${verify.description.text2}`)

              await message.reply({
                embeds: ([embed])
              }).then(async (pub) => {
                try {
                  await message.delete()
                  await delay(Number(3) * 1000)
                  await pub.delete()
                } catch (err) {
                  console.log(chalk.redBright(err + " | Unknow Message"))
                }
              })
            }
          }
        }
      }
    }
  }

  if (message.content === prefix_dev + "free") {
    if (message.guildId === server_id) {
      if (message.author.id === dev) {
        if (db.database.get(String("stat")) === "free") {
          db.database.set(String("stat"), "notfree")


          var embed = new EmbedBuilder()
            .setColor(`${config.color.color_verif_stop}`)
            .setDescription(`${emoji.bin}${general.response.desactivate_free}`)
          message.reply({ embeds: ([embed]) })

          await message.guild.channels.delete(message.guild.channels.cache.find((channel) => channel.name === '📡・eclipse-host'))
        } else {

          db.database.set(String("stat"), "free")

          message.guild.channels.create({
            name: '📡・eclipse host',
            reason: "Salon personnalisé de 📡・eclipse host",
            permissionOverwrites: [
              {
                id: message.guildId,
                allow: [PermissionFlagsBits.ViewChannel],
                deny: [PermissionFlagsBits.SendMessages]
              }
            ]
          }).then(async (eclipse) => {
            eclipse.send({
              content: `📡 **| Tu souhaites un bot personnalisé pour ton serveur Discord ou bien hébergé un bot qui t'appartient ?**

        🍃 **|** __**Alors rejoins Eclipse Host !**__
        
        > 🧩 » Des modules propres et faciles de configuration !
        > 🛡️ » Des bots et hébergements sécurisés !
        > 🛒 » Des systèmes abordables voir gratuits !
        > 🧰 » Nous recrutons des équipiers *(\`techniciens\`, \`commerciaux\`, \`bêta testeurs\`...)* !
        
        __**Alors n'attendez pas et rejoins nous !**__
        🎫 **| Lien d'invitation :** https://discord.gg/PRU2R4wuWF
        🏙️ **| Bannière :** https://imgur.com/a/FBmUYjl`})
          })

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color_verif_stop}`)
            .setDescription(`${emoji.tick}${general.response.activate_free}`)
          message.reply({ embeds: ([embed]) })
        }


      } else {

        var embed = new EmbedBuilder()
          .setColor(`${config.color.color_error}`)
          .setDescription(`${emoji.wrong}${general.error.perms_dev}`)

        message.reply({
          embeds: ([embed])
        }).then(async (del) => {
          await delay(Number(3) * 1000)
          await message.delete()
          await del.delete()
        })
      }
    }
  }



  if (db.module.get(String('economie')) === "on") {
    if (message.guildId === server_id) {
      if (!((message.author).bot)) {
        if (!(db.money.has(String(message.author.id + '-money')))) {
          db.money.add(String(message.author.id + '-money'), parseInt(db.database.get(String('economie_start'))))
          db.money.add(String(message.author.id + '-money'), parseInt(db.database.get(String('economie_messages'))))

        } else {
          db.money.add(String(message.author.id + '-money'), parseInt(db.database.get(String('economie_messages'))))
        }
      }
    }
  }

  if (db.module.get(String('suggestion')) === "on") {
    if (message.guildId === server_id) {
      if (message.channel.id === db.database.get(String('sondage_channel'))) {
        if (!(((message.content).includes('http://')) || ((message.content).includes('https://')) || ((message.content).includes('http')) || ((message.content).includes('https')) || ((message.content).includes('.gg')) || ((message.content).includes('.gg/')))) {
          if (!((message.author).bot)) {

            try {
              message.delete()
            } catch (err) {
              console.log(chalk.redBright(err + '(Message Introuvable)'))
            }

            var embed = new EmbedBuilder()
              .setTitle(`${emoji.pen}${suggestion.title.text1}`)
              .setFooter({ text: `${general.response.sugges_footer}` + message.author.tag, iconURL: message.author.displayAvatarURL() })
              .setColor(`${config.color.color}`)
              .setDescription('```' + message.content + '```')

            client.channels.cache.get(db.database.get(String('sondage_channel'))).send({
              embeds: ([embed])
            }).then(async (sondage) => {
              sondage.react(db.database.get(String('sondage_pour')))
              sondage.react(db.database.get(String('sondage_base')))
              sondage.react(db.database.get(String('sondage_contre')))
            })

            await delay(Number(3) * 1000)
            message.author.send({ content: "Votre **suggestion** a bien été **envoyée** dans le salon **`" + message.channel.name + "`** !" })
          }
        } else {

          message.delete()

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color_error}`)
            .setDescription(`${emoji.wrong}${suggestion.description.text5}`)

          message.author.send({ embeds: ([embed]) })

        }
      }
    }
  }

  if ((db.module.get(String('game')) === "on")) {
    if (message.guildId === server_id) {
      if (message.channel.id === db.database.get(String("suite_channel"))) {
        if (!((message.author).bot)) {
          if ((db.database.get(String("suite_number"))) === (message.content * 1)) {

            db.database.add(String("suite_number"), 1)

          } else {


            var embed = new EmbedBuilder()
              .setColor(`${config.color.color_error}`)
              .setDescription(`${emoji.wrong}${general.error.not_number1}` + db.database.get(String("suite_number")) + `${general.error.not_number2}`)

            await message.reply({
              embeds: ([embed])
            }).then(async (response) => {
              await message.delete()
              await delay(Number(3) * 1000)
              await response.delete()

            })
          }
        }
      }
    }
  }

});

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

///Commandes (Slashs commands)\\\
client.on('interactionCreate', async (interaction) => {

  // if (interaction.customId === "morpion_refuse") {
  //   if ((db.module.get(String('game'))) === "on") {
  // let number0 = interaction.message.content
  //   let number2 = number0.replace('**', '')
  //  let number3 = number2.replace('**', '')
  //   if ((db.database.get(String(db.database.get(String("morpion_count")) + "-morpion"))) === interaction.member.id) {

  //  } else {

  //   var embed = new EmbedBuilder()
  //   .setColor(`${config.color.color_error}`)
  //   .setDescription(`${emoji.wrong}${morpion.description.text4}`)

  //   interaction.reply({ embeds: ([embed]), ephemeral: true })
  //   }
  //   } else {

  //   var embed = new EmbedBuilder()
  //      .setColor(`${config.color.color_error}`)
  //   .setDescription(`${emoji.wrong}${general.error.module_activate1}` + ' *`Jeux`* ' + `${general.error.module_activate2}`)

  // interaction.reply({ embeds: ([embed]), ephemeral: true })
  // }
  // }

  // if (interaction.customId === "morpion_accept") {
  //  if ((db.module.get(String('game'))) === "on") {
  //  let number0 = interaction.message.content
  //  let number2 = number0.replace('**', '')
  // let number3 = number2.replace('**', '')
  //  if ((db.database.get(String(db.database.get(String("morpion_count")) + "-morpion"))) === interaction.member.id) {

  //   member_author = interaction.guild.members.cache.get(db.database.get(String(db.database.get(String("morpion_count")) + "-morpion_user")))
  //     member_visitor = interaction.guild.members.cache.get(db.database.get(String(db.database.get(String("morpion_count")) + "-morpion")))

  //   var embed = new EmbedBuilder()
  //  .setColor(`${config.color.color}`)
  //  .setTitle(member_author.user.username + " Vs " + member_visitor.user.username)
  //  .setDescription(`${morpion.description.text6}` + member_author.user.tag)

  //  const morpion_1 = new ButtonBuilder()
  //   .setStyle(ButtonStyle.Secondary)
  //   .setEmoji(`${emoji.remove}`)
  //    .setCustomId("morpion_1")

  //  const morpion_2 = new ButtonBuilder()
  //  .setStyle(ButtonStyle.Secondary)
  //  .setEmoji(`${emoji.remove}`)
  //  .setCustomId("morpion_2")

  //  const morpion_3 = new ButtonBuilder()
  //   .setStyle(ButtonStyle.Secondary)
  //    .setEmoji(`${emoji.remove}`)
  //    .setCustomId("morpion_3")

  //  const morpion_4 = new ButtonBuilder()
  //    .setStyle(ButtonStyle.Secondary)
  //   .setEmoji(`${emoji.remove}`)
  //   .setCustomId("morpion_4")

  // const morpion_5 = new ButtonBuilder()
  //  .setStyle(ButtonStyle.Secondary)
  //   .setEmoji(`${emoji.remove}`)
  //  .setCustomId("morpion_5")

  //  const morpion_6 = new ButtonBuilder()
  //   .setStyle(ButtonStyle.Secondary)
  //   .setEmoji(`${emoji.remove}`)
  //   .setCustomId("morpion_6")

  //  const morpion_7 = new ButtonBuilder()
  //   .setStyle(ButtonStyle.Secondary)
  //   .setEmoji(`${emoji.remove}`)
  //   .setCustomId("morpion_7")

  //  const morpion_8 = new ButtonBuilder()
  //    .setStyle(ButtonStyle.Secondary)
  //    .setEmoji(`${emoji.remove}`)
  //    .setCustomId("morpion_8")

  //  const morpion_9 = new ButtonBuilder()
  //     .setStyle(ButtonStyle.Secondary)
  //    .setEmoji(`${emoji.remove}`)
  //   .setCustomId("morpion_9")

  //   const morpion_menu1 = new ActionRowBuilder()
  //    .addComponents(morpion_1)
  //    .addComponents(morpion_2)
  //    .addComponents(morpion_3)

  //    const morpion_menu2 = new ActionRowBuilder()
  //     .addComponents(morpion_4)
  //     .addComponents(morpion_5)
  //      .addComponents(morpion_6)

  //   const morpion_menu3 = new ActionRowBuilder()
  //     .addComponents(morpion_7)
  //     .addComponents(morpion_8)
  //     .addComponents(morpion_9)

  //   interaction.message.edit({ embeds: ([embed]), components: [morpion_menu1, morpion_menu2, morpion_menu3] })

  //   interaction.deferUpdate()




  //    } else {

  //     var embed = new EmbedBuilder()
  //       .setColor(`${config.color.color_error}`)
  //     .setDescription(`${emoji.wrong}${morpion.description.text4}`)
  //
  //    interaction.reply({ embeds: ([embed]), ephemeral: true })
  //  }
  //  } else {

  //   var embed = new EmbedBuilder()
  //     .setColor(`${config.color.color_error}`)
  //     .setDescription(`${emoji.wrong}${general.error.module_activate1}` + ' *`Jeux`* ' + `${general.error.module_activate2}`)

  //  interaction.reply({ embeds: ([embed]), ephemeral: true })
  // }
  // }


  // if (interaction.commandName === "morpion") {
  //  if (1 === 0) {
  //   if ((db.module.get(String('game'))) === "on") {
  //    member = interaction.options.getUser("utilisateur")
  //   if (!(interaction.member.id === member.id)) {

  //    await db.database.add(String("morpion_count"), 1)
  //    await db.database.set(String(db.database.get(String("morpion_count")) + "-morpion"), member.id)
  //    await db.database.set(String(db.database.get(String("morpion_count")) + "-morpion_user"), interaction.member.id)

  //   var embed = new EmbedBuilder()
  //     .setColor(`${config.color.color_verif_stop}`)
  //     .setDescription(`${morpion.description.text1}` + "<@" + interaction.member.id + ">" + `${morpion.description.text2}` + "<@" + member.id + ">" + `${morpion.description.text3}`)

  //   const morpion_accept = new ButtonBuilder()
  //     .setStyle(ButtonStyle.Success)
  //     .setLabel("Rjoindre")
  //     .setCustomId("morpion_accept")

  //   const morpion_refuse = new ButtonBuilder()
  //     .setStyle(ButtonStyle.Danger)
  //     .setLabel("Refuser")
  //     .setCustomId("morpion_refuse")

  //   const morpion_menu = new ActionRowBuilder()
  //      .addComponents(morpion_accept)
  //     .addComponents(morpion_refuse)

  //   interaction.reply({ content: "**" + db.database.get(String("morpion_count")) + "**", embeds: ([embed]), components: [morpion_menu] })


  //  } else {

  //   var embed = new EmbedBuilder()
  //    .setColor(`${config.color.color_error}`)
  //    .setDescription(`${emoji.wrong}${morpion.description.text5}`)

  //   interaction.reply({ embeds: ([embed]), ephemeral: true })

  //  }
  //  } else {

  //    var embed = new EmbedBuilder()
  //   .setColor(`${config.color.color_error}`)
  //    .setDescription(`${emoji.wrong}${general.error.module_activate1}` + ' *`Jeux`* ' + `${general.error.module_activate2}`)

  //   interaction.reply({ embeds: ([embed]), ephemeral: true })
  //  }
  //}
  // }


  if (interaction.customId === "owner_button_change") {
    if ((interaction.member.id === owner) || (interaction.member.id === dev)) {

      interaction.deferUpdate()
      interaction.channel.send(`${emoji.pen}${configm.description.text127}`).then(async (question) => {
        (interaction.channel).awaitMessages({
          filter: (m) => m.author.id === interaction.member.id,
          time: (500 * 60 * 100),
          max: 1
        }).then(async (collected) => {
          reply = collected.first().content;
          message = collected.first();
          interaction.channel.bulkDelete(1)
          question.delete()
          await delay(Number(1) * 1000)
          if (!(reply === "cancel")) {
            if ((((reply) || '').startsWith('<@' || ''))) {

              let change = reply.replace('<', '')
              let change1 = change.replace('@', '')
              let change2 = change1.replace('>', '')

              db.base.set(String("owner"), change2)

              var embed = new EmbedBuilder()
                .setColor(`${config.color.color}`)
                .setTitle(`${emoji.settings}${manage_bot.title.text2}`)
                .setFields({ name: `${emoji.owner} | Propriétaire`, value: "<@" + db.base.get(String("owner")) + "> / `" + db.base.get(String("owner")) + "`", inline: true })

              interaction.message.edit({ embeds: ([embed]) })

              try {
                member = interaction.guild.members.cache.get(db.base.get(String("owner")))

                bot = client.user.username

                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color}`)
                  .setDescription(`${emoji.owner}${configm.description.text128}` + client.user.username + "`**")

                member.send({ embeds: ([embed]) })
              } catch (err) {

                console.log(chalk.redBright(err + " | User Not Found"))
              }

              var embed = new EmbedBuilder()
                .setColor(`${config.color.color_good}`)
                .setDescription(`${emoji.tick}${general.response.save_modifications}`)

              interaction.channel.send({
                embeds: ([embed])
              }).then(async (response_save) => {
                await delay(Number(3) * 1000)
                response_save.delete()
              })

            } else {

              db.base.set(String("owner"), reply)

              var embed = new EmbedBuilder()
                .setColor(`${config.color.color}`)
                .setTitle(`${emoji.settings}${manage_bot.title.text2}`)
                .setFields({ name: `${emoji.owner} | Propriétaire`, value: "<@" + db.base.get(String("owner")) + "> / `" + db.base.get(String("owner")) + "`", inline: true })

              interaction.message.edit({ embeds: ([embed]) })

              try {
                member = interaction.guild.members.cache.get(db.base.get(String("owner")))

                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color}`)
                  .setDescription(`${emoji.owner}${configm.description.text128}` + client.user.username + "`**")

                member.send({ embeds: ([embed]) })
              } catch (err) {

                console.log(chalk.redBright(err + " | User Not Found"))
              }

              var embed = new EmbedBuilder()
                .setColor(`${config.color.color_good}`)
                .setDescription(`${emoji.tick}${general.response.save_modifications}`)

              interaction.channel.send({
                embeds: ([embed])
              }).then(async (response_save) => {
                await delay(Number(3) * 1000)
                response_save.delete()
              })


            }
          } else {

            var embed = new EmbedBuilder()
              .setColor(`${config.color.color_error}`)
              .setDescription(`${emoji.wrong}${general.response.nosave_modif}`)
            interaction.channel.send({
              embeds: ([embed])
            }).then(async (response_nosave) => {
              await delay(Number(3) * 1000)
              response_nosave.delete()

            })
          }
        })
      })
    }
  }

  if (interaction.customId === "statut_button_change") {
    if (!(db.database.get(String("stat")) === "free")) {
      if ((interaction.member.id === owner) || (interaction.member.id === dev)) {

        interaction.deferUpdate()
        interaction.channel.send(`${emoji.pen}${configm.description.text129}`).then(async (question) => {
          (interaction.channel).awaitMessages({
            filter: (m) => m.author.id === interaction.member.id,
            time: (1500 * 60 * 100),
            max: 1
          }).then(async (collected) => {
            reply = collected.first().content;
            message = collected.first();
            interaction.channel.bulkDelete(1)
            question.delete()
            await delay(Number(1) * 1000)
            if (!(reply === "cancel")) {

              db.base.set(String("statut_name"), reply)

              var embed = new EmbedBuilder()
                .setColor(`${config.color.color}`)
                .setTitle(`${emoji.settings}${manage_bot.title.text2}`)
                .setFields({ name: `${emoji.zoom} | Statut`, value: db.base.get(String("statut_name")), inline: true })

              interaction.message.edit({ embeds: ([embed]) })

              var embed = new EmbedBuilder()
                .setColor(`${config.color.color_verif_stop}`)
                .setDescription(`${emoji.database}${configm.description.text130}`)

              interaction.channel.send({
                embeds: ([embed])
              }).then(async (response_save) => {
                await delay(Number(10) * 1000)
                response_save.delete()
              })

            } else {

              var embed = new EmbedBuilder()
                .setColor(`${config.color.color_error}`)
                .setDescription(`${emoji.wrong}${general.response.nosave_modif}`)
              interaction.channel.send({
                embeds: ([embed])
              }).then(async (response_nosave) => {
                await delay(Number(3) * 1000)
                response_nosave.delete()

              })
            }
          })
        })
      }
    }
  }


  if (interaction.customId === "menu_manage_statut") {
    if ((interaction.member.id === owner) || (interaction.member.id === dev)) {
      if (!(db.database.get(String("stat")) === "free")) {

        var embed = new EmbedBuilder()
          .setColor(`${config.color.color}`)
          .setTitle(`${emoji.settings}${manage_bot.title.text2}`)
          .setFields({ name: `${emoji.zoom} | Statut`, value: db.base.get(String("statut_name")), inline: true })

        const owner_button_change = new ButtonBuilder()
          .setStyle(ButtonStyle.Secondary)
          .setLabel("Modifier")
          .setCustomId("statut_button_change")

        const owner_button_return = new ButtonBuilder()
          .setStyle(ButtonStyle.Primary)
          .setEmoji(`${emoji.return}`)
          .setCustomId("statut_button_return")

        const owner_menu = new ActionRowBuilder()
          .addComponents(owner_button_change)
          .addComponents(owner_button_return)

        interaction.message.edit({ embeds: ([embed]), components: [owner_menu] })

        interaction.deferUpdate()

      } else {
        var embed = new EmbedBuilder()
          .setDescription(`${emoji.wrong}${general.error.free_activ}`)
          .setColor(`${config.color.color_error}`)

        interaction.reply({ embeds: ([embed]), ephemeral: true })
      }
    }
  }

  if (interaction.customId === "statut_button_return") {
    if ((interaction.member.id === owner) || (interaction.member.id === dev)) {

      var embed = new EmbedBuilder()
        .setColor(`${config.color.color}`)
        .setTitle(`${emoji.settings}${manage_bot.title.text2}`)
        .setDescription(`> **- ${emoji.zoom} | Statut** = *Gérer le statut du bot.*\n> **- ${emoji.color} | Couleurs** = *Gérer les couleurs des embeds.*\n> **- ${emoji.owner} | Propriétaire** = *Modifier le propriétaire du bot.*`)

      const menu_manage_statut = new ButtonBuilder()
        .setEmoji(`${emoji.zoom}`)
        .setCustomId("menu_manage_statut")
        .setStyle(ButtonStyle.Secondary)

      const menu_manage_color = new ButtonBuilder()
        .setEmoji(`${emoji.color}`)
        .setCustomId("menu_manage_color")
        .setStyle(ButtonStyle.Secondary)

      const menu_manage_owner = new ButtonBuilder()
        .setEmoji(`${emoji.owner}`)
        .setCustomId("menu_manage_owner")
        .setStyle(ButtonStyle.Secondary)

      const menu_manage = new ActionRowBuilder()
        .addComponents(menu_manage_statut)
        .addComponents(menu_manage_color)
        .addComponents(menu_manage_owner)

      interaction.message.edit({ embeds: ([embed]), components: [menu_manage] })

      interaction.deferUpdate()

    }
  }

  if (interaction.customId === "owner_button_return") {
    if ((interaction.member.id === owner) || (interaction.member.id === dev)) {

      var embed = new EmbedBuilder()
        .setColor(`${config.color.color}`)
        .setTitle(`${emoji.settings}${manage_bot.title.text2}`)
        .setDescription(`> **- ${emoji.zoom} | Statut** = *Gérer le statut du bot.*\n> **- ${emoji.color} | Couleurs** = *Gérer les couleurs des embeds.*\n> **- ${emoji.owner} | Propriétaire** = *Modifier le propriétaire du bot.*`)

      const menu_manage_statut = new ButtonBuilder()
        .setEmoji(`${emoji.zoom}`)
        .setCustomId("menu_manage_statut")
        .setStyle(ButtonStyle.Secondary)

      const menu_manage_color = new ButtonBuilder()
        .setEmoji(`${emoji.color}`)
        .setCustomId("menu_manage_color")
        .setStyle(ButtonStyle.Secondary)

      const menu_manage_owner = new ButtonBuilder()
        .setEmoji(`${emoji.owner}`)
        .setCustomId("menu_manage_owner")
        .setStyle(ButtonStyle.Secondary)

      const menu_manage = new ActionRowBuilder()
        .addComponents(menu_manage_statut)
        .addComponents(menu_manage_color)
        .addComponents(menu_manage_owner)

      interaction.message.edit({ embeds: ([embed]), components: [menu_manage] })

      interaction.deferUpdate()

    }
  }

  if (interaction.customId === "menu_manage_owner") {
    if ((interaction.member.id === owner) || (interaction.member.id === dev)) {

      var embed = new EmbedBuilder()
        .setColor(`${config.color.color}`)
        .setTitle(`${emoji.settings}${manage_bot.title.text2}`)
        .setFields({ name: `${emoji.owner} | Propriétaire`, value: "<@" + db.base.get(String("owner")) + "> / `" + db.base.get(String("owner")) + "`", inline: true })

      const owner_button_change = new ButtonBuilder()
        .setStyle(ButtonStyle.Secondary)
        .setLabel("Modifier")
        .setCustomId("owner_button_change")

      const owner_button_return = new ButtonBuilder()
        .setStyle(ButtonStyle.Primary)
        .setEmoji(`${emoji.return}`)
        .setCustomId("owner_button_return")

      const owner_menu = new ActionRowBuilder()
        .addComponents(owner_button_change)
        .addComponents(owner_button_return)

      interaction.message.edit({ embeds: ([embed]), components: [owner_menu] })

      interaction.deferUpdate()

    }
  }

  if (interaction.commandName === "manage_bot") {
    if ((interaction.member.id === owner) || (interaction.member.id === dev)) {

      var embed = new EmbedBuilder()
        .setColor(`${config.color.color}`)
        .setTitle(`${emoji.settings}${manage_bot.title.text2}`)
        .setDescription(`> **- ${emoji.zoom} | Statut** = *Gérer le statut du bot.*\n> **- ${emoji.color} | Couleurs** = *Gérer les couleurs des embeds.* ***(${emoji.booster} | En développement)***\n> **- ${emoji.owner} | Propriétaire** = *Modifier le propriétaire du bot.*`)

      const menu_manage_statut = new ButtonBuilder()
        .setEmoji(`${emoji.zoom}`)
        .setCustomId("menu_manage_statut")
        .setStyle(ButtonStyle.Secondary)

      const menu_manage_color = new ButtonBuilder()
        .setEmoji(`${emoji.color}`)
        .setCustomId("menu_manage_color")
        .setStyle(ButtonStyle.Secondary)

      const menu_manage_owner = new ButtonBuilder()
        .setEmoji(`${emoji.owner}`)
        .setCustomId("menu_manage_owner")
        .setStyle(ButtonStyle.Secondary)

      const menu_manage = new ActionRowBuilder()
        .addComponents(menu_manage_statut)
        .addComponents(menu_manage_color)
        .addComponents(menu_manage_owner)

      interaction.reply({ embeds: ([embed]), components: [menu_manage] })
    }
  }

  if (interaction.commandName === "morpion") {
    if (interaction.member.id === dev) {

      new TicTacToe({
        message: interaction,
        slash_command: true,
        opponent: interaction.options.getUser('utilisateur'),
        embed: {
          title: 'Morpion',
          overTitle: 'Game Over',
          color: `${config.color.color}`,
        },
        oEmoji: '🔵',
        xEmoji: '❌',
        blankEmoji: '➖',
        oColor: 'PRIMARY',
        xColor: 'DANGER',
        waitMessage: 'En attente du joueur...',
        turnMessage: '{emoji} | C\'est maintenant à **{player}** de jouer !',
        askMessage: '**Salut {opponent}, {challenger} demande à faire une parti de morpion avec toi !**',
        cancelMessage: '**{opponent} a refusé de jouer avec vous !**',
        timeEndMessage: '**La demande a été annulée car {opponent} a mis trop de temps à répondre !**',
        drawMessage: '**Match nul !**',
        winMessage: '{emoji} | **{winner}** a gagné la parti !',
        gameEndMessage: '**Le jeu a été abandonné !**',
      }).startGame();

    }
  }

  if (interaction.commandName === "ping") {

    var embed = new EmbedBuilder()
      .setColor(`${config.color.color}`)
      .setDescription(`${emoji.server}${ping.description.text1}` + client.ws.ping + `${ping.description.text2}`)

    interaction.reply({ embeds: ([embed]) })
  }

  if (interaction.customId === "reset_all_button_ok") {
    if ((interaction.member.id === owner) || (interaction.member.id === dev)) {

      interaction.message.delete()

      var embed = new EmbedBuilder()
        .setColor(`${config.color.color}`)
        .setDescription(`${emoji.loading}${reset_money.description.text3}`)

      interaction.channel.send({
        embeds: ([embed])
      }).then(async (interaction_edit) => {

        db.money.clear()
        db.database.clear()
        db.verif.clear()
        db.warn.clear()

        await delay(Number(2) * 1000)

        db.database.set(String("modo_logs_channel"), "*`Non défini`*")
        db.database.set(String("modo_logs_channel_simple"), "*`Non défini`*")
        db.database.set(String("modo_admin_blame"), "Interdites")
        db.database.set(String("modo_admin_blame_simple"), "*`Interdites`*")
        db.database.set(String('partenariat_channel'), '*`Non défini`*')
        db.database.set(String('partenariat_channel_simple'), '*`Non défini`*')
        db.database.set(String('partenariat_channel_logs'), '*`Non défini`*')
        db.database.set(String('partenariat_channel_logs_simple'), '*`Non défini`*')
        db.database.set(String('partenariat_rank-accès'), '*`Non défini`*')
        db.database.set(String('partenariat_rank-accès_simple'), '*`Non défini`*')
        db.database.set(String('partenariat_notif-part'), '*`Non défini`*')
        db.database.set(String('partenariat_notif-part_simple'), '*`Non défini`*')
        db.database.set(String('partenariat_rank_add'), '*`Non défini`*')
        db.database.set(String('partenariat_rank_add_simple'), '*`Non défini`*')
        db.database.set(String('partenariat_ping'), 'Désactivées')
        db.database.add(String('partenariat_limite'), 0)
        db.database.set(String('channel_gp1'), '*`Non défini`*')
        db.database.set(String('channel_gp1_simple'), '*`Non défini`*')
        db.database.set(String('channel_gp2'), '*`Non défini`*')
        db.database.set(String('channel_gp2_simple'), '*`Non défini`*')
        db.database.set(String('channel_gp3'), '*`Non défini`*')
        db.database.set(String('channel_gp3_simple'), '*`Non défini`*')
        db.database.set(String('channel_gp4'), '*`Non défini`*')
        db.database.set(String('channel_gp4_simple'), '*`Non défini`*')
        db.database.set(String('channel_gp5'), '*`Non défini`*')
        db.database.set(String('channel_gp5_simple'), '*`Non défini`*')
        db.database.set(String('channel_gp6'), '*`Non défini`*')
        db.database.set(String('channel_gp6_simple'), '*`Non défini`*')
        db.database.set(String('channel_gp7'), '*`Non défini`*')
        db.database.set(String('channel_gp7_simple'), '*`Non défini`*')
        db.database.set(String('channel_gp8'), '*`Non défini`*')
        db.database.set(String('channel_gp8_simple'), '*`Non défini`*')
        db.database.set(String('channel_gp9'), '*`Non défini`*')
        db.database.set(String('channel_gp9_simple'), '*`Non défini`*')
        db.database.set(String('channel_gp10'), '*`Non défini`*')
        db.database.set(String('channel_gp10_simple'), '*`Non défini`*')
        db.database.set(String("channel_welcome"), "*`Non défini`*")
        db.database.set(String("rank_give"), "*`Non défini`*")
        db.database.set(String("channel_welcome_simple"), "*`Non défini`*")
        db.database.set(String("rank_give_simple"), "*`Non défini`*")
        db.database.set(String("message_join"), "**💖 Bienvenue à {user.tag} merci d'avoir rejoint le serveur {server.name} ! 💖**")
        db.database.set(String("message_join_mp"), "**💖 Bienvenue sur le serveur {server.name}, merci de nous avoir rejoint ! 💖**")
        db.database.set(String('channel_verif'), '*`Non défini`*')
        db.database.set(String('channel_logs_verif'), '*`Non défini`*')
        db.database.set(String('channel_sanction_verif'), '*`Non défini`*')
        db.database.set(String('rank-accès_verif'), '*`Non défini`*')
        db.database.set(String('channel_verif_simple'), '*`Non défini`*')
        db.database.set(String('channel_logs_verif_simple'), '*`Non défini`*')
        db.database.set(String('channel_sanction_verif_simple'), '*`Non défini`*')
        db.database.set(String('rank-accès_verif_simple'), '*`Non défini`*')
        db.database.set(String('title_embed'), interaction.guild.name)
        db.database.set(String('description_embed'), "🔖 **»** Votre publicité doit **respecter le règlement du serveur ainsi que les ** [\"Therms Of Discord\"](https://discord.com/terms) !\n\n 🔞 **»** **Serveur NSFW interdit**\n\n🗑️ **»** Si vous **quittez le serveur** vos **publicités** seront **supprimées automatiquement** !")
        db.database.set(String('image_embed'), "")
        db.database.set(String('color_embed'), "#2f3136")
        db.database.set(String('economie_symbole'), '€')
        db.database.set(String('economie_start'), '1500')
        db.database.set(String('economie_messages'), '5')
        db.database.set(String('economie_channel'), 'Aucun')
        db.database.set(String('economie_channelid'), 'Aucun')
        db.database.set(String('economie_channelid'), '<#' + db.database.get(String('economie_channel')) + '>')
        db.database.set(String('sondage_channel'), '*`Non défini`*')
        db.database.set(String('sondage_channel_simple'), '*`Non défini`*')
        db.database.set(String('sondage_pour'), '👍')
        db.database.set(String('sondage_base'), '✊')
        db.database.set(String('sondage_contre'), '👎')
        db.database.set(String("partner_1"), " ")
        db.database.set(String("partner_2"), " ")
        db.database.set(String("partner_3"), " ")
        db.database.set(String("partner_4"), " ")
        db.database.set(String("partner_5"), " ")
        db.database.set(String("partner_6"), " ")
        db.database.set(String("partner_7"), " ")
        db.database.set(String("partner_8"), " ")
        db.database.set(String("partner_9"), " ")
        db.database.set(String("partner_10"), " ")
        db.database.set(String("partner_11"), " ")
        db.database.set(String("partner_12"), " ")
        db.database.set(String("partner_13"), " ")
        db.database.set(String("partner_14"), " ")
        db.database.set(String("partner_15"), " ")
        db.database.set(String("partner_16"), " ")
        db.database.set(String("partner_17"), " ")
        db.database.set(String("partner_18"), " ")
        db.database.set(String("partner_19"), " ")
        db.database.set(String("partner_20"), " ")
        db.database.set(String("partner_message"), "**" + interaction.guild.name + " vous présente ses partenaires MP: **")
        db.database.set(String("suite_number"), 1)
        db.database.set(String('suite_channel'), '*`Non défini`*')
        db.database.set(String('suite_channel_simple'), '*`Non défini`*')
        db.database.set(String('pub_publicité'), '*`Non définie`*')
        db.database.set(String("channel_report"), "*`Non défini`*")
        db.database.set(String("channel_report_simple"), "*`Non défini`*")
        db.database.set(String("channel_invites"), "*`Non défini`*")
        db.database.set(String("channel_invites_simple"), "*`Non défini`*")
        db.database.set(String("message_invites"), "**🧟‍♂️ | {user.mention} nous a rejoint\n 🦸‍♂️ | Il a été invité par {inviter.name}\n 🧸 | Il possède maintenant {invites} invitations\n 🍃 | Bonne continuation !**")
        db.database.set(String("rank1_invites"), "*`Non défini`*")
        db.database.set(String("rank1_invites_simple"), "*`Non défini`*")
        db.database.set(String("rank2_invites"), "*`Non défini`*")
        db.database.set(String("rank2_invites_simple"), "*`Non défini`*")
        db.database.set(String("rank3_invites"), "*`Non défini`*")
        db.database.set(String("rank3_invites_simple"), "*`Non défini`*")
        db.database.set(String("rank1_invites_number"), 0)
        db.database.set(String("rank2_invites_number"), 0)
        db.database.set(String("rank3_invites_number"), 0)


        await delay(Number(3) * 1000)

        var embed = new EmbedBuilder()
          .setColor(`${config.color.color_good}`)
          .setDescription(`${emoji.tick}${general.response.reset_all_ok}`)

        interaction_edit.edit({ embeds: ([embed]) })
      })

    } else {

      var embed = new EmbedBuilder()
        .setColor(`${emoji.color.color_error}`)
        .setDescription(`${emoji.wrong}${general.error.perms_owner}`)

      interaction.reply({ embeds: ([embed]), ephemeral: true })
    }
  }

  if (interaction.customId === "reset_all_button_nook") {
    if ((interaction.member.id === owner) || (interaction.member.id === dev)) {

      interaction.message.delete()

      var embed = new EmbedBuilder()
        .setColor(`${config.color.color_error}`)
        .setDescription(`${emoji.wrong}${reset_money.description.text2}`)

      interaction.channel.send({ embeds: ([embed]) })


    } else {

      var embed = new EmbedBuilder()
        .setColor(`${emoji.color.color_error}`)
        .setDescription(`${emoji.wrong}${general.error.perms_owner}`)

      interaction.reply({ embeds: ([embed]), ephemeral: true })
    }
  }

  if (interaction.commandName === "reset_all") {
    if ((interaction.member.id === owner) || (interaction.member.id === dev)) {

      var embed = new EmbedBuilder()
        .setColor(`${config.color.color}`)
        .setTitle(`${emoji.bin}${reset_money.title.text1}`)
        .setDescription(`${general.response.reset_all}`)
        .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })

      const reset_button_ok_all = new ButtonBuilder()
        .setEmoji(`${emoji.tick}`)
        .setCustomId("reset_all_button_ok")
        .setStyle(ButtonStyle.Secondary)

      const reset_button_nook_all = new ButtonBuilder()
        .setEmoji(`${emoji.wrong}`)
        .setCustomId("reset_all_button_nook")
        .setStyle(ButtonStyle.Secondary)

      const reset_all_menu = new ActionRowBuilder()
        .addComponents(reset_button_ok_all)
        .addComponents(reset_button_nook_all)

      interaction.reply({ embeds: ([embed]), components: [reset_all_menu] })

    } else {

      var embed = new EmbedBuilder()
        .setColor(`${emoji.color.color_error}`)
        .setDescription(`${emoji.wrong}${general.error.perms_owner}`)

      interaction.reply({ embeds: ([embed]), ephemeral: true })
    }
  }

  if ((interaction.customId === "help_button_home") || (interaction.customId === "help_button_gauche2") || (interaction.customId === "help_button_gauche1ext")) {

    var embed = new EmbedBuilder()
      .setColor(`${config.color.color}`)
      .setTitle(`${emoji.bot}${help.title.text1}`)
      .setFooter({ text: `1/19 Pages` })
      .setDescription(`> ${emoji.welcome}${help.description.text1}` + client.user.username + `${help.description.text2}` + interaction.guild.name + `${help.description.text3}${emoji.color}${help.description.text4}\n\n> ${emoji.banned}${help.description.text5}
        \n\n> ${emoji.satellite}${help.description.text6}`)
      .setImage('https://images-ext-1.discordapp.net/external/trC3TonsIfU9BdPRtV9ocdcT_2lYW5zG7q33q6RIsaw/https/images-ext-2.discordapp.net/external/U1p_BsuK2zsSFuQIPWX91-xalkqOcYIO6GmzyJnYNVA/https/images-ext-1.discordapp.net/external/DuMUL-6bVZuOUHTpuc0jonPvHa60W3CK25_llDb3fAc/https/images-ext-1.discordapp.net/external/rTTwoNP0urZ-tYdN4XPLFcLKu1xqcSTiEfFc3Eo6C-M/https/images-ext-2.discordapp.net/external/hxUtwhmwwv7dmafrt5rvn5yGUokngUnOaOPf50vBtZs/https/images-ext-1.discordapp.net/external/yH7KJkAAtf-kVHH5HLRTFcRCI4_zcVQtkYe87xM-a7Y/https/media.discordapp.net/attachments/804596652643844096/925349824612663316/gfgfc.png')


    const help_button_home = new ButtonBuilder()
      .setStyle(ButtonStyle.Secondary)
      .setEmoji(`${emoji.home}`)
      .setCustomId('help_button_home')

    const help_button_gauche1ext = new ButtonBuilder()
      .setStyle(ButtonStyle.Primary)
      .setEmoji(`${emoji.extgauche}`)
      .setCustomId('help_button_gauche1ext')
      .setDisabled(true)

    const help_button_gauche1 = new ButtonBuilder()
      .setStyle(ButtonStyle.Primary)
      .setEmoji(`${emoji.gauche}`)
      .setCustomId('help_button_gauche1')
      .setDisabled(true)

    const help_button_droit1ext = new ButtonBuilder()
      .setStyle(ButtonStyle.Primary)
      .setEmoji(`${emoji.extdroite}`)
      .setCustomId('help_button_droit1ext')

    const help_button_droit1 = new ButtonBuilder()
      .setStyle(ButtonStyle.Primary)
      .setEmoji(`${emoji.droite}`)
      .setCustomId('help_button_droit1')

    const help_menu = new ActionRowBuilder()
      .addComponents(help_button_home)
      .addComponents(help_button_gauche1ext)
      .addComponents(help_button_gauche1)
      .addComponents(help_button_droit1)
      .addComponents(help_button_droit1ext)


    interaction.message.edit({ embeds: ([embed]), components: [help_menu] })

    interaction.deferUpdate()

  }

  if ((interaction.customId === "help_button_droit1") || (interaction.customId === "help_button_gauche3")) {

    var embed = new EmbedBuilder()
      .setColor(`${config.color.color}`)
      .setTitle(`${emoji.bot}${help.title.text1}`)
      .setFooter({ text: `2/19 Pages` })
      .setDescription(`${emoji.moderateur} **| Utilitaire**\n\n > \`\`\`Le module utilitaire permet d'afficher diverses informations à propos du serveur, des membres, des fondateurs...\`\`\`\n  __**Nombre de commande(s):**__ \`5\` \n\n __**Tarifs:**__\n > - Achat 2€\n > - Location: 0,20€/mois\n\n__**Commandes:**__\n > **- \`/configuration\`** = *Configurer le module "utilitaire".*\n > **- \`/server_infos\`** = *Afficher des informations sur le serveur.*\n > **- \`/user_infos\`** = *Afficher les informations d'un utilisateur.*\n > **- \`/bot_count\`** = *Afficher le nombre de bot(s) que possède le serveur.*\n > **- \`/channel_count\`** = *Afficher le nombre de salon(s) que possède le serveur.*`)
      .setImage('https://images-ext-1.discordapp.net/external/trC3TonsIfU9BdPRtV9ocdcT_2lYW5zG7q33q6RIsaw/https/images-ext-2.discordapp.net/external/U1p_BsuK2zsSFuQIPWX91-xalkqOcYIO6GmzyJnYNVA/https/images-ext-1.discordapp.net/external/DuMUL-6bVZuOUHTpuc0jonPvHa60W3CK25_llDb3fAc/https/images-ext-1.discordapp.net/external/rTTwoNP0urZ-tYdN4XPLFcLKu1xqcSTiEfFc3Eo6C-M/https/images-ext-2.discordapp.net/external/hxUtwhmwwv7dmafrt5rvn5yGUokngUnOaOPf50vBtZs/https/images-ext-1.discordapp.net/external/yH7KJkAAtf-kVHH5HLRTFcRCI4_zcVQtkYe87xM-a7Y/https/media.discordapp.net/attachments/804596652643844096/925349824612663316/gfgfc.png')

    const help_button_home = new ButtonBuilder()
      .setStyle(ButtonStyle.Secondary)
      .setEmoji(`${emoji.home}`)
      .setCustomId('help_button_home')

    const help_button_gauche1ext = new ButtonBuilder()
      .setStyle(ButtonStyle.Primary)
      .setEmoji(`${emoji.extgauche}`)
      .setCustomId('help_button_gauche1ext')

    const help_button_gauche1 = new ButtonBuilder()
      .setStyle(ButtonStyle.Primary)
      .setEmoji(`${emoji.gauche}`)
      .setCustomId('help_button_gauche2')

    const help_button_droit1ext = new ButtonBuilder()
      .setStyle(ButtonStyle.Primary)
      .setEmoji(`${emoji.extdroite}`)
      .setCustomId('help_button_droit1ext')

    const help_button_droit1 = new ButtonBuilder()
      .setStyle(ButtonStyle.Primary)
      .setEmoji(`${emoji.droite}`)
      .setCustomId('help_button_droit2')

    const help_menu = new ActionRowBuilder()
      .addComponents(help_button_home)
      .addComponents(help_button_gauche1ext)
      .addComponents(help_button_gauche1)
      .addComponents(help_button_droit1)
      .addComponents(help_button_droit1ext)


    interaction.message.edit({ embeds: ([embed]), components: [help_menu] })

    interaction.deferUpdate()

  }
  if ((interaction.customId === "help_button_droit2") || (interaction.customId === "help_button_gauche4")) {

    var embed = new EmbedBuilder()
      .setColor(`${config.color.color}`)
      .setTitle(`${emoji.bot}${help.title.text1}`)
      .setFooter({ text: `3/19 Pages` })
      .setDescription(`${emoji.banned} **| Modération**\n\n > \`\`\`Le module de modération permet de gérer et de sanctionner les utilisateurs d'un serveur, grâce aux slashs commands sanctionnez vos membres en quelques secondes et de manière efficace ! Un système de logs est directement intégré au module.\`\`\`\n  __**Nombre de commande(s):**__ \`12\` \n\n __**Tarifs:**__\n > - Achat 3€\n > - Location: 0,30€/mois\n\n__**Commandes:**__\n > **- \`/configuration\`** = *Configurer le module de "modération".*\n > **- \`/ban\`** = *Bannir un utilisateur du serveur*\n > **- \`/unban\`** = *Débannir un utilisateur du serveur.*\n > **- \`/kick\`** = *Expulser un utilisateur du serveur.*\n > **- \`/warn\`** = *Avertir un utilisateur.*\n > **- \`/unwarn\`** = *Retirer un avertissement à un utilisateur*\n > **- \`/infractions\`** = *Consulter le nombre d'avertissement(s) qu'a reçu un utilisateur.*\n > **- \`/clear\`** = *Supprimer un nombre de message défini.*\n > **- \`/lock\`** = *Verrouiller un salon textuel.*\n > **- \`/unlock\`** = *Déverrouiller un salon textuel verrouillé.*\n > **- \`/mute\`** = *Rendre muet un utilisateur* ***(${emoji.booster} | En développement)***.\n > **- \`/unmute\`** = *Rendre la parole à un utilisateur* ***(${emoji.booster} | En développement)***.`)
      .setImage('https://images-ext-1.discordapp.net/external/trC3TonsIfU9BdPRtV9ocdcT_2lYW5zG7q33q6RIsaw/https/images-ext-2.discordapp.net/external/U1p_BsuK2zsSFuQIPWX91-xalkqOcYIO6GmzyJnYNVA/https/images-ext-1.discordapp.net/external/DuMUL-6bVZuOUHTpuc0jonPvHa60W3CK25_llDb3fAc/https/images-ext-1.discordapp.net/external/rTTwoNP0urZ-tYdN4XPLFcLKu1xqcSTiEfFc3Eo6C-M/https/images-ext-2.discordapp.net/external/hxUtwhmwwv7dmafrt5rvn5yGUokngUnOaOPf50vBtZs/https/images-ext-1.discordapp.net/external/yH7KJkAAtf-kVHH5HLRTFcRCI4_zcVQtkYe87xM-a7Y/https/media.discordapp.net/attachments/804596652643844096/925349824612663316/gfgfc.png')

    const help_button_home = new ButtonBuilder()
      .setStyle(ButtonStyle.Secondary)
      .setEmoji(`${emoji.home}`)
      .setCustomId('help_button_home')

    const help_button_gauche1ext = new ButtonBuilder()
      .setStyle(ButtonStyle.Primary)
      .setEmoji(`${emoji.extgauche}`)
      .setCustomId('help_button_gauche1ext')

    const help_button_gauche1 = new ButtonBuilder()
      .setStyle(ButtonStyle.Primary)
      .setEmoji(`${emoji.gauche}`)
      .setCustomId('help_button_gauche3')

    const help_button_droit1ext = new ButtonBuilder()
      .setStyle(ButtonStyle.Primary)
      .setEmoji(`${emoji.extdroite}`)
      .setCustomId('help_button_droit1ext')

    const help_button_droit1 = new ButtonBuilder()
      .setStyle(ButtonStyle.Primary)
      .setEmoji(`${emoji.droite}`)
      .setCustomId('help_button_droit3')

    const help_menu = new ActionRowBuilder()
      .addComponents(help_button_home)
      .addComponents(help_button_gauche1ext)
      .addComponents(help_button_gauche1)
      .addComponents(help_button_droit1)
      .addComponents(help_button_droit1ext)


    interaction.message.edit({ embeds: ([embed]), components: [help_menu] })

    interaction.deferUpdate()

  }
  if ((interaction.customId === "help_button_droit3") || (interaction.customId === "help_button_gauche5")) {

    var embed = new EmbedBuilder()
      .setColor(`${config.color.color}`)
      .setTitle(`${emoji.bot}${help.title.text1}`)
      .setFooter({ text: `4/19 Pages` })
      .setDescription(`${emoji.level} **| Niveaux**\n\n > \`\`\`Le module de niveaux a pour objectif de récompenser vos membres les plus actifs. Entièrement configurable, vous pouvez définir les différents paliers et récompenses.\`\`\`\n  __**Nombre de commande(s):**__ \`3\` \n\n __**Tarifs:**__\n > - Achat 4€\n > - Location: 0,40€/mois\n\n__**Commandes:**__\n > **- \`/configuration\`** = *Configurer le module "niveaux".*\n > **- \`/level\`** = *Afficher le nombre de niveau atteint par un utilisateur.*\n > **- \`/xp\`** = *Afficher le nombre d'XP possédé(s) par un utilisateur.*`)
      .setImage('https://images-ext-1.discordapp.net/external/trC3TonsIfU9BdPRtV9ocdcT_2lYW5zG7q33q6RIsaw/https/images-ext-2.discordapp.net/external/U1p_BsuK2zsSFuQIPWX91-xalkqOcYIO6GmzyJnYNVA/https/images-ext-1.discordapp.net/external/DuMUL-6bVZuOUHTpuc0jonPvHa60W3CK25_llDb3fAc/https/images-ext-1.discordapp.net/external/rTTwoNP0urZ-tYdN4XPLFcLKu1xqcSTiEfFc3Eo6C-M/https/images-ext-2.discordapp.net/external/hxUtwhmwwv7dmafrt5rvn5yGUokngUnOaOPf50vBtZs/https/images-ext-1.discordapp.net/external/yH7KJkAAtf-kVHH5HLRTFcRCI4_zcVQtkYe87xM-a7Y/https/media.discordapp.net/attachments/804596652643844096/925349824612663316/gfgfc.png')

    const help_button_home = new ButtonBuilder()
      .setStyle(ButtonStyle.Secondary)
      .setEmoji(`${emoji.home}`)
      .setCustomId('help_button_home')

    const help_button_gauche1ext = new ButtonBuilder()
      .setStyle(ButtonStyle.Primary)
      .setEmoji(`${emoji.extgauche}`)
      .setCustomId('help_button_gauche1ext')

    const help_button_gauche1 = new ButtonBuilder()
      .setStyle(ButtonStyle.Primary)
      .setEmoji(`${emoji.gauche}`)
      .setCustomId('help_button_gauche4')

    const help_button_droit1ext = new ButtonBuilder()
      .setStyle(ButtonStyle.Primary)
      .setEmoji(`${emoji.extdroite}`)
      .setCustomId('help_button_droit1ext')

    const help_button_droit1 = new ButtonBuilder()
      .setStyle(ButtonStyle.Primary)
      .setEmoji(`${emoji.droite}`)
      .setCustomId('help_button_droit4')

    const help_menu = new ActionRowBuilder()
      .addComponents(help_button_home)
      .addComponents(help_button_gauche1ext)
      .addComponents(help_button_gauche1)
      .addComponents(help_button_droit1)
      .addComponents(help_button_droit1ext)


    interaction.message.edit({ embeds: ([embed]), components: [help_menu] })

    interaction.deferUpdate()

  }
  if ((interaction.customId === "help_button_droit4") || (interaction.customId === "help_button_gauche6")) {

    var embed = new EmbedBuilder()
      .setColor(`${config.color.color}`)
      .setTitle(`${emoji.bot}${help.title.text1}`)
      .setFooter({ text: `5/19 Pages` })
      .setDescription(`${emoji.partner} **| Partenariat**\n\n > \`\`\`Le module de partenariat permet de faciliter la publication des échanges publicitaires. Avec sa configuration approfondie, vous pouvez récompenser vos partenaires automatiquement une fois le partenariat terminé ; de plus, vous pouvez définir un nombre de partenariats journaliers maximums. En plus de cela, le module est équipé de logs complets et faciles à configurer.\`\`\`\n  __**Nombre de commande(s):**__ \`3\` \n\n __**Tarifs:**__\n > - Achat 5€\n > - Location: 0,50€/mois\n\n__**Commandes:**__\n > **- \`/configuration\`** = *Configurer le module "partenariat".*\n > **- \`/partenariat\`** = *Faire un partenariat*\n > **- \`/partenariat_count\`** = *Afficher le nombre de partenariat(s) fait par un utilisateur.*`)
      .setImage('https://images-ext-1.discordapp.net/external/trC3TonsIfU9BdPRtV9ocdcT_2lYW5zG7q33q6RIsaw/https/images-ext-2.discordapp.net/external/U1p_BsuK2zsSFuQIPWX91-xalkqOcYIO6GmzyJnYNVA/https/images-ext-1.discordapp.net/external/DuMUL-6bVZuOUHTpuc0jonPvHa60W3CK25_llDb3fAc/https/images-ext-1.discordapp.net/external/rTTwoNP0urZ-tYdN4XPLFcLKu1xqcSTiEfFc3Eo6C-M/https/images-ext-2.discordapp.net/external/hxUtwhmwwv7dmafrt5rvn5yGUokngUnOaOPf50vBtZs/https/images-ext-1.discordapp.net/external/yH7KJkAAtf-kVHH5HLRTFcRCI4_zcVQtkYe87xM-a7Y/https/media.discordapp.net/attachments/804596652643844096/925349824612663316/gfgfc.png')

    const help_button_home = new ButtonBuilder()
      .setStyle(ButtonStyle.Secondary)
      .setEmoji(`${emoji.home}`)
      .setCustomId('help_button_home')

    const help_button_gauche1ext = new ButtonBuilder()
      .setStyle(ButtonStyle.Primary)
      .setEmoji(`${emoji.extgauche}`)
      .setCustomId('help_button_gauche1ext')

    const help_button_gauche1 = new ButtonBuilder()
      .setStyle(ButtonStyle.Primary)
      .setEmoji(`${emoji.gauche}`)
      .setCustomId('help_button_gauche5')

    const help_button_droit1ext = new ButtonBuilder()
      .setStyle(ButtonStyle.Primary)
      .setEmoji(`${emoji.extdroite}`)
      .setCustomId('help_button_droit1ext')

    const help_button_droit1 = new ButtonBuilder()
      .setStyle(ButtonStyle.Primary)
      .setEmoji(`${emoji.droite}`)
      .setCustomId('help_button_droit5')

    const help_menu = new ActionRowBuilder()
      .addComponents(help_button_home)
      .addComponents(help_button_gauche1ext)
      .addComponents(help_button_gauche1)
      .addComponents(help_button_droit1)
      .addComponents(help_button_droit1ext)


    interaction.message.edit({ embeds: ([embed]), components: [help_menu] })

    interaction.deferUpdate()

  }
  if ((interaction.customId === "help_button_droit5") || (interaction.customId === "help_button_gauche7")) {

    var embed = new EmbedBuilder()
      .setColor(`${config.color.color}`)
      .setTitle(`${emoji.bot}${help.title.text1}`)
      .setFooter({ text: `6/19 Pages` })
      .setDescription(`${emoji.ping} **| Ghostping**\n\n > \`\`\`Le module de ghostping ("mention fantôme"), permet de mentionner les nouveaux arrivants sur votre serveur dans 10 salons de votre choix. Sa configuration facile vous permet de mettre en avant vos salons préférés !\`\`\`\n  __**Nombre de commande(s):**__ \`1\` \n\n __**Tarifs:**__\n > - Achat 3€\n > - Location: 0,30€/mois\n\n__**Commandes:**__\n > **- \`/configuration\`** = *Configurer le module "ghostping".*`)
      .setImage('https://images-ext-1.discordapp.net/external/trC3TonsIfU9BdPRtV9ocdcT_2lYW5zG7q33q6RIsaw/https/images-ext-2.discordapp.net/external/U1p_BsuK2zsSFuQIPWX91-xalkqOcYIO6GmzyJnYNVA/https/images-ext-1.discordapp.net/external/DuMUL-6bVZuOUHTpuc0jonPvHa60W3CK25_llDb3fAc/https/images-ext-1.discordapp.net/external/rTTwoNP0urZ-tYdN4XPLFcLKu1xqcSTiEfFc3Eo6C-M/https/images-ext-2.discordapp.net/external/hxUtwhmwwv7dmafrt5rvn5yGUokngUnOaOPf50vBtZs/https/images-ext-1.discordapp.net/external/yH7KJkAAtf-kVHH5HLRTFcRCI4_zcVQtkYe87xM-a7Y/https/media.discordapp.net/attachments/804596652643844096/925349824612663316/gfgfc.png')

    const help_button_home = new ButtonBuilder()
      .setStyle(ButtonStyle.Secondary)
      .setEmoji(`${emoji.home}`)
      .setCustomId('help_button_home')

    const help_button_gauche1ext = new ButtonBuilder()
      .setStyle(ButtonStyle.Primary)
      .setEmoji(`${emoji.extgauche}`)
      .setCustomId('help_button_gauche1ext')

    const help_button_gauche1 = new ButtonBuilder()
      .setStyle(ButtonStyle.Primary)
      .setEmoji(`${emoji.gauche}`)
      .setCustomId('help_button_gauche6')

    const help_button_droit1ext = new ButtonBuilder()
      .setStyle(ButtonStyle.Primary)
      .setEmoji(`${emoji.extdroite}`)
      .setCustomId('help_button_droit1ext')

    const help_button_droit1 = new ButtonBuilder()
      .setStyle(ButtonStyle.Primary)
      .setEmoji(`${emoji.droite}`)
      .setCustomId('help_button_droit6')

    const help_menu = new ActionRowBuilder()
      .addComponents(help_button_home)
      .addComponents(help_button_gauche1ext)
      .addComponents(help_button_gauche1)
      .addComponents(help_button_droit1)
      .addComponents(help_button_droit1ext)


    interaction.message.edit({ embeds: ([embed]), components: [help_menu] })

    interaction.deferUpdate()

  }
  if ((interaction.customId === "help_button_droit6") || (interaction.customId === "help_button_gauche8")) {

    var embed = new EmbedBuilder()
      .setColor(`${config.color.color}`)
      .setTitle(`${emoji.bot}${help.title.text1}`)
      .setFooter({ text: `7/19 Pages` })
      .setDescription(`${emoji.welcome} **| Bienvenue**\n\n > \`\`\`Le module de bienvenue, permet d'accueillir vos nouveaux membres dans un salon et par MP avec un message personnalisable.\`\`\`\n  __**Nombre de commande(s):**__ \`1\` \n\n __**Tarifs:**__\n > - Achat 3€\n > - Location: 0,30€/mois\n\n__**Commandes:**__\n > **- \`/configuration\`** = *Configurer le module "bienvenue".*`)
      .setImage('https://images-ext-1.discordapp.net/external/trC3TonsIfU9BdPRtV9ocdcT_2lYW5zG7q33q6RIsaw/https/images-ext-2.discordapp.net/external/U1p_BsuK2zsSFuQIPWX91-xalkqOcYIO6GmzyJnYNVA/https/images-ext-1.discordapp.net/external/DuMUL-6bVZuOUHTpuc0jonPvHa60W3CK25_llDb3fAc/https/images-ext-1.discordapp.net/external/rTTwoNP0urZ-tYdN4XPLFcLKu1xqcSTiEfFc3Eo6C-M/https/images-ext-2.discordapp.net/external/hxUtwhmwwv7dmafrt5rvn5yGUokngUnOaOPf50vBtZs/https/images-ext-1.discordapp.net/external/yH7KJkAAtf-kVHH5HLRTFcRCI4_zcVQtkYe87xM-a7Y/https/media.discordapp.net/attachments/804596652643844096/925349824612663316/gfgfc.png')

    const help_button_home = new ButtonBuilder()
      .setStyle(ButtonStyle.Secondary)
      .setEmoji(`${emoji.home}`)
      .setCustomId('help_button_home')

    const help_button_gauche1ext = new ButtonBuilder()
      .setStyle(ButtonStyle.Primary)
      .setEmoji(`${emoji.extgauche}`)
      .setCustomId('help_button_gauche1ext')

    const help_button_gauche1 = new ButtonBuilder()
      .setStyle(ButtonStyle.Primary)
      .setEmoji(`${emoji.gauche}`)
      .setCustomId('help_button_gauche7')

    const help_button_droit1ext = new ButtonBuilder()
      .setStyle(ButtonStyle.Primary)
      .setEmoji(`${emoji.extdroite}`)
      .setCustomId('help_button_droit1ext')

    const help_button_droit1 = new ButtonBuilder()
      .setStyle(ButtonStyle.Primary)
      .setEmoji(`${emoji.droite}`)
      .setCustomId('help_button_droit7')

    const help_menu = new ActionRowBuilder()
      .addComponents(help_button_home)
      .addComponents(help_button_gauche1ext)
      .addComponents(help_button_gauche1)
      .addComponents(help_button_droit1)
      .addComponents(help_button_droit1ext)


    interaction.message.edit({ embeds: ([embed]), components: [help_menu] })

    interaction.deferUpdate()

  }
  if ((interaction.customId === "help_button_droit7") || (interaction.customId === "help_button_gauche9")) {

    var embed = new EmbedBuilder()
      .setColor(`${config.color.color}`)
      .setTitle(`${emoji.bot}${help.title.text1}`)
      .setFooter({ text: `8/19 Pages` })
      .setDescription(`${emoji.file} **| Embed**\n\n > \`\`\`Le module d'embed vous permet de mettre en forme tous vos messages importants ou annonces de façon simple et esthétique.\`\`\`\n  __**Nombre de commande(s):**__ \`3\` \n\n __**Tarifs:**__\n > - Achat 3€\n > - Location: 0,30€/mois\n\n__**Commandes:**__\n > **- \`/configuration\`** = *Configurer le module "embed".*\n > **- \`/embed\`** = *Envoyer un belle embed avec le bot.*\n > **- \`/say\`** = *Faire parler le bot.*`)
      .setImage('https://images-ext-1.discordapp.net/external/trC3TonsIfU9BdPRtV9ocdcT_2lYW5zG7q33q6RIsaw/https/images-ext-2.discordapp.net/external/U1p_BsuK2zsSFuQIPWX91-xalkqOcYIO6GmzyJnYNVA/https/images-ext-1.discordapp.net/external/DuMUL-6bVZuOUHTpuc0jonPvHa60W3CK25_llDb3fAc/https/images-ext-1.discordapp.net/external/rTTwoNP0urZ-tYdN4XPLFcLKu1xqcSTiEfFc3Eo6C-M/https/images-ext-2.discordapp.net/external/hxUtwhmwwv7dmafrt5rvn5yGUokngUnOaOPf50vBtZs/https/images-ext-1.discordapp.net/external/yH7KJkAAtf-kVHH5HLRTFcRCI4_zcVQtkYe87xM-a7Y/https/media.discordapp.net/attachments/804596652643844096/925349824612663316/gfgfc.png')

    const help_button_home = new ButtonBuilder()
      .setStyle(ButtonStyle.Secondary)
      .setEmoji(`${emoji.home}`)
      .setCustomId('help_button_home')

    const help_button_gauche1ext = new ButtonBuilder()
      .setStyle(ButtonStyle.Primary)
      .setEmoji(`${emoji.extgauche}`)
      .setCustomId('help_button_gauche1ext')

    const help_button_gauche1 = new ButtonBuilder()
      .setStyle(ButtonStyle.Primary)
      .setEmoji(`${emoji.gauche}`)
      .setCustomId('help_button_gauche8')

    const help_button_droit1ext = new ButtonBuilder()
      .setStyle(ButtonStyle.Primary)
      .setEmoji(`${emoji.extdroite}`)
      .setCustomId('help_button_droit1ext')

    const help_button_droit1 = new ButtonBuilder()
      .setStyle(ButtonStyle.Primary)
      .setEmoji(`${emoji.droite}`)
      .setCustomId('help_button_droit8')

    const help_menu = new ActionRowBuilder()
      .addComponents(help_button_home)
      .addComponents(help_button_gauche1ext)
      .addComponents(help_button_gauche1)
      .addComponents(help_button_droit1)
      .addComponents(help_button_droit1ext)


    interaction.message.edit({ embeds: ([embed]), components: [help_menu] })

    interaction.deferUpdate()

  }
  if ((interaction.customId === "help_button_droit8") || (interaction.customId === "help_button_gauche10")) {

    var embed = new EmbedBuilder()
      .setColor(`${config.color.color}`)
      .setTitle(`${emoji.bot}${help.title.text1}`)
      .setFooter({ text: `9/19 Pages` })
      .setDescription(`${emoji.tick} **| Vérification**\n\n > \`\`\`Le module de vérification publicitaire est unique en son genre, il s'agit du premier système permettant d'imposer la vérification des publicités avant qu'elles ne soient postées. Chaque publicité est envoyée par modal et seulement une fois vérifiée, elle est envoyée par le bot. Cette fonctionnalité inédite permet d'empêcher la pollution des salons publicitaires !\`\`\`\n  __**Nombre de commande(s):**__ \`7\` \n\n __**Tarifs:**__\n > - Achat 14€\n > - Location: 1,40€/mois\n\n__**Commandes:**__\n > **- \`/configuration\`** = *Configurer le module "vérification".*\n > **- \`/vérification_add\`** = *Ajouter un salon de vérification à la base de donnés.*\n > **- \`/vérification_remove\`** = *Retirer un salon de vérification de la base de données*\n > **- \`/vérifications\`** = *Afficher les vérifications possédée(s) par un utilisateur.*\n > **- \`/warn\`** = *Ajouter un avertissement à un utilisateur.*\n > **- \`/unwarn\`** = *Retirer un avertissement à un utilisateur.*\n > **- \`/infractions\`** = *Consulter le nombre d'avertissement que possède un utilisateur.*`)
      .setImage('https://images-ext-1.discordapp.net/external/trC3TonsIfU9BdPRtV9ocdcT_2lYW5zG7q33q6RIsaw/https/images-ext-2.discordapp.net/external/U1p_BsuK2zsSFuQIPWX91-xalkqOcYIO6GmzyJnYNVA/https/images-ext-1.discordapp.net/external/DuMUL-6bVZuOUHTpuc0jonPvHa60W3CK25_llDb3fAc/https/images-ext-1.discordapp.net/external/rTTwoNP0urZ-tYdN4XPLFcLKu1xqcSTiEfFc3Eo6C-M/https/images-ext-2.discordapp.net/external/hxUtwhmwwv7dmafrt5rvn5yGUokngUnOaOPf50vBtZs/https/images-ext-1.discordapp.net/external/yH7KJkAAtf-kVHH5HLRTFcRCI4_zcVQtkYe87xM-a7Y/https/media.discordapp.net/attachments/804596652643844096/925349824612663316/gfgfc.png')

    const help_button_home = new ButtonBuilder()
      .setStyle(ButtonStyle.Secondary)
      .setEmoji(`${emoji.home}`)
      .setCustomId('help_button_home')

    const help_button_gauche1ext = new ButtonBuilder()
      .setStyle(ButtonStyle.Primary)
      .setEmoji(`${emoji.extgauche}`)
      .setCustomId('help_button_gauche1ext')

    const help_button_gauche1 = new ButtonBuilder()
      .setStyle(ButtonStyle.Primary)
      .setEmoji(`${emoji.gauche}`)
      .setCustomId('help_button_gauche9')

    const help_button_droit1ext = new ButtonBuilder()
      .setStyle(ButtonStyle.Primary)
      .setEmoji(`${emoji.extdroite}`)
      .setCustomId('help_button_droit1ext')

    const help_button_droit1 = new ButtonBuilder()
      .setStyle(ButtonStyle.Primary)
      .setEmoji(`${emoji.droite}`)
      .setCustomId('help_button_droit10')

    const help_menu = new ActionRowBuilder()
      .addComponents(help_button_home)
      .addComponents(help_button_gauche1ext)
      .addComponents(help_button_gauche1)
      .addComponents(help_button_droit1)
      .addComponents(help_button_droit1ext)


    interaction.message.edit({ embeds: ([embed]), components: [help_menu] })

    interaction.deferUpdate()

  }
  if ((interaction.customId === "help_button_droit10") || (interaction.customId === "help_button_gauche11")) {

    var embed = new EmbedBuilder()
      .setColor(`${config.color.color}`)
      .setTitle(`${emoji.bot}${help.title.text1}`)
      .setFooter({ text: `10/19 Pages` })
      .setDescription(`${emoji.reward} **| Economie**\n\n > \`\`\`Le module d'économie, permet de récompenser les membres les plus actifs dans les salons textuels par un système de monnaie entièrement configurable.\`\`\`\n  __**Nombre de commande(s):**__ \`4\` \n\n __**Tarifs:**__\n > - Achat 3€\n > - Location: 0,30€/mois\n\n__**Commandes:**__\n > **- \`/configuration\`** = *Configurer le module "économie".*\n > **- \`/money\`** = *Afficher l'argent possédée par un utilisateur.*\n > **- \`/manage_money\`** = *Gérer l'argent possédée par un utilisateur.*\n > **- \`/reset_money\`** = *Réinitialiser le module d'économie.*`)
      .setImage('https://images-ext-1.discordapp.net/external/trC3TonsIfU9BdPRtV9ocdcT_2lYW5zG7q33q6RIsaw/https/images-ext-2.discordapp.net/external/U1p_BsuK2zsSFuQIPWX91-xalkqOcYIO6GmzyJnYNVA/https/images-ext-1.discordapp.net/external/DuMUL-6bVZuOUHTpuc0jonPvHa60W3CK25_llDb3fAc/https/images-ext-1.discordapp.net/external/rTTwoNP0urZ-tYdN4XPLFcLKu1xqcSTiEfFc3Eo6C-M/https/images-ext-2.discordapp.net/external/hxUtwhmwwv7dmafrt5rvn5yGUokngUnOaOPf50vBtZs/https/images-ext-1.discordapp.net/external/yH7KJkAAtf-kVHH5HLRTFcRCI4_zcVQtkYe87xM-a7Y/https/media.discordapp.net/attachments/804596652643844096/925349824612663316/gfgfc.png')

    const help_button_home = new ButtonBuilder()
      .setStyle(ButtonStyle.Secondary)
      .setEmoji(`${emoji.home}`)
      .setCustomId('help_button_home')

    const help_button_gauche1ext = new ButtonBuilder()
      .setStyle(ButtonStyle.Primary)
      .setEmoji(`${emoji.extgauche}`)
      .setCustomId('help_button_gauche1ext')

    const help_button_gauche1 = new ButtonBuilder()
      .setStyle(ButtonStyle.Primary)
      .setEmoji(`${emoji.gauche}`)
      .setCustomId('help_button_gauche10')

    const help_button_droit1ext = new ButtonBuilder()
      .setStyle(ButtonStyle.Primary)
      .setEmoji(`${emoji.extdroite}`)
      .setCustomId('help_button_droit1ext')

    const help_button_droit1 = new ButtonBuilder()
      .setStyle(ButtonStyle.Primary)
      .setEmoji(`${emoji.droite}`)
      .setCustomId('help_button_droit11')

    const help_menu = new ActionRowBuilder()
      .addComponents(help_button_home)
      .addComponents(help_button_gauche1ext)
      .addComponents(help_button_gauche1)
      .addComponents(help_button_droit1)
      .addComponents(help_button_droit1ext)


    interaction.message.edit({ embeds: ([embed]), components: [help_menu] })

    interaction.deferUpdate()

  }
  if ((interaction.customId === "help_button_droit11") || (interaction.customId === "help_button_gauche12")) {

    var embed = new EmbedBuilder()
      .setColor(`${config.color.color}`)
      .setTitle(`${emoji.bot}${help.title.text1}`)
      .setFooter({ text: `11/19 Pages` })
      .setDescription(`${emoji.pen} **| Suggestion**\n\n > \`\`\`Le module de suggestion vous permet d'écouter la voix de vos membres à l'aide d'un système organisé et entièrement configurable.\`\`\`\n  __**Nombre de commande(s):**__ \`1\` \n\n __**Tarifs:**__\n > - Achat 2€\n > - Location: 0,20€/mois\n\n__**Commandes:**__\n > **- \`/configuration\`** = *Configurer le module "suggestion".*`)
      .setImage('https://images-ext-1.discordapp.net/external/trC3TonsIfU9BdPRtV9ocdcT_2lYW5zG7q33q6RIsaw/https/images-ext-2.discordapp.net/external/U1p_BsuK2zsSFuQIPWX91-xalkqOcYIO6GmzyJnYNVA/https/images-ext-1.discordapp.net/external/DuMUL-6bVZuOUHTpuc0jonPvHa60W3CK25_llDb3fAc/https/images-ext-1.discordapp.net/external/rTTwoNP0urZ-tYdN4XPLFcLKu1xqcSTiEfFc3Eo6C-M/https/images-ext-2.discordapp.net/external/hxUtwhmwwv7dmafrt5rvn5yGUokngUnOaOPf50vBtZs/https/images-ext-1.discordapp.net/external/yH7KJkAAtf-kVHH5HLRTFcRCI4_zcVQtkYe87xM-a7Y/https/media.discordapp.net/attachments/804596652643844096/925349824612663316/gfgfc.png')

    const help_button_home = new ButtonBuilder()
      .setStyle(ButtonStyle.Secondary)
      .setEmoji(`${emoji.home}`)
      .setCustomId('help_button_home')

    const help_button_gauche1ext = new ButtonBuilder()
      .setStyle(ButtonStyle.Primary)
      .setEmoji(`${emoji.extgauche}`)
      .setCustomId('help_button_gauche1ext')

    const help_button_gauche1 = new ButtonBuilder()
      .setStyle(ButtonStyle.Primary)
      .setEmoji(`${emoji.gauche}`)
      .setCustomId('help_button_gauche11')

    const help_button_droit1ext = new ButtonBuilder()
      .setStyle(ButtonStyle.Primary)
      .setEmoji(`${emoji.extdroite}`)
      .setCustomId('help_button_droit1ext')

    const help_button_droit1 = new ButtonBuilder()
      .setStyle(ButtonStyle.Primary)
      .setEmoji(`${emoji.droite}`)
      .setCustomId('help_button_droit12')

    const help_menu = new ActionRowBuilder()
      .addComponents(help_button_home)
      .addComponents(help_button_gauche1ext)
      .addComponents(help_button_gauche1)
      .addComponents(help_button_droit1)
      .addComponents(help_button_droit1ext)


    interaction.message.edit({ embeds: ([embed]), components: [help_menu] })

    interaction.deferUpdate()

  }
  if ((interaction.customId === "help_button_droit12") || (interaction.customId === "help_button_gauche13")) {

    var embed = new EmbedBuilder()
      .setColor(`${config.color.color}`)
      .setTitle(`${emoji.bot}${help.title.text1}`)
      .setFooter({ text: `12/19 Pages` })
      .setDescription(`${emoji.link} **| Partenariat MP**\n\n > \`\`\`Le module partenariats MP est très utile pour gérer et organiser vos partenaires ligne par ligne.\`\`\`\n  __**Nombre de commande(s):**__ \`2\` \n\n __**Tarifs:**__\n > - Achat 3€\n > - Location: 0,30€/mois\n\n__**Commandes:**__\n > **- \`/configuration\`** = *Configurer le module "partenariat MP".*\n > **- \`/partenariat_MP\`** = *Consulter/Modifier les partenaires MP.*`)
      .setImage('https://images-ext-1.discordapp.net/external/trC3TonsIfU9BdPRtV9ocdcT_2lYW5zG7q33q6RIsaw/https/images-ext-2.discordapp.net/external/U1p_BsuK2zsSFuQIPWX91-xalkqOcYIO6GmzyJnYNVA/https/images-ext-1.discordapp.net/external/DuMUL-6bVZuOUHTpuc0jonPvHa60W3CK25_llDb3fAc/https/images-ext-1.discordapp.net/external/rTTwoNP0urZ-tYdN4XPLFcLKu1xqcSTiEfFc3Eo6C-M/https/images-ext-2.discordapp.net/external/hxUtwhmwwv7dmafrt5rvn5yGUokngUnOaOPf50vBtZs/https/images-ext-1.discordapp.net/external/yH7KJkAAtf-kVHH5HLRTFcRCI4_zcVQtkYe87xM-a7Y/https/media.discordapp.net/attachments/804596652643844096/925349824612663316/gfgfc.png')

    const help_button_home = new ButtonBuilder()
      .setStyle(ButtonStyle.Secondary)
      .setEmoji(`${emoji.home}`)
      .setCustomId('help_button_home')

    const help_button_gauche1ext = new ButtonBuilder()
      .setStyle(ButtonStyle.Primary)
      .setEmoji(`${emoji.extgauche}`)
      .setCustomId('help_button_gauche1ext')

    const help_button_gauche1 = new ButtonBuilder()
      .setStyle(ButtonStyle.Primary)
      .setEmoji(`${emoji.gauche}`)
      .setCustomId('help_button_gauche12')

    const help_button_droit1ext = new ButtonBuilder()
      .setStyle(ButtonStyle.Primary)
      .setEmoji(`${emoji.extdroite}`)
      .setCustomId('help_button_droit1ext')

    const help_button_droit1 = new ButtonBuilder()
      .setStyle(ButtonStyle.Primary)
      .setEmoji(`${emoji.droite}`)
      .setCustomId('help_button_droit13')

    const help_menu = new ActionRowBuilder()
      .addComponents(help_button_home)
      .addComponents(help_button_gauche1ext)
      .addComponents(help_button_gauche1)
      .addComponents(help_button_droit1)
      .addComponents(help_button_droit1ext)


    interaction.message.edit({ embeds: ([embed]), components: [help_menu] })

    interaction.deferUpdate()

  }
  if ((interaction.customId === "help_button_droit13") || (interaction.customId === "help_button_gauche14")) {

    var embed = new EmbedBuilder()
      .setColor(`${config.color.color}`)
      .setTitle(`${emoji.bot}${help.title.text1}`)
      .setFooter({ text: `13/19 Pages` })
      .setDescription(`${emoji.chanel} **| Salons Personnalisés**\n\n > \`\`\`Le module de salons personnalisés vous permet de manager vos salons de façon précises et unique. Création de salon simple et suppression automatique une fois le temps atteint.\`\`\`\n  __**Nombre de commande(s):**__ \`2\` \n\n __**Tarifs:**__\n > - Achat 2€\n > - Location: 0,20€/mois\n\n__**Commandes:**__\n > **- \`/configuration\`** = *Configurer le module "salons personnalisés".*\n > **- \`/salon_personnalisé\`** = *Créer un salon personnalisé.*`)
      .setImage('https://images-ext-1.discordapp.net/external/trC3TonsIfU9BdPRtV9ocdcT_2lYW5zG7q33q6RIsaw/https/images-ext-2.discordapp.net/external/U1p_BsuK2zsSFuQIPWX91-xalkqOcYIO6GmzyJnYNVA/https/images-ext-1.discordapp.net/external/DuMUL-6bVZuOUHTpuc0jonPvHa60W3CK25_llDb3fAc/https/images-ext-1.discordapp.net/external/rTTwoNP0urZ-tYdN4XPLFcLKu1xqcSTiEfFc3Eo6C-M/https/images-ext-2.discordapp.net/external/hxUtwhmwwv7dmafrt5rvn5yGUokngUnOaOPf50vBtZs/https/images-ext-1.discordapp.net/external/yH7KJkAAtf-kVHH5HLRTFcRCI4_zcVQtkYe87xM-a7Y/https/media.discordapp.net/attachments/804596652643844096/925349824612663316/gfgfc.png')

    const help_button_home = new ButtonBuilder()
      .setStyle(ButtonStyle.Secondary)
      .setEmoji(`${emoji.home}`)
      .setCustomId('help_button_home')

    const help_button_gauche1ext = new ButtonBuilder()
      .setStyle(ButtonStyle.Primary)
      .setEmoji(`${emoji.extgauche}`)
      .setCustomId('help_button_gauche1ext')

    const help_button_gauche1 = new ButtonBuilder()
      .setStyle(ButtonStyle.Primary)
      .setEmoji(`${emoji.gauche}`)
      .setCustomId('help_button_gauche13')

    const help_button_droit1ext = new ButtonBuilder()
      .setStyle(ButtonStyle.Primary)
      .setEmoji(`${emoji.extdroite}`)
      .setCustomId('help_button_droit1ext')

    const help_button_droit1 = new ButtonBuilder()
      .setStyle(ButtonStyle.Primary)
      .setEmoji(`${emoji.droite}`)
      .setCustomId('help_button_droit14')

    const help_menu = new ActionRowBuilder()
      .addComponents(help_button_home)
      .addComponents(help_button_gauche1ext)
      .addComponents(help_button_gauche1)
      .addComponents(help_button_droit1)
      .addComponents(help_button_droit1ext)


    interaction.message.edit({ embeds: ([embed]), components: [help_menu] })

    interaction.deferUpdate()

  }
  if ((interaction.customId === "help_button_droit14") || (interaction.customId === "help_button_gauche15")) {

    var embed = new EmbedBuilder()
      .setColor(`${config.color.color}`)
      .setTitle(`${emoji.bot}${help.title.text1}`)
      .setFooter({ text: `14/19 Pages` })
      .setDescription(`${emoji.database} **| Logs**\n\n > \`\`\`Le module de logs permet un suivi précis de ce qui se passe sur votre serveur, bannissements, suppression de salons, rôles, webhook et plus encore seront enregistrés.\`\`\`\n  __**Nombre de commande(s):**__ \`1\` \n\n __**Tarifs:**__\n > - Achat 4€\n > - Location: 0,40€/mois\n\n__**Commandes:**__\n > **- \`/configuration\`** = *Configurer le module "logs".*`)
      .setImage('https://images-ext-1.discordapp.net/external/trC3TonsIfU9BdPRtV9ocdcT_2lYW5zG7q33q6RIsaw/https/images-ext-2.discordapp.net/external/U1p_BsuK2zsSFuQIPWX91-xalkqOcYIO6GmzyJnYNVA/https/images-ext-1.discordapp.net/external/DuMUL-6bVZuOUHTpuc0jonPvHa60W3CK25_llDb3fAc/https/images-ext-1.discordapp.net/external/rTTwoNP0urZ-tYdN4XPLFcLKu1xqcSTiEfFc3Eo6C-M/https/images-ext-2.discordapp.net/external/hxUtwhmwwv7dmafrt5rvn5yGUokngUnOaOPf50vBtZs/https/images-ext-1.discordapp.net/external/yH7KJkAAtf-kVHH5HLRTFcRCI4_zcVQtkYe87xM-a7Y/https/media.discordapp.net/attachments/804596652643844096/925349824612663316/gfgfc.png')

    const help_button_home = new ButtonBuilder()
      .setStyle(ButtonStyle.Secondary)
      .setEmoji(`${emoji.home}`)
      .setCustomId('help_button_home')

    const help_button_gauche1ext = new ButtonBuilder()
      .setStyle(ButtonStyle.Primary)
      .setEmoji(`${emoji.extgauche}`)
      .setCustomId('help_button_gauche1ext')

    const help_button_gauche1 = new ButtonBuilder()
      .setStyle(ButtonStyle.Primary)
      .setEmoji(`${emoji.gauche}`)
      .setCustomId('help_button_gauche14')

    const help_button_droit1ext = new ButtonBuilder()
      .setStyle(ButtonStyle.Primary)
      .setEmoji(`${emoji.extdroite}`)
      .setCustomId('help_button_droit1ext')

    const help_button_droit1 = new ButtonBuilder()
      .setStyle(ButtonStyle.Primary)
      .setEmoji(`${emoji.droite}`)
      .setCustomId('help_button_droit15')

    const help_menu = new ActionRowBuilder()
      .addComponents(help_button_home)
      .addComponents(help_button_gauche1ext)
      .addComponents(help_button_gauche1)
      .addComponents(help_button_droit1)
      .addComponents(help_button_droit1ext)


    interaction.message.edit({ embeds: ([embed]), components: [help_menu] })

    interaction.deferUpdate()

  }
  if ((interaction.customId === "help_button_droit15") || (interaction.customId === "help_button_gauche16")) {

    var embed = new EmbedBuilder()
      .setColor(`${config.color.color}`)
      .setTitle(`${emoji.bot}${help.title.text1}`)
      .setFooter({ text: `15/19 Pages` })
      .setDescription(`${emoji.game} **| Jeux**\n\n > \`\`\`Le module de jeux a pour objectif de divertir vos membres par différents minis jeux rigolos et amusants.\`\`\`\n  __**Nombre de commande(s):**__ \`1\` \n\n __**Tarifs:**__\n > - Achat 4€\n > - Location: 0,40€/mois\n\n__**Commandes:**__\n > **- \`/configuration\`** = *Configurer le module "jeux".*`)
      .setImage('https://images-ext-1.discordapp.net/external/trC3TonsIfU9BdPRtV9ocdcT_2lYW5zG7q33q6RIsaw/https/images-ext-2.discordapp.net/external/U1p_BsuK2zsSFuQIPWX91-xalkqOcYIO6GmzyJnYNVA/https/images-ext-1.discordapp.net/external/DuMUL-6bVZuOUHTpuc0jonPvHa60W3CK25_llDb3fAc/https/images-ext-1.discordapp.net/external/rTTwoNP0urZ-tYdN4XPLFcLKu1xqcSTiEfFc3Eo6C-M/https/images-ext-2.discordapp.net/external/hxUtwhmwwv7dmafrt5rvn5yGUokngUnOaOPf50vBtZs/https/images-ext-1.discordapp.net/external/yH7KJkAAtf-kVHH5HLRTFcRCI4_zcVQtkYe87xM-a7Y/https/media.discordapp.net/attachments/804596652643844096/925349824612663316/gfgfc.png')

    const help_button_home = new ButtonBuilder()
      .setStyle(ButtonStyle.Secondary)
      .setEmoji(`${emoji.home}`)
      .setCustomId('help_button_home')

    const help_button_gauche1ext = new ButtonBuilder()
      .setStyle(ButtonStyle.Primary)
      .setEmoji(`${emoji.extgauche}`)
      .setCustomId('help_button_gauche1ext')

    const help_button_gauche1 = new ButtonBuilder()
      .setStyle(ButtonStyle.Primary)
      .setEmoji(`${emoji.gauche}`)
      .setCustomId('help_button_gauche15')

    const help_button_droit1ext = new ButtonBuilder()
      .setStyle(ButtonStyle.Primary)
      .setEmoji(`${emoji.extdroite}`)
      .setCustomId('help_button_droit1ext')

    const help_button_droit1 = new ButtonBuilder()
      .setStyle(ButtonStyle.Primary)
      .setEmoji(`${emoji.droite}`)
      .setCustomId('help_button_droit16')

    const help_menu = new ActionRowBuilder()
      .addComponents(help_button_home)
      .addComponents(help_button_gauche1ext)
      .addComponents(help_button_gauche1)
      .addComponents(help_button_droit1)
      .addComponents(help_button_droit1ext)


    interaction.message.edit({ embeds: ([embed]), components: [help_menu] })

    interaction.deferUpdate()

  }
  if ((interaction.customId === "help_button_droit16") || (interaction.customId === "help_button_gauche17")) {

    var embed = new EmbedBuilder()
      .setColor(`${config.color.color}`)
      .setTitle(`${emoji.bot}${help.title.text1}`)
      .setFooter({ text: `16/19 Pages` })
      .setDescription(`${emoji.list} **| Publicité**\n\n > \`\`\`Le module de publicité est très utile, il permet à vos membres d'accéder à votre publicité, plus la peine de donner une version copiable et non copiable, le bot s'en charge tout seul !\`\`\`\n  __**Nombre de commande(s):**__ \`2\` \n\n __**Tarifs:**__\n > - Achat 3€\n > - Location: 0,30€/mois\n\n__**Commandes:**__\n > **- \`/configuration\`** = *Configurer le module "publicité".*\n > **- \`/publicité\`** = *Afficher la publicité du serveur.*`)
      .setImage('https://images-ext-1.discordapp.net/external/trC3TonsIfU9BdPRtV9ocdcT_2lYW5zG7q33q6RIsaw/https/images-ext-2.discordapp.net/external/U1p_BsuK2zsSFuQIPWX91-xalkqOcYIO6GmzyJnYNVA/https/images-ext-1.discordapp.net/external/DuMUL-6bVZuOUHTpuc0jonPvHa60W3CK25_llDb3fAc/https/images-ext-1.discordapp.net/external/rTTwoNP0urZ-tYdN4XPLFcLKu1xqcSTiEfFc3Eo6C-M/https/images-ext-2.discordapp.net/external/hxUtwhmwwv7dmafrt5rvn5yGUokngUnOaOPf50vBtZs/https/images-ext-1.discordapp.net/external/yH7KJkAAtf-kVHH5HLRTFcRCI4_zcVQtkYe87xM-a7Y/https/media.discordapp.net/attachments/804596652643844096/925349824612663316/gfgfc.png')

    const help_button_home = new ButtonBuilder()
      .setStyle(ButtonStyle.Secondary)
      .setEmoji(`${emoji.home}`)
      .setCustomId('help_button_home')

    const help_button_gauche1ext = new ButtonBuilder()
      .setStyle(ButtonStyle.Primary)
      .setEmoji(`${emoji.extgauche}`)
      .setCustomId('help_button_gauche1ext')

    const help_button_gauche1 = new ButtonBuilder()
      .setStyle(ButtonStyle.Primary)
      .setEmoji(`${emoji.gauche}`)
      .setCustomId('help_button_gauche16')

    const help_button_droit1ext = new ButtonBuilder()
      .setStyle(ButtonStyle.Primary)
      .setEmoji(`${emoji.extdroite}`)
      .setCustomId('help_button_droit1ext')

    const help_button_droit1 = new ButtonBuilder()
      .setStyle(ButtonStyle.Primary)
      .setEmoji(`${emoji.droite}`)
      .setCustomId('help_button_droit17')

    const help_menu = new ActionRowBuilder()
      .addComponents(help_button_home)
      .addComponents(help_button_gauche1ext)
      .addComponents(help_button_gauche1)
      .addComponents(help_button_droit1)
      .addComponents(help_button_droit1ext)


    interaction.message.edit({ embeds: ([embed]), components: [help_menu] })

    interaction.deferUpdate()

  }
  if ((interaction.customId === "help_button_droit17") || (interaction.customId === "help_button_gauche18")) {

    var embed = new EmbedBuilder()
      .setColor(`${config.color.color}`)
      .setTitle(`${emoji.bot}${help.title.text1}`)
      .setFooter({ text: `17/19 Pages` })
      .setDescription(`${emoji.warn} **| Signalement**\n\n > \`\`\`Le module de signalement permet à vos membres de signaler tous les messages envoyés. Le système est facilement configurable et bien pensé, un message ne peut être signalé seulement une fois et un membre ne peut signaler qu'un message toutes les 5 minutes.\`\`\`\n  __**Nombre de commande(s):**__ \`2\` \n\n __**Tarifs:**__\n > - Achat 3€\n > - Location: 0,30€/mois\n\n__**Commandes:**__\n > **- \`/configuration\`** = *Configurer le module "signalement".*\n > **- \`Applications --> Signaler\`** = *Signaler un message.*`)
      .setImage('https://images-ext-1.discordapp.net/external/trC3TonsIfU9BdPRtV9ocdcT_2lYW5zG7q33q6RIsaw/https/images-ext-2.discordapp.net/external/U1p_BsuK2zsSFuQIPWX91-xalkqOcYIO6GmzyJnYNVA/https/images-ext-1.discordapp.net/external/DuMUL-6bVZuOUHTpuc0jonPvHa60W3CK25_llDb3fAc/https/images-ext-1.discordapp.net/external/rTTwoNP0urZ-tYdN4XPLFcLKu1xqcSTiEfFc3Eo6C-M/https/images-ext-2.discordapp.net/external/hxUtwhmwwv7dmafrt5rvn5yGUokngUnOaOPf50vBtZs/https/images-ext-1.discordapp.net/external/yH7KJkAAtf-kVHH5HLRTFcRCI4_zcVQtkYe87xM-a7Y/https/media.discordapp.net/attachments/804596652643844096/925349824612663316/gfgfc.png')

    const help_button_home = new ButtonBuilder()
      .setStyle(ButtonStyle.Secondary)
      .setEmoji(`${emoji.home}`)
      .setCustomId('help_button_home')

    const help_button_gauche1ext = new ButtonBuilder()
      .setStyle(ButtonStyle.Primary)
      .setEmoji(`${emoji.extgauche}`)
      .setCustomId('help_button_gauche1ext')

    const help_button_gauche1 = new ButtonBuilder()
      .setStyle(ButtonStyle.Primary)
      .setEmoji(`${emoji.gauche}`)
      .setCustomId('help_button_gauche17')

    const help_button_droit1ext = new ButtonBuilder()
      .setStyle(ButtonStyle.Primary)
      .setEmoji(`${emoji.extdroite}`)
      .setCustomId('help_button_droit1ext')

    const help_button_droit1 = new ButtonBuilder()
      .setStyle(ButtonStyle.Primary)
      .setEmoji(`${emoji.droite}`)
      .setCustomId('help_button_droit18')

    const help_menu = new ActionRowBuilder()
      .addComponents(help_button_home)
      .addComponents(help_button_gauche1ext)
      .addComponents(help_button_gauche1)
      .addComponents(help_button_droit1)
      .addComponents(help_button_droit1ext)


    interaction.message.edit({ embeds: ([embed]), components: [help_menu] })

    interaction.deferUpdate()

  }
  if ((interaction.customId === "help_button_droit18") || (interaction.customId === "help_button_gauche19")) {

    var embed = new EmbedBuilder()
      .setColor(`${config.color.color}`)
      .setTitle(`${emoji.bot}${help.title.text1}`)
      .setFooter({ text: `18/19 Pages` })
      .setDescription(`${emoji.recycle} **| Invitations**\n\n > \`\`\`Le module d'invitations permet de récompenser vos membres pour leurs invitations, vous pouvez configurer un message d'arrivé ainsi que 3 récompenses pour vos membres les plus fidèles !\`\`\`\n  __**Nombre de commande(s):**__ \`2\` \n\n __**Tarifs:**__\n > - Achat 3€\n > - Location: 0,30€/mois\n\n__**Commandes:**__\n > **- \`/configuration\`** = *Configurer le module "invitations".*\n > **- \`/invites\`** = *Afficher le nombre d'invitation(s) possédée(s) par un utilisateur.*`)
      .setImage('https://images-ext-1.discordapp.net/external/trC3TonsIfU9BdPRtV9ocdcT_2lYW5zG7q33q6RIsaw/https/images-ext-2.discordapp.net/external/U1p_BsuK2zsSFuQIPWX91-xalkqOcYIO6GmzyJnYNVA/https/images-ext-1.discordapp.net/external/DuMUL-6bVZuOUHTpuc0jonPvHa60W3CK25_llDb3fAc/https/images-ext-1.discordapp.net/external/rTTwoNP0urZ-tYdN4XPLFcLKu1xqcSTiEfFc3Eo6C-M/https/images-ext-2.discordapp.net/external/hxUtwhmwwv7dmafrt5rvn5yGUokngUnOaOPf50vBtZs/https/images-ext-1.discordapp.net/external/yH7KJkAAtf-kVHH5HLRTFcRCI4_zcVQtkYe87xM-a7Y/https/media.discordapp.net/attachments/804596652643844096/925349824612663316/gfgfc.png')

    const help_button_home = new ButtonBuilder()
      .setStyle(ButtonStyle.Secondary)
      .setEmoji(`${emoji.home}`)
      .setCustomId('help_button_home')

    const help_button_gauche1ext = new ButtonBuilder()
      .setStyle(ButtonStyle.Primary)
      .setEmoji(`${emoji.extgauche}`)
      .setCustomId('help_button_gauche1ext')

    const help_button_gauche1 = new ButtonBuilder()
      .setStyle(ButtonStyle.Primary)
      .setEmoji(`${emoji.gauche}`)
      .setCustomId('help_button_gauche18')

    const help_button_droit1ext = new ButtonBuilder()
      .setStyle(ButtonStyle.Primary)
      .setEmoji(`${emoji.extdroite}`)
      .setCustomId('help_button_droit1ext')

    const help_button_droit1 = new ButtonBuilder()
      .setStyle(ButtonStyle.Primary)
      .setEmoji(`${emoji.droite}`)
      .setCustomId('help_button_droit19')

    const help_menu = new ActionRowBuilder()
      .addComponents(help_button_home)
      .addComponents(help_button_gauche1ext)
      .addComponents(help_button_gauche1)
      .addComponents(help_button_droit1)
      .addComponents(help_button_droit1ext)


    interaction.message.edit({ embeds: ([embed]), components: [help_menu] })

    interaction.deferUpdate()

  }
  if ((interaction.customId === "help_button_droit19") || (interaction.customId === "help_button_droit1ext")) {

    var embed = new EmbedBuilder()
      .setColor(`${config.color.color}`)
      .setTitle(`${emoji.bot}${help.title.text1}`)
      .setFooter({ text: `19/19 Pages` })
      .setDescription(`${emoji.database} **| Hebergement**\n\n > **-** L'**hébergement** du bot n'est pas **compris** dans les **offres** et s'élève à **0,80€/mois** pour l'achat d'au moins 1 module *(petit réduction en bas de page 😋)*.\n\n > **-** L'**hébergement** de **bot personnels** sont **pris** en **charge**, le **prix** s'élève à **1€/mois**`)
      .setImage('https://images-ext-1.discordapp.net/external/trC3TonsIfU9BdPRtV9ocdcT_2lYW5zG7q33q6RIsaw/https/images-ext-2.discordapp.net/external/U1p_BsuK2zsSFuQIPWX91-xalkqOcYIO6GmzyJnYNVA/https/images-ext-1.discordapp.net/external/DuMUL-6bVZuOUHTpuc0jonPvHa60W3CK25_llDb3fAc/https/images-ext-1.discordapp.net/external/rTTwoNP0urZ-tYdN4XPLFcLKu1xqcSTiEfFc3Eo6C-M/https/images-ext-2.discordapp.net/external/hxUtwhmwwv7dmafrt5rvn5yGUokngUnOaOPf50vBtZs/https/images-ext-1.discordapp.net/external/yH7KJkAAtf-kVHH5HLRTFcRCI4_zcVQtkYe87xM-a7Y/https/media.discordapp.net/attachments/804596652643844096/925349824612663316/gfgfc.png')

    const help_button_home = new ButtonBuilder()
      .setStyle(ButtonStyle.Secondary)
      .setEmoji(`${emoji.home}`)
      .setCustomId('help_button_home')

    const help_button_gauche1ext = new ButtonBuilder()
      .setStyle(ButtonStyle.Primary)
      .setEmoji(`${emoji.extgauche}`)
      .setCustomId('help_button_gauche1ext')

    const help_button_gauche1 = new ButtonBuilder()
      .setStyle(ButtonStyle.Primary)
      .setEmoji(`${emoji.gauche}`)
      .setCustomId('help_button_gauche19')

    const help_button_droit1ext = new ButtonBuilder()
      .setStyle(ButtonStyle.Primary)
      .setEmoji(`${emoji.extdroite}`)
      .setCustomId('help_button_droit1ext')
      .setDisabled(true)

    const help_button_droit1 = new ButtonBuilder()
      .setStyle(ButtonStyle.Primary)
      .setEmoji(`${emoji.droite}`)
      .setCustomId('help_button_droit20')
      .setDisabled(true)

    const help_menu = new ActionRowBuilder()
      .addComponents(help_button_home)
      .addComponents(help_button_gauche1ext)
      .addComponents(help_button_gauche1)
      .addComponents(help_button_droit1)
      .addComponents(help_button_droit1ext)


    interaction.message.edit({ embeds: ([embed]), components: [help_menu] })

    interaction.deferUpdate()

  }

  if (interaction.commandName === "help") {
    if (interaction.guildId === server_id) {

      var embed = new EmbedBuilder()
        .setColor(`${config.color.color}`)
        .setTitle(`${emoji.bot}${help.title.text1}`)
        .setFooter({ text: `1/19 Pages` })
        .setDescription(`> ${emoji.welcome}${help.description.text1}` + client.user.username + `${help.description.text2}` + interaction.guild.name + `${help.description.text3}${emoji.color}${help.description.text4}\n\n> ${emoji.banned}${help.description.text5}
        \n\n> ${emoji.satellite}${help.description.text6}`)
        .setImage('https://images-ext-1.discordapp.net/external/trC3TonsIfU9BdPRtV9ocdcT_2lYW5zG7q33q6RIsaw/https/images-ext-2.discordapp.net/external/U1p_BsuK2zsSFuQIPWX91-xalkqOcYIO6GmzyJnYNVA/https/images-ext-1.discordapp.net/external/DuMUL-6bVZuOUHTpuc0jonPvHa60W3CK25_llDb3fAc/https/images-ext-1.discordapp.net/external/rTTwoNP0urZ-tYdN4XPLFcLKu1xqcSTiEfFc3Eo6C-M/https/images-ext-2.discordapp.net/external/hxUtwhmwwv7dmafrt5rvn5yGUokngUnOaOPf50vBtZs/https/images-ext-1.discordapp.net/external/yH7KJkAAtf-kVHH5HLRTFcRCI4_zcVQtkYe87xM-a7Y/https/media.discordapp.net/attachments/804596652643844096/925349824612663316/gfgfc.png')

      const help_button_home = new ButtonBuilder()
        .setStyle(ButtonStyle.Secondary)
        .setEmoji(`${emoji.home}`)
        .setCustomId('help_button_home')

      const help_button_gauche1ext = new ButtonBuilder()
        .setStyle(ButtonStyle.Primary)
        .setEmoji(`${emoji.extgauche}`)
        .setCustomId('help_button_gauche1ext')
        .setDisabled(true)

      const help_button_gauche1 = new ButtonBuilder()
        .setStyle(ButtonStyle.Primary)
        .setEmoji(`${emoji.gauche}`)
        .setCustomId('help_button_gauche1')
        .setDisabled(true)

      const help_button_droit1ext = new ButtonBuilder()
        .setStyle(ButtonStyle.Primary)
        .setEmoji(`${emoji.extdroite}`)
        .setCustomId('help_button_droit1ext')

      const help_button_droit1 = new ButtonBuilder()
        .setStyle(ButtonStyle.Primary)
        .setEmoji(`${emoji.droite}`)
        .setCustomId('help_button_droit1')

      const help_menu = new ActionRowBuilder()
        .addComponents(help_button_home)
        .addComponents(help_button_gauche1ext)
        .addComponents(help_button_gauche1)
        .addComponents(help_button_droit1)
        .addComponents(help_button_droit1ext)


      interaction.reply({ embeds: ([embed]), components: [help_menu] })

    } else {

      var embed = new EmbedBuilder()
        .setColor(`${config.color.color_error}`)
        .setDescription(`${emoji.wrong}${general.error.server_follow}`)

      interaction.reply({ embeds: ([embed]), ephemeral: true })
    }
  }

  if (interaction.commandName === "salon_personnalisé") {
    if (interaction.guildId === server_id) {
      if ((db.module.get(String('sperso'))) === "on") {
        if (interaction.member.permissions.has(PermissionsBitField.Flags.Administrator)) {

          db.database.set(String(interaction.member.id + "channel_name"), "*`Non défini`*")
          db.database.set(String(interaction.member.id + "owner_channel"), "*`Non défini`*")
          db.database.set(String(interaction.member.id + "time_channel"), "*`Non défini`*")
          db.database.set(String(interaction.member.id + "reason_channel"), "*`Non défini`*")
          db.database.set(String(interaction.member.id + "mention_channel"), "*`Non défini`*")

          var embed = new EmbedBuilder()
            .setDescription(``)
            .setColor(`${config.color.color}`)

        } else {
          ////Erreur Perms Admins\\\\

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color_error}`)
            .setDescription(`${emoji.wrong}${general.error.perms_admin}`)

          interaction.reply({
            embeds: ([embed]), ephemeral: true
          })
        }
      } else {

        var embed = new EmbedBuilder()
          .setColor(`${config.color.color_error}`)
          .setDescription(`${emoji.wrong}${general.error.module_activate1}` + ' *`Salon`* ' + `${general.error.module_activate2}`)

        interaction.reply({ embeds: ([embed]), ephemeral: true })
      }
    } else {

      var embed = new EmbedBuilder()
        .setColor(`${config.color.color_error}`)
        .setDescription(`${emoji.wrong}${general.error.server_follow}`)

      interaction.reply({ embeds: ([embed]), ephemeral: true })
    }
  }

  if (interaction.commandName === "say") {
    if (interaction.guildId === server_id) {
      if ((db.module.get(String('embed'))) === "on") {
        if ((interaction.member.permissions.has(PermissionsBitField.Flags.Administrator)) || (interaction.member.id === dev)) {

          message = interaction.options.getString("blabla")

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color_good}`)
            .setDescription(`${emoji.tick}${embedm.description.text11}`)

          interaction.reply({ embeds: ([embed]), ephemeral: true })

          interaction.channel.send({ content: message })

        } else {
          ////Erreur Perms Admins\\\\

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color_error}`)
            .setDescription(`${emoji.wrong}${general.error.perms_admin}`)

          interaction.reply({
            embeds: ([embed]), ephemeral: true
          })
        }
      } else {

        var embed = new EmbedBuilder()
          .setColor(`${config.color.color_error}`)
          .setDescription(`${emoji.wrong}${general.error.module_activate1}` + ' *`Modération/Vérifications`* ' + `${general.error.module_activate2}`)

        interaction.reply({ embeds: ([embed]), ephemeral: true })
      }
    } else {

      var embed = new EmbedBuilder()
        .setColor(`${config.color.color_error}`)
        .setDescription(`${emoji.wrong}${general.error.server_follow}`)

      interaction.reply({ embeds: ([embed]), ephemeral: true })
    }
  }

  if (interaction.commandName === "clear") {
    if (interaction.guildId === server_id) {
      if ((db.module.get(String('moderation'))) === "on") {
        if ((interaction.member.permissions.has(PermissionsBitField.Flags.ManageMessages)) || (interaction.member.id === dev)) {


          let number = interaction.options.getString("messages")


          if ((number > 0) && (number < 100)) {

            try {


              var embed = new EmbedBuilder()
                .setColor(`${config.color.color_good}`)
                .setDescription(`${emoji.tick}${moderation.description.text9}` + number + `${moderation.description.text10}`)


              await interaction.reply({ embeds: ([embed]), ephemeral: true })

              if (!((db.database.get(String("modo_logs_channel"))) === "*`Non défini`*")) {


                channel = client.channels.cache.get(db.database.get(String("modo_logs_channel")))

                var embed = new EmbedBuilder()
                  .setTimestamp()
                  .setColor(`${config.color.color}`)
                  .setFooter({ text: `${general.response.footer_author}` + interaction.member.user.tag, iconURL: interaction.member.displayAvatarURL() })
                  .setTitle(`${emoji.bin}${moderation.title.text6}`)
                  .setDescription(`${emoji.pen} **| Nombre de messages:** *\`\`\`` + number + " message(s)" + "```* \n" + `${emoji.chanel} **| Salon:** *\`\`\`` + interaction.channel.name + " / " + interaction.channelId + "```* \n" + `${emoji.moderator} **| Auteur:** *\`\`\`` + interaction.member.user.tag + " / " + interaction.member.id + "```*")


                channel.send({ embeds: ([embed]) })
              }
            } catch (err) {

              console.log(chalk.greenBright(err + " | USER NOT FOUND"))
            }

            interaction.channel.bulkDelete(number)

          } else {

            var embed = new EmbedBuilder()
              .setColor(`${config.color.color_error}`)
              .setDescription(`${emoji.wrong}${moderation.description.text8}`)

            interaction.reply({ embeds: ([embed]), ephemeral: true })
          }

        } else {
          ////Erreur Perms Admins\\\\

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color_error}`)
            .setDescription(`${emoji.wrong}${general.error.perms_manage_messages}`)

          interaction.reply({
            embeds: ([embed]), ephemeral: true
          })
        }
      } else {
        var embed = new EmbedBuilder()
          .setColor(`${config.color.color_error}`)
          .setDescription(`${emoji.wrong}${general.error.module_activate1}` + ' *`Modération`* ' + `${general.error.module_activate2}`)

        interaction.reply({ embeds: ([embed]), ephemeral: true })
      }

    } else {

      var embed = new EmbedBuilder()
        .setColor(`${config.color.color_error}`)
        .setDescription(`${emoji.wrong}${general.error.server_follow}`)

      interaction.reply({ embeds: ([embed]), ephemeral: true })
    }
  }

  if (interaction.commandName === "unwarn") {
    if (interaction.guildId === server_id) {
      if (((db.module.get(String('moderation'))) === "on") || ((db.module.get(String('verification'))) === "on")) {
        if ((interaction.member.permissions.has(PermissionsBitField.Flags.ManageMessages)) || (interaction.member.id === dev)) {
          if (!((interaction.options.getUser("utilisateur")).bot)) {


            member = interaction.options.getUser("utilisateur")



            if (!(db.warn.has(String(member.id + "-warns_count")))) {
              db.warn.set(String(member.id + "-warns_count"), 0)
            }

            if ((db.warn.has(String(member.id + "-warns_count"))) && ((db.warn.get(String(member.id + "-warns_count"))) > 0)) {


              db.warn.subtract(String(member.id + "-warns_count"), 1)

              try {

                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color_good}`)
                  .setDescription(`${emoji.tick}${moderation.description.text5}`)


                interaction.reply({ embeds: ([embed]) })

                if (!((db.database.get(String("modo_logs_channel"))) === "*`Non défini`*")) {


                  channel = client.channels.cache.get(db.database.get(String("modo_logs_channel")))

                  var embed = new EmbedBuilder()
                    .setTimestamp()
                    .setColor(`${config.color.color}`)
                    .setTitle(`${emoji.warn}${moderation.title.text1}`)
                    .setDescription(`${emoji.banned} **| Utilisateur:** *\`\`\`` + member.tag + " / " + member.id + "```* \n" + `${emoji.moderator} **| Retiré par:** *\`\`\`` + interaction.member.user.tag + " / " + interaction.member.id + "```*")


                  channel.send({ embeds: ([embed]) })

                  var embed = new EmbedBuilder()
                    .setColor(`${config.color.color_good}`)
                    .setDescription(`${emoji.tick}${moderation.description.text6}` + interaction.guild.name + `${moderation.description.text7}`)

                  member.send({ embeds: ([embed]) })
                }
              } catch (err) {

                console.log(chalk.greenBright(err + " | USER NOT FOUND"))
              }

            } else {

              var embed = new EmbedBuilder()
                .setColor(`${config.color.color_error}`)
                .setDescription(`${emoji.wrong}${moderation.description.text4}`)

              interaction.reply({ embeds: ([embed]), ephemeral: true })
            }

          } else {

            var embed = new EmbedBuilder()
              .setColor(`${config.color.color_error}`)
              .setDescription(`${emoji.wrong}${general.error.not_bot}`)

            interaction.reply({ embeds: ([embed]), ephemeral: true })
          }

        } else {
          ////Erreur Perms Admins\\\\

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color_error}`)
            .setDescription(`${emoji.wrong}${general.error.perms_manage_messages}`)

          interaction.reply({
            embeds: ([embed]), ephemeral: true
          })
        }
      } else {
        var embed = new EmbedBuilder()
          .setColor(`${config.color.color_error}`)
          .setDescription(`${emoji.wrong}${general.error.module_activate1}` + ' *`Modération/Vérifications`* ' + `${general.error.module_activate2}`)

        interaction.reply({ embeds: ([embed]), ephemeral: true })
      }

    } else {

      var embed = new EmbedBuilder()
        .setColor(`${config.color.color_error}`)
        .setDescription(`${emoji.wrong}${general.error.server_follow}`)

      interaction.reply({ embeds: ([embed]), ephemeral: true })
    }
  }

  if (interaction.commandName === "infractions") {
    if (interaction.guildId === server_id) {
      if (((db.module.get(String('moderation'))) === "on") || ((db.module.get(String('verification'))) === "on")) {
        if ((interaction.member.permissions.has(PermissionsBitField.Flags.ManageMessages)) || (interaction.member.id === dev)) {
          if (!((interaction.options.getUser("utilisateur")).bot)) {


            member = interaction.options.getUser("utilisateur")



            if (!(db.warn.has(String(member.id + "-warns_count")))) {
              db.warn.set(String(member.id + "-warns_count"), 0)
            }

            try {

              var embed = new EmbedBuilder()
                .setColor(`${config.color.color}`)
                .setDescription(`${emoji.warn}${moderation.description.text2}` + db.warn.get(String(member.id + "-warns_count")) + `${moderation.description.text3}`)


              interaction.reply({ embeds: ([embed]) })

            } catch (err) {

              console.log(chalk.greenBright(err + " | USER NOT FOUND"))
            }



          } else {

            var embed = new EmbedBuilder()
              .setColor(`${config.color.color_error}`)
              .setDescription(`${emoji.wrong}${general.error.not_bot}`)

            interaction.reply({ embeds: ([embed]), ephemeral: true })
          }
        } else {
          ////Erreur Perms Admins\\\\

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color_error}`)
            .setDescription(`${emoji.wrong}${general.error.perms_manage_messages}`)

          interaction.reply({
            embeds: ([embed]), ephemeral: true
          })
        }
      } else {
        var embed = new EmbedBuilder()
          .setColor(`${config.color.color_error}`)
          .setDescription(`${emoji.wrong}${general.error.module_activate1}` + ' *`Modération/Vérifications`* ' + `${general.error.module_activate2}`)

        interaction.reply({ embeds: ([embed]), ephemeral: true })
      }

    } else {

      var embed = new EmbedBuilder()
        .setColor(`${config.color.color_error}`)
        .setDescription(`${emoji.wrong}${general.error.server_follow}`)

      interaction.reply({ embeds: ([embed]), ephemeral: true })
    }
  }

  if (interaction.commandName === "warn") {
    if (interaction.guildId === server_id) {
      if (((db.module.get(String('moderation'))) === "on") || ((db.module.get(String('verification'))) === "on")) {
        if ((interaction.member.permissions.has(PermissionsBitField.Flags.ManageMessages)) || (interaction.member.id === dev)) {
          if (!((interaction.options.getUser("utilisateur")).bot)) {


            member = interaction.options.getUser("utilisateur")
            reason = interaction.options.getString("raison")

            db.warn.add(String(member.id + "-warns_count"), 1)
            db.warn.set(String(member.id + "-" + db.warn.get(String(member.id + "-warns_count")) + "-warn"), reason)

            try {

              var embed = new EmbedBuilder()
                .setColor(`${config.color.color_good}`)
                .setDescription(`${emoji.tick}${moderation.description.text1}`)


              interaction.reply({ embeds: ([embed]) })

              if (!((db.database.get(String("modo_logs_channel"))) === "*`Non défini`*")) {

                channel = client.channels.cache.get(db.database.get(String("modo_logs_channel")))

                var embed = new EmbedBuilder()
                  .setTimestamp()
                  .setColor(`${config.color.color}`)
                  .setImage("https://images-ext-2.discordapp.net/external/hxUtwhmwwv7dmafrt5rvn5yGUokngUnOaOPf50vBtZs/https/images-ext-1.discordapp.net/external/yH7KJkAAtf-kVHH5HLRTFcRCI4_zcVQtkYe87xM-a7Y/https/media.discordapp.net/attachments/804596652643844096/925349824612663316/gfgfc.png")
                  .setTitle(`${moderation.title.text1}`)
                  .setFields(
                    { name: 'Type de sanction', value: "`Avertissement Ecrit`", inline: false },
                    { name: 'Utilisateur', value: "`" + member.tag + " / " + member.id + "`", inline: false },
                    { name: 'Raison', value: "`" + reason + "`", inline: false },
                    { name: 'Modérateur', value: "`" + interaction.member.user.tag + "`", inline: false }
                  )


                channel.send({ embeds: ([embed]) })

                var embed = new EmbedBuilder()
                  .setTimestamp()
                  .setColor(`${config.color.color}`)
                  .setImage("https://images-ext-2.discordapp.net/external/hxUtwhmwwv7dmafrt5rvn5yGUokngUnOaOPf50vBtZs/https/images-ext-1.discordapp.net/external/yH7KJkAAtf-kVHH5HLRTFcRCI4_zcVQtkYe87xM-a7Y/https/media.discordapp.net/attachments/804596652643844096/925349824612663316/gfgfc.png")
                  .setTitle(`${moderation.title.text1}`)
                  .setFields(
                    { name: 'Serveur', value: "`" + interaction.guild.name + "`", inline: false },
                    { name: 'Type de sanction', value: "`Avertissement Ecrit`", inline: false },
                    { name: 'Raison', value: "`" + reason + "`", inline: false },
                    { name: 'Modérateur', value: "`" + interaction.member.user.tag + "`", inline: false }
                  )

                member.send({ embeds: ([embed]) })
              }
            } catch (err) {

              console.log(chalk.greenBright(err + " | USER NOT FOUND"))
            }




          } else {

            var embed = new EmbedBuilder()
              .setColor(`${config.color.color_error}`)
              .setDescription(`${emoji.wrong}${general.error.not_bot}`)

            interaction.reply({ embeds: ([embed]), ephemeral: true })
          }
        } else {
          ////Erreur Perms Admins\\\\

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color_error}`)
            .setDescription(`${emoji.wrong}${general.error.perms_manage_messages}`)

          interaction.reply({
            embeds: ([embed]), ephemeral: true
          })
        }
      } else {
        var embed = new EmbedBuilder()
          .setColor(`${config.color.color_error}`)
          .setDescription(`${emoji.wrong}${general.error.module_activate1}` + ' *`Modération/Vérifications`* ' + `${general.error.module_activate2}`)

        interaction.reply({ embeds: ([embed]), ephemeral: true })
      }

    } else {

      var embed = new EmbedBuilder()
        .setColor(`${config.color.color_error}`)
        .setDescription(`${emoji.wrong}${general.error.server_follow}`)

      interaction.reply({ embeds: ([embed]), ephemeral: true })
    }
  }

  if (interaction.commandName === "unban") {
    if (interaction.guildId === server_id) {
      if ((db.module.get(String('moderation'))) === "on") {
        if ((interaction.member.permissions.has(PermissionsBitField.Flags.BanMembers)) || (interaction.member.id === dev)) {
          if (!((interaction.options.getUser("utilisateur")).bot)) {


            member = interaction.options.getUser("utilisateur")
            reason = interaction.options.getString("raison")


            try {

              var embed = new EmbedBuilder()
                .setColor(`${config.color.color_good}`)
                .setDescription(`${emoji.tick}${moderation.description.text11}`)

              interaction.reply({ embeds: ([embed]) })

              if (!((db.database.get(String("modo_logs_channel"))) === "*`Non défini`*")) {

                channel = client.channels.cache.get(db.database.get(String("modo_logs_channel")))


                var embed = new EmbedBuilder()
                  .setTimestamp()
                  .setColor(`${config.color.color}`)
                  .setTitle(`${emoji.warn}${moderation.title.text1}`)
                  .setFields(
                    { name: 'Type de sanction', value: "`Débannissement`", inline: false },
                    { name: 'Utilisateur', value: "`" + member.user.tag + " / " + member.user.id + "`", inline: false },
                    { name: 'Raison', value: "`" + reason + "`", inline: false },
                    { name: 'Modérateur', value: "`" + interaction.member.user.tag + "`", inline: false }
                  )


                await channel.send({ embeds: ([embed]) })
              }
            } catch (err) {

              console.log(chalk.greenBright(err + " | USER NOT FOUND"))
            }

            await interaction.guild.bans.remove(member.id, { reason: "[" + client.user.username + "] " + reason })

          } else {

            var embed = new EmbedBuilder()
              .setColor(`${config.color.color_error}`)
              .setDescription(`${emoji.wrong}${general.error.not_bot}`)

            interaction.reply({ embeds: ([embed]), ephemeral: true })
          }
        } else {
          ////Erreur Perms Admins\\\\

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color_error}`)
            .setDescription(`${emoji.wrong}${general.error.perms_ban}`)

          interaction.reply({
            embeds: ([embed]), ephemeral: true
          })
        }
      } else {
        var embed = new EmbedBuilder()
          .setColor(`${config.color.color_error}`)
          .setDescription(`${emoji.wrong}${general.error.module_activate1}` + ' *`Modération`* ' + `${general.error.module_activate2}`)

        interaction.reply({ embeds: ([embed]), ephemeral: true })
      }

    } else {

      var embed = new EmbedBuilder()
        .setColor(`${config.color.color_error}`)
        .setDescription(`${emoji.wrong}${general.error.server_follow}`)

      interaction.reply({ embeds: ([embed]), ephemeral: true })
    }
  }

  if (interaction.commandName === "unlock") {
    if (interaction.guildId === server_id) {
      if ((db.module.get(String('moderation'))) === "on") {
        if ((interaction.member.permissions.has(PermissionsBitField.Flags.Administrator)) || (interaction.member.id === dev)) {

          try {

            var embed = new EmbedBuilder()
              .setColor(`${config.color.color_good}`)
              .setDescription(`${emoji.unlock}${moderation.description.text13}`)


            interaction.reply({ embeds: ([embed]) })

            if (!((db.database.get(String("modo_logs_channel"))) === "*`Non défini`*")) {

              channel = client.channels.cache.get(db.database.get(String("modo_logs_channel")))

              var embed = new EmbedBuilder()
                .setTimestamp()
                .setColor(`${config.color.color}`)
                .setTitle(`${emoji.unlock}${moderation.title.text5}`)
                .setFields(
                  { name: 'Salon', value: "`" + interaction.channel.name + "`", inline: false },
                  { name: 'Modérateur', value: "`" + interaction.member.user.tag + "`", inline: false }
                )


              await channel.send({ embeds: ([embed]) })


            }
          } catch (err) {

            console.log(chalk.greenBright(err + " | USER NOT FOUND"))
          }

          await interaction.channel.permissionOverwrites.edit(interaction.guild.id, { SendMessages: true });

        } else {
          ////Erreur Perms Admins\\\\

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color_error}`)
            .setDescription(`${emoji.wrong}${general.error.perms_admin}`)

          interaction.reply({
            embeds: ([embed]), ephemeral: true
          })
        }
      } else {
        var embed = new EmbedBuilder()
          .setColor(`${config.color.color_error}`)
          .setDescription(`${emoji.wrong}${general.error.module_activate1}` + ' *`Modération`* ' + `${general.error.module_activate2}`)

        interaction.reply({ embeds: ([embed]), ephemeral: true })
      }

    } else {

      var embed = new EmbedBuilder()
        .setColor(`${config.color.color_error}`)
        .setDescription(`${emoji.wrong}${general.error.server_follow}`)

      interaction.reply({ embeds: ([embed]), ephemeral: true })
    }
  }

  if (interaction.commandName === "lock") {
    if (interaction.guildId === server_id) {
      if ((db.module.get(String('moderation'))) === "on") {
        if ((interaction.member.permissions.has(PermissionsBitField.Flags.Administrator)) || (interaction.member.id === dev)) {

          try {

            var embed = new EmbedBuilder()
              .setColor(`${config.color.color_error}`)
              .setDescription(`${emoji.captcha}${moderation.description.text12}`)


            interaction.reply({ embeds: ([embed]) })

            if (!((db.database.get(String("modo_logs_channel"))) === "*`Non défini`*")) {

              channel = client.channels.cache.get(db.database.get(String("modo_logs_channel")))

              var embed = new EmbedBuilder()
                .setTimestamp()
                .setColor(`${config.color.color}`)
                .setTitle(`${emoji.captcha}${moderation.title.text4}`)
                .setFields(
                  { name: 'Salon', value: "`" + interaction.channel.name + "`", inline: false },
                  { name: 'Modérateur', value: "`" + interaction.member.user.tag + "`", inline: false }
                )


              await channel.send({ embeds: ([embed]) })


            }
          } catch (err) {

            console.log(chalk.greenBright(err + " | USER NOT FOUND"))
          }

          interaction.channel.name.edit

          await interaction.channel.permissionOverwrites.edit(interaction.guild.id, { SendMessages: false });

        } else {
          ////Erreur Perms Admins\\\\

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color_error}`)
            .setDescription(`${emoji.wrong}${general.error.perms_admin}`)

          interaction.reply({
            embeds: ([embed]), ephemeral: true
          })
        }
      } else {
        var embed = new EmbedBuilder()
          .setColor(`${config.color.color_error}`)
          .setDescription(`${emoji.wrong}${general.error.module_activate1}` + ' *`Modération`* ' + `${general.error.module_activate2}`)

        interaction.reply({ embeds: ([embed]), ephemeral: true })
      }

    } else {

      var embed = new EmbedBuilder()
        .setColor(`${config.color.color_error}`)
        .setDescription(`${emoji.wrong}${general.error.server_follow}`)

      interaction.reply({ embeds: ([embed]), ephemeral: true })
    }
  }

  if (interaction.commandName === "kick") {
    if (interaction.guildId === server_id) {
      if ((db.module.get(String('moderation'))) === "on") {
        if ((interaction.member.permissions.has(PermissionsBitField.Flags.KickMembers)) || (interaction.member.id === dev)) {
          if (!((interaction.options.getUser("utilisateur")).bot)) {


            member = interaction.options.getUser("utilisateur")
            reason = interaction.options.getString("raison")


            try {

              var embed = new EmbedBuilder()
                .setColor(`${config.color.color_good}`)
                .setDescription(`${emoji.tick}${moderation.description.text1}`)


              interaction.reply({ embeds: ([embed]) })

              if (!((db.database.get(String("modo_logs_channel"))) === "*`Non défini`*")) {

                channel = client.channels.cache.get(db.database.get(String("modo_logs_channel")))

                var embed = new EmbedBuilder()
                  .setTimestamp()
                  .setColor(`${config.color.color}`)
                  .setTitle(`${emoji.warn}${moderation.title.text1}`)
                  .setFields(
                    { name: 'Type de sanction', value: "`Expulsion`", inline: false },
                    { name: 'Utilisateur', value: "`" + member.user.tag + " / " + member.user.id + "`", inline: false },
                    { name: 'Raison', value: "`" + reason + "`", inline: false },
                    { name: 'Modérateur', value: "`" + interaction.member.user.tag + "`", inline: false }
                  )


                await channel.send({ embeds: ([embed]) })

                var embed = new EmbedBuilder()
                  .setTimestamp()
                  .setColor(`${config.color.color_verif_stop}`)
                  .setTitle(`${emoji.warn}${moderation.title.text1}`)
                  .setFields(
                    { name: 'Serveur', value: "`" + interaction.guild.name + "`", inline: false },
                    { name: 'Type de sanction', value: "`Expulsion", inline: false },
                    { name: 'Raison', value: "`" + reason + "`", inline: false },
                    { name: 'Modérateur', value: "`" + interaction.member.user.tag + "`", inline: false }
                  )

                await member.send({ embeds: ([embed]) })

                await interaction.guild.members.kick(member)
              }
            } catch (err) {

              console.log(chalk.greenBright(err + " | USER NOT FOUND"))
            }




          } else {

            var embed = new EmbedBuilder()
              .setColor(`${config.color.color_error}`)
              .setDescription(`${emoji.wrong}${general.error.not_bot}`)

            interaction.reply({ embeds: ([embed]), ephemeral: true })
          }
        } else {
          ////Erreur Perms Admins\\\\

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color_error}`)
            .setDescription(`${emoji.wrong}${general.error.perms_kick}`)

          interaction.reply({
            embeds: ([embed]), ephemeral: true
          })
        }
      } else {
        var embed = new EmbedBuilder()
          .setColor(`${config.color.color_error}`)
          .setDescription(`${emoji.wrong}${general.error.module_activate1}` + ' *`Modération`* ' + `${general.error.module_activate2}`)

        interaction.reply({ embeds: ([embed]), ephemeral: true })
      }

    } else {

      var embed = new EmbedBuilder()
        .setColor(`${config.color.color_error}`)
        .setDescription(`${emoji.wrong}${general.error.server_follow}`)

      interaction.reply({ embeds: ([embed]), ephemeral: true })
    }
  }

  if (interaction.commandName === "ban") {
    if (interaction.guildId === server_id) {
      if ((db.module.get(String('moderation'))) === "on") {
        if ((interaction.member.permissions.has(PermissionsBitField.Flags.BanMembers)) || (interaction.member.id === dev)) {
          if (!((interaction.options.getUser("utilisateur")).bot)) {


            member = interaction.options.getUser("utilisateur")
            reason = interaction.options.getString("raison")


            try {

              var embed = new EmbedBuilder()
                .setColor(`${config.color.color_good}`)
                .setDescription(`${emoji.tick}${moderation.description.text1}`)


              interaction.reply({ embeds: ([embed]) })

              if (!((db.database.get(String("modo_logs_channel"))) === "*`Non défini`*")) {

                channel = client.channels.cache.get(db.database.get(String("modo_logs_channel")))

                var embed = new EmbedBuilder()
                  .setTimestamp()
                  .setColor(`${config.color.color}`)
                  .setTitle(`${emoji.warn}${moderation.title.text1}`)
                  .setFields(
                    { name: 'Type de sanction', value: "`Bannissement`", inline: false },
                    { name: 'Utilisateur', value: "`" + member.user.tag + " / " + member.user.id + "`", inline: false },
                    { name: 'Raison', value: "`" + reason + "`", inline: false },
                    { name: 'Modérateur', value: "`" + interaction.member.user.tag + "`", inline: false }
                  )


                await channel.send({ embeds: ([embed]) })

                var embed = new EmbedBuilder()
                  .setTimestamp()
                  .setColor(`${config.color.color_verif_stop}`)
                  .setTitle(`${emoji.warn}${moderation.title.text1}`)
                  .setFields(
                    { name: 'Serveur', value: "`" + interaction.guild.name + "`", inline: false },
                    { name: 'Type de sanction', value: "`Avertissement Ecrit`", inline: false },
                    { name: 'Raison', value: "`" + reason + "`", inline: false },
                    { name: 'Modérateur', value: "`" + interaction.member.user.tag + "`", inline: false }
                  )

                await member.send({ embeds: ([embed]) })

              }
            } catch (err) {

              console.log(chalk.greenBright(err + " | USER NOT FOUND"))
            }

            await interaction.guild.bans.create(member.id, { reason: "[" + client.user.username + "] " + reason })


          } else {

            var embed = new EmbedBuilder()
              .setColor(`${config.color.color_error}`)
              .setDescription(`${emoji.wrong}${general.error.not_bot}`)

            interaction.reply({ embeds: ([embed]), ephemeral: true })
          }
        } else {
          ////Erreur Perms Admins\\\\

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color_error}`)
            .setDescription(`${emoji.wrong}${general.error.perms_ban}`)

          interaction.reply({
            embeds: ([embed]), ephemeral: true
          })
        }
      } else {
        var embed = new EmbedBuilder()
          .setColor(`${config.color.color_error}`)
          .setDescription(`${emoji.wrong}${general.error.module_activate1}` + ' *`Modération`* ' + `${general.error.module_activate2}`)

        interaction.reply({ embeds: ([embed]), ephemeral: true })
      }

    } else {

      var embed = new EmbedBuilder()
        .setColor(`${config.color.color_error}`)
        .setDescription(`${emoji.wrong}${general.error.server_follow}`)

      interaction.reply({ embeds: ([embed]), ephemeral: true })
    }
  }

  if (interaction.commandName === "vérifications") {
    if (interaction.guildId === server_id) {
      if (db.module.has(String('verification')) && db.module.get(String('verification')) === "on") {
        if (interaction.member.roles.cache.has(db.database.get(String("rank-accès_verif_add")))) {

          try {

            if (!((String(interaction.options.getUser('utilisateur'))) === "null")) {
              if (db.database.has(String(interaction.options.getUser('utilisateur').id + '-verif_count'))) {

                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color}`)
                  .setDescription(`${emoji.tick}${verify.description.text10}` + db.database.get(String(interaction.options.getUser('utilisateur').id + '-verif_count')) + `${verify.description.text9}`)

                interaction.reply({ embeds: ([embed]) })
              } else {

                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color}`)
                  .setDescription(`${emoji.tick}${verify.description.text10}` + "0" + `${verify.description.text9}`)

                interaction.reply({ embeds: ([embed]) })
              }
            } else {
              if (db.database.has(String(interaction.user.id + '-verif_count'))) {

                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color}`)
                  .setDescription(`${emoji.tick}${verify.description.text8}` + db.database.get(String(interaction.user.id + '-verif_count')) + `${verify.description.text9}`)

                interaction.reply({ embeds: ([embed]) })
              } else {

                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color}`)
                  .setDescription(`${emoji.tick}${verify.description.text8}` + "0" + `${verify.description.text9}`)

                interaction.reply({ embeds: ([embed]) })

              }
            }

          } catch (err) {
            console.log(chalk.red(err));

            var embed = new EmbedBuilder()
              .setColor(`${config.color.error}`)
              .setDescription(`${emoji.error}${server_infos.description.text9}`)

            interaction.reply({ embeds: ([embed]), ephemeral: true })

            let error = err

            var embed = new EmbedBuilder()
              .setColor(`${config.color.error}`)
              .setTitle(`${emoji.error}${server_infos.title.text2}`)
              .setDescription('```vérifications``` ```diff' + `\n\n` + `- ${error}` + '```')
              .setAuthor({ name: client.user.tag + ' | ' + client.user.id, iconURL: client.user.displayAvatarURL() })
              .setFooter({ text: interaction.user.tag + ' | ' + interaction.user.id, iconURL: interaction.user.displayAvatarURL() })

            client.channels.cache.get(String(`${config.channels.error}`)).send({ embeds: ([embed]) })

          }

        } else {

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color_error}`)
            .setDescription(`${emoji.wrong}${verify.description.text3}` + (interaction.guild.roles.cache.get(db.database.get(String("rank-accès_verif_add")))).name + `${verify.description.text4}`)

          interaction.reply({ embeds: ([embed]), ephemeral: true })
        }

      } else {
        var embed = new EmbedBuilder()
          .setColor(`${config.color.color_error}`)
          .setDescription(`${emoji.wrong}${general.error.module_activate1}` + ' *`Vérification`* ' + `${general.error.module_activate2}`)

        interaction.reply({ embeds: ([embed]), ephemeral: true })
      }
    } else {

      var embed = new EmbedBuilder()
        .setColor(`${config.color.color_error}`)
        .setDescription(`${emoji.wrong}${general.error.server_follow}`)

      interaction.reply({ embeds: ([embed]), ephemeral: true })
    }
  }

  if ((interaction.customId) === "menu_verif_notgood") {
    if (interaction.member.roles.cache.has(db.database.get(String("rank-accès_verif_add")))) {
      if ((interaction.values[0]) === "mchannel_sanction") {

        let number2 = interaction.message.content
        let number1 = number2.replace('**', '')
        let number = number1.replace('**', '')
        let member = interaction.guild.members.cache.get(db.database.get(String(number + '-author')))
        let pub = db.database.get(String(number + "-pub"))
        let channel = interaction.guild.channels.cache.get(db.database.get(String(number + "-channel")))

        db.warn.add(String(member.id + "-warns_count"), 1)
        db.warn.set(String(member.id + "-" + db.warn.get(String(member.id + "-warns_count")) + "-warn"), "Publicité posté dans le mauvais salon.")

        db.database.add(String(interaction.member.id + "-verif_count"), 1)
        db.database.add(String("verif_total"), 1)

        if ((db.warn.get(String(member.id + "-warns_count"))) === 5) {
          member.timeout((86400 * 1000), "[" + client.user.username + "]" + " Palier des 5 avertissements atteint !")

          try {

            var embed = new EmbedBuilder()
              .setColor(`${config.color.color}`)
              .setImage("https://images-ext-2.discordapp.net/external/hxUtwhmwwv7dmafrt5rvn5yGUokngUnOaOPf50vBtZs/https/images-ext-1.discordapp.net/external/yH7KJkAAtf-kVHH5HLRTFcRCI4_zcVQtkYe87xM-a7Y/https/media.discordapp.net/attachments/804596652643844096/925349824612663316/gfgfc.png")
              .setTitle(`${verify.title.text2}`)
              .setFields(
                { name: 'Serveur', value: "`" + interaction.guild.name + "`", inline: false },
                { name: 'Type de sanction', value: "`Avertissement Ecrit`", inline: false },
                { name: 'Salon', value: "`" + channel.name + "`" },
                { name: 'Raison', value: "`Publicité posté dans le mauvais salon. (Mute 1 jour (5 ème avertissement))`", inline: false },
                { name: 'Modérateur', value: "`" + interaction.member.user.tag + "`", inline: false }
              )
              .setTimestamp()

            member.send({ embeds: ([embed]) })

          } catch (err) {

            console.log(chalk.greenBright(err + " | USER NOT FOUND"))
          }


        } else if ((db.warn.get(String(member.id + "-warns_count"))) >= 10) {
          member.timeout((345600 * 1000), "[" + client.user.username + "]" + " Palier des 10 avertissements atteint ou plus !")

          try {

            var embed = new EmbedBuilder()
              .setColor(`${config.color.color}`)
              .setImage("https://images-ext-2.discordapp.net/external/hxUtwhmwwv7dmafrt5rvn5yGUokngUnOaOPf50vBtZs/https/images-ext-1.discordapp.net/external/yH7KJkAAtf-kVHH5HLRTFcRCI4_zcVQtkYe87xM-a7Y/https/media.discordapp.net/attachments/804596652643844096/925349824612663316/gfgfc.png")
              .setTitle(`${verify.title.text2}`)
              .setFields(
                { name: 'Serveur', value: "`" + interaction.guild.name + "`", inline: false },
                { name: 'Type de sanction', value: "`Avertissement Ecrit`", inline: false },
                { name: 'Salon', value: "`" + channel.name + "`" },
                { name: 'Raison', value: "`Publicité posté dans le mauvais salon. (Mute 1 jour (5 ème avertissement))`", inline: false },
                { name: 'Modérateur', value: "`" + interaction.member.user.tag + "`", inline: false }
              )
              .setTimestamp()

            member.send({ embeds: ([embed]) })

          } catch (err) {

            console.log(chalk.greenBright(err + " | USER NOT FOUND"))
          }


        }

        interaction.message.delete()

        try {

          var embed = new EmbedBuilder()
            .setTitle(`${emoji.wrong}${verify.title.text4}`)
            .setColor(`${config.color.color_error}`)
            .setDescription(pub + '\n\n\n')
            .setFields(
              { name: 'Utilisateur', value: "<@" + member.id + "> \n *`" + member.user.username + "`*", inline: true },
              { name: 'Salon', value: "<#" + channel.id + "> \n *`" + channel.name + "`*", inline: true },
              { name: 'Modérateur', value: "<@" + interaction.member.id + "> \n *`" + interaction.member.id + "`*" },
              { name: 'Raison', value: "`Publicité posté dans le mauvais salon.`", inline: false }
            )

          interaction.guild.channels.cache.get(db.database.get(String("channel_logs_verif"))).send({ embeds: ([embed]) })

        } catch (err) {

          console.log(chalk.redBright(err + " | CHANNEL LOGS NOT FOUNT"))
        }

        try {

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color}`)
            .setImage("https://images-ext-2.discordapp.net/external/hxUtwhmwwv7dmafrt5rvn5yGUokngUnOaOPf50vBtZs/https/images-ext-1.discordapp.net/external/yH7KJkAAtf-kVHH5HLRTFcRCI4_zcVQtkYe87xM-a7Y/https/media.discordapp.net/attachments/804596652643844096/925349824612663316/gfgfc.png")
            .setTitle(`${verify.title.text2}`)
            .setFields(
              { name: 'Serveur', value: "`" + interaction.guild.name + "`", inline: false },
              { name: 'Type de sanction', value: "`Avertissement Ecrit`", inline: false },
              { name: 'Salon', value: "`" + channel.name + "`" },
              { name: 'Raison', value: "`Publicité posté dans le mauvais salon.`", inline: false },
              { name: 'Modérateur', value: "`" + interaction.member.user.tag + "`", inline: false }
            )
            .setTimestamp()

          member.send({ embeds: ([embed]) })

        } catch (err) {

          console.log(chalk.greenBright(err + " | USER NOT FOUND"))
        }

      } else if ((interaction.values[0]) === "htos_sanction") {

        let number2 = interaction.message.content
        let number1 = number2.replace('**', '')
        let number = number1.replace('**', '')
        let member = interaction.guild.members.cache.get(db.database.get(String(number + '-author')))
        let pub = db.database.get(String(number + "-pub"))
        let channel = interaction.guild.channels.cache.get(db.database.get(String(number + "-channel")))

        db.warn.add(String(member.id + "-warns_count"), 1)
        db.warn.set(String(member.id + "-" + db.warn.get(String(member.id + "-warns_count")) + "-warn"), "Publicité ne respectant pas le règlement du serveur ou les TOS Discord.")

        db.database.add(String(interaction.member.id + "-verif_count"), 1)
        db.database.add(String("verif_total"), 1)



        if ((db.warn.get(String(member.id + "-warns_count"))) === 5) {
          member.timeout((86400 * 1000), "[" + client.user.username + "]" + " Palier des 5 avertissements atteint !")

          try {

            var embed = new EmbedBuilder()
              .setColor(`${config.color.color}`)
              .setImage("https://images-ext-2.discordapp.net/external/hxUtwhmwwv7dmafrt5rvn5yGUokngUnOaOPf50vBtZs/https/images-ext-1.discordapp.net/external/yH7KJkAAtf-kVHH5HLRTFcRCI4_zcVQtkYe87xM-a7Y/https/media.discordapp.net/attachments/804596652643844096/925349824612663316/gfgfc.png")
              .setTitle(`${verify.title.text2}`)
              .setFields(
                { name: 'Serveur', value: "`" + interaction.guild.name + "`", inline: false },
                { name: 'Type de sanction', value: "`Avertissement Ecrit`", inline: false },
                { name: 'Salon', value: "`" + channel.name + "`" },
                { name: 'Raison', value: "`Publicité ne respectant pas le règlement du serveur ou les TOS Discord. (Mute 1 jour (5 ème avertissement))`", inline: false },
                { name: 'Modérateur', value: "`" + interaction.member.user.tag + "`", inline: false }
              )
              .setTimestamp()

            member.send({ embeds: ([embed]) })

          } catch (err) {

            console.log(chalk.greenBright(err + " | USER NOT FOUND"))
          }


        } else if ((db.warn.get(String(member.id + "-warns_count"))) >= 10) {
          member.timeout((345600 * 1000), "[" + client.user.username + "]" + " Palier des 10 avertissements atteint ou plus !")

          try {

            var embed = new EmbedBuilder()
              .setColor(`${config.color.color}`)
              .setImage("https://images-ext-2.discordapp.net/external/hxUtwhmwwv7dmafrt5rvn5yGUokngUnOaOPf50vBtZs/https/images-ext-1.discordapp.net/external/yH7KJkAAtf-kVHH5HLRTFcRCI4_zcVQtkYe87xM-a7Y/https/media.discordapp.net/attachments/804596652643844096/925349824612663316/gfgfc.png")
              .setTitle(`${verify.title.text2}`)
              .setFields(
                { name: 'Serveur', value: "`" + interaction.guild.name + "`", inline: false },
                { name: 'Type de sanction', value: "`Avertissement Ecrit`", inline: false },
                { name: 'Salon', value: "`" + channel.name + "`" },
                { name: 'Raison', value: "`Publicité ne respectant pas le règlement du serveur ou les TOS Discord. (Mute 4 jours (10 ème avertissement ou plus))`", inline: false }
              )
              .setTimestamp()

            member.send({ embeds: ([embed]) })

          } catch (err) {

            console.log(chalk.greenBright(err + " | USER NOT FOUND"))
          }


        }

        interaction.message.delete()

        try {

          var embed = new EmbedBuilder()
            .setTitle(`${emoji.wrong}${verify.title.text4}`)
            .setColor(`${config.color.color_error}`)
            .setDescription(pub + '\n\n\n')
            .setFields(
              { name: 'Utilisateur', value: "<@" + member.id + "> \n *`" + member.user.username + "`*", inline: true },
              { name: 'Salon', value: "<#" + channel.id + "> \n *`" + channel.name + "`*", inline: true },
              { name: 'Modérateur', value: "<@" + interaction.member.id + "> \n *`" + interaction.member.id + "`*" },
              { name: 'Raison', value: "`Publicité ne respectant pas le règlement du serveur ou les TOS Discord.`", inline: false }
            )

          interaction.guild.channels.cache.get(db.database.get(String("channel_logs_verif"))).send({ embeds: ([embed]) })

        } catch (err) {

          console.log(chalk.redBright(err + " | CHANNEL LOGS NOT FOUNT"))
        }

        try {

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color}`)
            .setImage("https://images-ext-2.discordapp.net/external/hxUtwhmwwv7dmafrt5rvn5yGUokngUnOaOPf50vBtZs/https/images-ext-1.discordapp.net/external/yH7KJkAAtf-kVHH5HLRTFcRCI4_zcVQtkYe87xM-a7Y/https/media.discordapp.net/attachments/804596652643844096/925349824612663316/gfgfc.png")
            .setTitle(`${verify.title.text2}`)
            .setFields(
              { name: 'Serveur', value: "`" + interaction.guild.name + "`", inline: false },
              { name: 'Type de sanction', value: "`Avertissement Ecrit`", inline: false },
              { name: 'Salon', value: "`" + channel.name + "`" },
              { name: 'Raison', value: "`Publicité ne respectant pas le règlement du serveur ou les TOS Discord.`", inline: false },
              { name: 'Modérateur', value: "`" + interaction.member.user.tag + "`", inline: false }
            )
            .setTimestamp()

          member.send({ embeds: ([embed]) })

        } catch (err) {

          console.log(chalk.greenBright(err + " | USER NOT FOUND"))
        }



      } else if ((interaction.values[0]) === "pubsd_sanction") {

        let number2 = interaction.message.content
        let number1 = number2.replace('**', '')
        let number = number1.replace('**', '')
        let member = interaction.guild.members.cache.get(db.database.get(String(number + '-author')))
        let pub = db.database.get(String(number + "-pub"))
        let channel = interaction.guild.channels.cache.get(db.database.get(String(number + "-channel")))

        db.warn.add(String(member.id + "-warns_count"), 1)
        db.warn.set(String(member.id + "-" + db.warn.get(String(member.id + "-warns_count")) + "-warn"), "Publicité sans description.")

        db.database.add(String(interaction.member.id + "-verif_count"), 1)
        db.database.add(String("verif_total"), 1)

        if ((db.warn.get(String(member.id + "-warns_count"))) === 5) {
          member.timeout((86400 * 1000), "[" + client.user.username + "]" + " Palier des 5 avertissements atteint !")

          try {

            var embed = new EmbedBuilder()
              .setColor(`${config.color.color}`)
              .setImage("https://images-ext-2.discordapp.net/external/hxUtwhmwwv7dmafrt5rvn5yGUokngUnOaOPf50vBtZs/https/images-ext-1.discordapp.net/external/yH7KJkAAtf-kVHH5HLRTFcRCI4_zcVQtkYe87xM-a7Y/https/media.discordapp.net/attachments/804596652643844096/925349824612663316/gfgfc.png")
              .setTitle(`${verify.title.text2}`)
              .setFields(
                { name: 'Serveur', value: "`" + interaction.guild.name + "`", inline: false },
                { name: 'Type de sanction', value: "`Avertissement Ecrit`", inline: false },
                { name: 'Salon', value: "`" + channel.name + "`" },
                { name: 'Raison', value: "`Publicité sans description. (Mute 1 jour (5 ème avertissement))`", inline: false },
                { name: 'Modérateur', value: "`" + interaction.member.user.tag + "`", inline: false }
              )
              .setTimestamp()

            member.send({ embeds: ([embed]) })

          } catch (err) {

            console.log(chalk.greenBright(err + " | USER NOT FOUND"))
          }


        } else if ((db.warn.get(String(member.id + "-warns_count"))) >= 10) {
          member.timeout((345600 * 1000), "[" + client.user.username + "]" + " Palier des 10 avertissements atteint ou plus !")

          try {

            var embed = new EmbedBuilder()
              .setColor(`${config.color.color}`)
              .setImage("https://images-ext-2.discordapp.net/external/hxUtwhmwwv7dmafrt5rvn5yGUokngUnOaOPf50vBtZs/https/images-ext-1.discordapp.net/external/yH7KJkAAtf-kVHH5HLRTFcRCI4_zcVQtkYe87xM-a7Y/https/media.discordapp.net/attachments/804596652643844096/925349824612663316/gfgfc.png")
              .setTitle(`${verify.title.text2}`)
              .setFields(
                { name: 'Serveur', value: "`" + interaction.guild.name + "`", inline: false },
                { name: 'Type de sanction', value: "`Avertissement Ecrit`", inline: false },
                { name: 'Salon', value: "`" + channel.name + "`" },
                { name: 'Raison', value: "`Publicité sans description. (Mute 4 jours (10 ème avertissement ou plus))`", inline: false },
                { name: 'Modérateur', value: "`" + interaction.member.user.tag + "`", inline: false }
              )
              .setTimestamp()

            member.send({ embeds: ([embed]) })

          } catch (err) {

            console.log(chalk.greenBright(err + " | USER NOT FOUND"))
          }


        }

        interaction.message.delete()

        try {

          var embed = new EmbedBuilder()
            .setTitle(`${emoji.wrong}${verify.title.text4}`)
            .setColor(`${config.color.color_error}`)
            .setDescription(pub + '\n\n\n')
            .setFields(
              { name: 'Utilisateur', value: "<@" + member.id + "> \n *`" + member.user.username + "`*", inline: true },
              { name: 'Salon', value: "<#" + channel.id + "> \n *`" + channel.name + "`*", inline: true },
              { name: 'Modérateur', value: "<@" + interaction.member.id + "> \n *`" + interaction.member.id + "`*" },
              { name: 'Raison', value: "`Publicité sans description.`", inline: false }
            )

          interaction.guild.channels.cache.get(db.database.get(String("channel_logs_verif"))).send({ embeds: ([embed]) })

        } catch (err) {

          console.log(chalk.redBright(err + " | CHANNEL LOGS NOT FOUNT"))
        }

        try {

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color}`)
            .setImage("https://images-ext-2.discordapp.net/external/hxUtwhmwwv7dmafrt5rvn5yGUokngUnOaOPf50vBtZs/https/images-ext-1.discordapp.net/external/yH7KJkAAtf-kVHH5HLRTFcRCI4_zcVQtkYe87xM-a7Y/https/media.discordapp.net/attachments/804596652643844096/925349824612663316/gfgfc.png")
            .setTitle(`${verify.title.text2}`)
            .setFields(
              { name: 'Serveur', value: "`" + interaction.guild.name + "`", inline: false },
              { name: 'Type de sanction', value: "`Avertissement Ecrit`", inline: false },
              { name: 'Salon', value: "`" + channel.name + "`" },
              { name: 'Raison', value: "`Publicité sans description.`", inline: false },
              { name: 'Modérateur', value: "`" + interaction.member.user.tag + "`", inline: false }
            )
            .setTimestamp()

          member.send({ embeds: ([embed]) })

        } catch (err) {

          console.log(chalk.greenBright(err + " | USER NOT FOUND"))
        }



      } else if ((interaction.values[0]) === "li_sanction") {

        let number2 = interaction.message.content
        let number1 = number2.replace('**', '')
        let number = number1.replace('**', '')
        let member = interaction.guild.members.cache.get(db.database.get(String(number + '-author')))
        let pub = db.database.get(String(number + "-pub"))
        let channel = interaction.guild.channels.cache.get(db.database.get(String(number + "-channel")))

        db.warn.add(String(member.id + "-warns_count"), 1)
        db.warn.set(String(member.id + "-" + db.warn.get(String(member.id + "-warns_count")) + "-warn"), "Lien d'invitation invalide.")

        db.database.add(String(interaction.member.id + "-verif_count"), 1)
        db.database.add(String("verif_total"), 1)

        if ((db.warn.get(String(member.id + "-warns_count"))) === 5) {
          member.timeout((86400 * 1000), "[" + client.user.username + "]" + " Palier des 5 avertissements atteint !")

          try {

            var embed = new EmbedBuilder()
              .setColor(`${config.color.color}`)
              .setImage("https://images-ext-2.discordapp.net/external/hxUtwhmwwv7dmafrt5rvn5yGUokngUnOaOPf50vBtZs/https/images-ext-1.discordapp.net/external/yH7KJkAAtf-kVHH5HLRTFcRCI4_zcVQtkYe87xM-a7Y/https/media.discordapp.net/attachments/804596652643844096/925349824612663316/gfgfc.png")
              .setTitle(`${verify.title.text2}`)
              .setFields(
                { name: 'Serveur', value: "`" + interaction.guild.name + "`", inline: false },
                { name: 'Type de sanction', value: "`Avertissement Ecrit`", inline: false },
                { name: 'Salon', value: "`" + channel.name + "`" },
                { name: 'Raison', value: "`Lien d'invitation invalide. (Mute 1 jour (5 ème avertissement))`", inline: false },
                { name: 'Modérateur', value: "`" + interaction.member.user.tag + "`", inline: false }
              )
              .setTimestamp()

            member.send({ embeds: ([embed]) })

          } catch (err) {

            console.log(chalk.greenBright(err + " | USER NOT FOUND"))
          }


        } else if ((db.warn.get(String(member.id + "-warns_count"))) >= 10) {
          member.timeout((345600 * 1000), "[" + client.user.username + "]" + " Palier des 10 avertissements atteint ou plus !")

          try {

            var embed = new EmbedBuilder()
              .setColor(`${config.color.color}`)
              .setImage("https://images-ext-2.discordapp.net/external/hxUtwhmwwv7dmafrt5rvn5yGUokngUnOaOPf50vBtZs/https/images-ext-1.discordapp.net/external/yH7KJkAAtf-kVHH5HLRTFcRCI4_zcVQtkYe87xM-a7Y/https/media.discordapp.net/attachments/804596652643844096/925349824612663316/gfgfc.png")
              .setTitle(`${verify.title.text2}`)
              .setFields(
                { name: 'Serveur', value: "`" + interaction.guild.name + "`", inline: false },
                { name: 'Type de sanction', value: "`Avertissement Ecrit`", inline: false },
                { name: 'Salon', value: "`" + channel.name + "`" },
                { name: 'Raison', value: "`Lien d'invitation invalide. (Mute 4 jours (10 ème avertissement ou plus))`", inline: false },
                { name: 'Modérateur', value: "`" + interaction.member.user.tag + "`", inline: false }
              )
              .setTimestamp()

            member.send({ embeds: ([embed]) })

          } catch (err) {

            console.log(chalk.greenBright(err + " | USER NOT FOUND"))
          }


        }

        interaction.message.delete()

        try {

          var embed = new EmbedBuilder()
            .setTitle(`${emoji.wrong}${verify.title.text4}`)
            .setColor(`${config.color.color_error}`)
            .setDescription(pub + '\n\n\n')
            .setFields(
              { name: 'Utilisateur', value: "<@" + member.id + "> \n *`" + member.user.username + "`*", inline: true },
              { name: 'Salon', value: "<#" + channel.id + "> \n *`" + channel.name + "`*", inline: true },
              { name: 'Modérateur', value: "<@" + interaction.member.id + "> \n *`" + interaction.member.id + "`*" },
              { name: 'Raison', value: "`Lien d'invitation invalide.`", inline: false }
            )

          interaction.guild.channels.cache.get(db.database.get(String("channel_logs_verif"))).send({ embeds: ([embed]) })

        } catch (err) {

          console.log(chalk.redBright(err + " | CHANNEL LOGS NOT FOUNT"))
        }

        try {

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color}`)
            .setImage("https://images-ext-2.discordapp.net/external/hxUtwhmwwv7dmafrt5rvn5yGUokngUnOaOPf50vBtZs/https/images-ext-1.discordapp.net/external/yH7KJkAAtf-kVHH5HLRTFcRCI4_zcVQtkYe87xM-a7Y/https/media.discordapp.net/attachments/804596652643844096/925349824612663316/gfgfc.png")
            .setTitle(`${verify.title.text2}`)
            .setFields(
              { name: 'Serveur', value: "`" + interaction.guild.name + "`", inline: false },
              { name: 'Type de sanction', value: "`Avertissement Ecrit`", inline: false },
              { name: 'Salon', value: "`" + channel.name + "`" },
              { name: 'Raison', value: "`Lien d'invitation invalide.`", inline: false },
              { name: 'Modérateur', value: "`" + interaction.member.user.tag + "`", inline: false }
            )
            .setTimestamp()

          member.send({ embeds: ([embed]) })

        } catch (err) {

          console.log(chalk.greenBright(err + " | USER NOT FOUND"))
        }



      } else if ((interaction.values[0]) === "persoa_sanction") {

        let number2 = interaction.message.content
        let number1 = number2.replace('**', '')
        let number = number1.replace('**', '')
        let member = interaction.guild.members.cache.get(db.database.get(String(number + '-author')))
        let pub = db.database.get(String(number + "-pub"))
        let channel = interaction.guild.channels.cache.get(db.database.get(String(number + "-channel")))

        interaction.deferUpdate()
        interaction.channel.send(`${emoji.pen}${embedm.description.text1}`).then(async (question) => {
          (interaction.channel).awaitMessages({
            filter: (m) => m.author.id === interaction.member.id,
            time: (500 * 60 * 100),
            max: 1
          }).then(async (collected) => {
            reply = collected.first().content;
            message = collected.first();
            message.delete()
            question.delete()
            await delay(Number(1) * 1000)
            if (!(reply === "cancel")) {


              db.database.set(String(number + '-warn_reason'), (reply));

              db.warn.add(String(member.id + "-warns_count"), 1)
              db.warn.set(String(member.id + "-" + db.warn.get(String(member.id + "-warns_count")) + "-warn"), db.database.get(String(number + '-warn_reason')))

              db.database.add(String(interaction.member.id + "-verif_count"), 1)
              db.database.add(String("verif_total"), 1)

              if ((db.warn.get(String(member.id + "-warns_count"))) === 5) {
                member.timeout((86400 * 1000), "[" + client.user.username + "]" + " Palier des 5 avertissements atteint !")

                try {

                  var embed = new EmbedBuilder()
                    .setColor(`${config.color.color}`)
                    .setImage("https://images-ext-2.discordapp.net/external/hxUtwhmwwv7dmafrt5rvn5yGUokngUnOaOPf50vBtZs/https/images-ext-1.discordapp.net/external/yH7KJkAAtf-kVHH5HLRTFcRCI4_zcVQtkYe87xM-a7Y/https/media.discordapp.net/attachments/804596652643844096/925349824612663316/gfgfc.png")
                    .setTitle(`${verify.title.text2}`)
                    .setFields(
                      { name: 'Serveur', value: "`" + interaction.guild.name + "`", inline: false },
                      { name: 'Type de sanction', value: "`Avertissement Ecrit`", inline: false },
                      { name: 'Salon', value: "`" + channel.name + "`" },
                      { name: 'Raison', value: "`" + db.database.get(String(number + '-warn_reason')) + " (Mute 1 jour (5 ème avertissement))" + "`", inline: false },
                      { name: 'Modérateur', value: "`" + interaction.member.user.tag + "`", inline: false }
                    )
                    .setTimestamp()

                  member.send({ embeds: ([embed]) })

                } catch (err) {

                  console.log(chalk.greenBright(err + " | USER NOT FOUND"))
                }


              } else if ((db.warn.get(String(member.id + "-warns_count"))) >= 10) {
                member.timeout((345600 * 1000), "[" + client.user.username + "]" + " Palier des 10 avertissements atteint ou plus !")

                try {

                  var embed = new EmbedBuilder()
                    .setColor(`${config.color.color}`)
                    .setImage("https://images-ext-2.discordapp.net/external/hxUtwhmwwv7dmafrt5rvn5yGUokngUnOaOPf50vBtZs/https/images-ext-1.discordapp.net/external/yH7KJkAAtf-kVHH5HLRTFcRCI4_zcVQtkYe87xM-a7Y/https/media.discordapp.net/attachments/804596652643844096/925349824612663316/gfgfc.png")
                    .setTitle(`}${verify.title.text2}`)
                    .setFields(
                      { name: 'Serveur', value: "`" + interaction.guild.name + "`", inline: false },
                      { name: 'Type de sanction', value: "`Avertissement Ecrit`", inline: false },
                      { name: 'Salon', value: "`" + channel.name + "`" },
                      { name: 'Raison', value: "`" + db.database.get(String(number + '-warn_reason')) + " (Mute 4 jours (10 ème avertissement ou plus))" + "`", inline: false },
                      { name: 'Modérateur', value: "`" + interaction.member.user.tag + "`", inline: false }
                    )
                    .setTimestamp()

                  member.send({ embeds: ([embed]) })

                } catch (err) {

                  console.log(chalk.greenBright(err + " | USER NOT FOUND"))
                }


              }

              interaction.message.delete()

              try {

                var embed = new EmbedBuilder()
                  .setTitle(`${emoji.wrong}${verify.title.text4}`)
                  .setColor(`${config.color.color_error}`)
                  .setDescription(pub + '\n\n\n')
                  .setFields(
                    { name: 'Utilisateur', value: "<@" + member.id + "> \n *`" + member.user.username + "`*", inline: true },
                    { name: 'Salon', value: "<#" + channel.id + "> \n *`" + channel.name + "`*", inline: true },
                    { name: 'Modérateur', value: "<@" + interaction.member.id + "> \n *`" + interaction.member.id + "`*" },
                    { name: 'Raison', value: "`" + reply + "`", inline: false }
                  )

                interaction.guild.channels.cache.get(db.database.get(String("channel_logs_verif"))).send({ embeds: ([embed]) })

              } catch (err) {

                console.log(chalk.redBright(err + " | CHANNEL LOGS NOT FOUNT"))
              }

              try {

                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color}`)
                  .setImage("https://images-ext-2.discordapp.net/external/hxUtwhmwwv7dmafrt5rvn5yGUokngUnOaOPf50vBtZs/https/images-ext-1.discordapp.net/external/yH7KJkAAtf-kVHH5HLRTFcRCI4_zcVQtkYe87xM-a7Y/https/media.discordapp.net/attachments/804596652643844096/925349824612663316/gfgfc.png")
                  .setTitle(`${verify.title.text2}`)
                  .setFields(
                    { name: 'Serveur', value: "`" + interaction.guild.name + "`", inline: false },
                    { name: 'Type de sanction', value: "`Avertissement Ecrit`", inline: false },
                    { name: 'Salon', value: "`" + channel.name + "`" },
                    { name: 'Raison', value: "`" + db.database.get(String(number + '-warn_reason')) + "`", inline: false },
                    { name: 'Modérateur', value: "`" + interaction.member.user.tag + "`", inline: false }
                  )
                  .setTimestamp()

                member.send({ embeds: ([embed]) })

              } catch (err) {

                console.log(chalk.greenBright(err + " | USER NOT FOUND"))
              }

            }
          })
        })


      }
    }
  }

  if (interaction.customId === "verif_notgood_refused") {
    if (interaction.member.roles.cache.has(db.database.get(String("rank-accès_verif_add")))) {

      let number2 = interaction.message.content
      let number1 = number2.replace('**', '')
      let number = number1.replace('**', '')
      let member = interaction.guild.members.cache.get(db.database.get(String(number + '-author')))
      let pub = db.database.get(String(number + "-pub"))

      const menu_verif_notgood = new ActionRowBuilder()
        .addComponents(
          new SelectMenuBuilder()
            .setCustomId('menu_verif_notgood')
            .setPlaceholder('Ajouter un serveur à une ligne.')
            .addOptions(
              {
                label: 'Publicité dans le mauvais salon.',
                description: 'Avertir l\'auteur de la publicité.',
                value: 'mchannel_sanction',
              },
              {
                label: 'Publicité hors TOS/Règlement.',
                value: 'htos_sanction',
              },
              {
                label: 'Publicité sans description.',
                value: 'pubsd_sanction',
              },
              {
                label: 'Lien d\'invitation invalide.',
                value: 'li_sanction',
              },
              {
                label: 'Raison d\'avertissement personnalisé.',
                description: 'Avertir cet utilisateur pour une raison personnalisé.',
                value: 'persoa_sanction',
              },
              {
                label: '↩️',
                value: 'button_verif_retour_verif',
              },

            )
        )

      interaction.message.edit({ components: [menu_verif_notgood] })

      interaction.deferUpdate()

    } else {

      var embed = new EmbedBuilder()
        .setColor(`${config.color.color_error}`)
        .setDescription(`${emoji.wrong}${verify.description.text3}` + (interaction.guild.roles.cache.get(db.database.get(String("rank-accès_verif_add")))).name + `${verify.description.text4}`)

      interaction.reply({ embeds: ([embed]), ephemeral: true })
    }
  }

  if (interaction.customId === "menu_verif_notgood") {
    if ((interaction.values[0]) === "button_verif_retour_verif") {
      if (interaction.member.roles.cache.has(db.database.get(String("rank-accès_verif_add")))) {

        let number2 = interaction.message.content
        let number1 = number2.replace('**', '')
        let number = number1.replace('**', '')
        let member = interaction.guild.members.cache.get(db.database.get(String(number + '-author')))
        let pub = db.database.get(String(number + "-pub"))
        let channel = interaction.guild.channels.cache.get(db.database.get(String(number + "-channel")))


        var embed = new EmbedBuilder()
          .setTitle(`${emoji.zoom}${verify.title.text1}`)
          .setColor(`${config.color.color_verif_stop}`)
          .setDescription(pub + '\n\n\n')
          .setFields(
            { name: 'Utilisateur', value: "<@" + member.id + "> \n *`" + member.user.username + "`*", inline: true },
            { name: 'Salon', value: "<#" + channel.id + "> \n *`" + channel.name + "`*", inline: true }
          )

        const verif_good_accept = new ButtonBuilder()
          .setStyle(ButtonStyle.Success)
          .setLabel("Accepter")
          .setCustomId("verif_good_accept")

        const verif_notgood_refused = new ButtonBuilder()
          .setStyle(ButtonStyle.Danger)
          .setLabel("Refuser")
          .setCustomId("verif_notgood_refused")

        const verif_poubelle = new ButtonBuilder()
          .setStyle(ButtonStyle.Secondary)
          .setLabel("Jeter")
          .setCustomId("verif_poubelle")

        const menu_verif_embed = new ActionRowBuilder()
          .addComponents(verif_good_accept)
          .addComponents(verif_notgood_refused)
          .addComponents(verif_poubelle)

        interaction.message.edit({ embeds: ([embed]), components: [menu_verif_embed] })

        interaction.deferUpdate()

      }
    }
  }

  if (interaction.customId === "verif_poubelle") {
    if (interaction.member.roles.cache.has(db.database.get(String("rank-accès_verif_add")))) {

      let number2 = interaction.message.content
      let number1 = number2.replace('**', '')
      let number = number1.replace('**', '')
      let member = interaction.guild.members.cache.get(db.database.get(String(number + '-author')))
      let pub = db.database.get(String(number + "-pub"))
      let channel = interaction.guild.channels.cache.get(db.database.get(String(number + "-channel")))

      db.database.add(String(interaction.member.id + "-verif_count"), 1)
      db.database.add(String("verif_total"), 1)

      interaction.message.delete()


      var embed = new EmbedBuilder()
        .setTitle(`${emoji.bin}${verify.title.text5}`)
        .setColor(`${config.color.color_verif_bin}`)
        .setDescription(pub + '\n\n\n')
        .setFields(
          { name: 'Utilisateur', value: "<@" + member.id + "> \n *`" + member.user.username + "`*", inline: true },
          { name: 'Salon', value: "<#" + channel.id + "> \n *`" + channel.name + "`*", inline: true },
          { name: 'Modérateur', value: "<@" + interaction.member.id + "> \n *`" + interaction.member.id + "`*" }
        )

      interaction.guild.channels.cache.get(db.database.get(String("channel_logs_verif"))).send({ embeds: ([embed]) })



    } else {

      var embed = new EmbedBuilder()
        .setColor(`${config.color.color_error}`)
        .setDescription(`${emoji.wrong}${verify.description.text3}` + (interaction.guild.roles.cache.get(db.database.get(String("rank-accès_verif_add")))).name + `${verify.description.text4}`)

      interaction.reply({ embeds: ([embed]), ephemeral: true })
    }
  }



  if (interaction.customId === "verif_good_accept") {
    if (interaction.member.roles.cache.has(db.database.get(String("rank-accès_verif_add")))) {

      try {
        let number2 = interaction.message.content
        let number1 = number2.replace('**', '')
        let number = number1.replace('**', '')
        let member = interaction.guild.members.cache.get(db.database.get(String(number + '-author')))
        let pub = db.database.get(String(number + "-pub"))
        let channel = interaction.guild.channels.cache.get(db.database.get(String(number + "-channel")))

        db.database.add(String(interaction.member.id + "-verif_count"), 1)
        db.database.add(String("verif_total"), 1)

        await interaction.guild.channels.cache.get(db.database.get(String(number + '-channel'))).bulkDelete(1)


        await interaction.guild.channels.cache.get(db.database.get(String(number + '-channel'))).send({ content: "**Publicité postée par** *`" + member.user.username + " / " + member.id + "`*\n\n" + pub })

        if ((db.database.get(String("image_embed"))).includes("http")) {

          var embed = new EmbedBuilder()
            .setColor(db.database.get(String("color_embed")))
            .setTitle(db.database.get(String("title_embed")))
            .setDescription(db.database.get(String("description_embed")))
            .setImage(db.database.get(String("image_embed")))

        } else {

          var embed = new EmbedBuilder()
            .setColor(db.database.get(String("color_embed")))
            .setTitle(db.database.get(String("title_embed")))
            .setDescription(db.database.get(String("description_embed")))

        }

        await interaction.guild.channels.cache.get(db.database.get(String(number + '-channel'))).send({ embeds: ([embed]) })


        interaction.message.delete()


        var embed = new EmbedBuilder()
          .setTitle(`${emoji.tick}${verify.title.text3}`)
          .setColor(`${config.color.color_good}`)
          .setDescription(pub + '\n\n\n')
          .setFields(
            { name: 'Utilisateur', value: "<@" + member.id + "> \n *`" + member.user.username + "`*", inline: true },
            { name: 'Salon', value: "<#" + channel.id + "> \n *`" + channel.name + "`*", inline: true },
            { name: 'Modérateur', value: "<@" + interaction.member.id + "> \n *`" + interaction.member.id + "`*" }
          )

        interaction.guild.channels.cache.get(db.database.get(String("channel_logs_verif"))).send({ embeds: ([embed]) })

      } catch {
        console.log(chalk.redBright("L'utilisateur a quitté le serveur !"))
        interaction.message.delete()
      }
    } else {

      var embed = new EmbedBuilder()
        .setColor(`${config.color.color_error}`)
        .setDescription(`${emoji.wrong}${verify.description.text3}` + (interaction.guild.roles.cache.get(db.database.get(String("rank-accès_verif_add")))).name + `${verify.description.text4}`)

      interaction.reply({ embeds: ([embed]), ephemeral: true })
    }
  }

  if (interaction.customId === "pub_modal") {
    if ((db.verif.has(interaction.channelId)) && ((db.verif.get(String(interaction.channelId))) === "verif")) {
      if (((db.database.get(String("channel_verif")) === "*`Non défini`*") || (db.database.get(String("channel_verif_simple")) === "*`Non défini`*") || (db.database.get(String("channel_logs_verif")) === "*`Non défini`*") || (db.database.get(String("channel_logs_verif_simple")) === "*`Non défini`*") || (db.database.get(String("rank-accès_verif_add")) === "*`Non défini`*") || (db.database.get(String("rank-accès_verif_simple")) === "*`Non défini`*"))) {


        var embed = new EmbedBuilder()
          .setColor(`${config.color.color_error}`)
          .setDescription(`${emoji.wrong}${verify.description.text11}`)

        interaction.reply({ embeds: ([embed]), ephemeral: true })

      } else {

        let response = interaction.fields.getTextInputValue('pub_send')
        let member = interaction.member
        let channel = interaction.channel

        db.database.add(String("verif_counter"), 1)

        if (response.includes(("publicitaire") || ("publicité") || ("pub") || ("advertising"))) {
          db.database.set(String(db.database.get(String("verif_counter") + "-theme")), "PUBLICITAIRE")
        } else if (response.includes(("communautaire") || ("commu") || ("community") || ("discussions") || ("discuter"))) {
          db.database.set(String(db.database.get(String("verif_counter") + "-theme")), "COMMUNAUTAIRE")
        } else if (response.includes(("gaming") || ("jeux") || ("jeu") || ("game") || ("rp") || ("roleplay"))) {
          db.database.set(String(db.database.get(String("verif_counter") + "-theme")), "GAMING")
        } else if (response.includes(("art") || ("artist") || ("artistique") || ("création") || ("create") || ("creation"))) {
          db.database.set(String(db.database.get(String("verif_counter") + "-theme")), "ARTISTIQUE")
        } else if (response.includes(("youtu") || ("youtube") || ("twitch") || ("chaîne") || ("live") || ("tv"))) {
          db.database.set(String(db.database.get(String("verif_counter") + "-theme")), "VIDEOS/STREAMS")
        } else if (response.includes(("web") || ("site") || ("internet") || ("hebergement") || ("host"))) {
          db.database.set(String(db.database.get(String("verif_counter") + "-theme")), "SITE WEB")
        }

        cooldown = db.verif.get(String(channel.id + "-cooldown"))
        time = (Math.floor(new Date().getTime() / 1000))

        await db.database.set(String(member.id + "-" + channel.id + "-cooldown_user"), `${time + cooldown}`)

        await db.database.set(String(String(db.database.get(String("verif_counter")) + "-pub")), response)
        await db.database.set(String(String(db.database.get(String("verif_counter")) + "-author")), member.id)
        await db.database.set(String(String(db.database.get(String("verif_counter")) + "-channel")), channel.id)

        var embed = new EmbedBuilder()
          .setTitle(`${emoji.zoom}${verify.title.text1}`)
          .setColor(`${config.color.color_verif_stop}`)
          .setDescription(response + '\n\n\n')
          .setFields(
            { name: 'Utilisateur', value: "<@" + member.id + "> \n *`" + member.user.username + "`*", inline: true },
            { name: 'Salon', value: "<#" + channel.id + "> \n *`" + channel.name + "`*", inline: true }
          )

        const verif_good_accept = new ButtonBuilder()
          .setStyle(ButtonStyle.Success)
          .setLabel("Accepter")
          .setCustomId("verif_good_accept")

        const verif_notgood_refused = new ButtonBuilder()
          .setStyle(ButtonStyle.Danger)
          .setLabel("Refuser")
          .setCustomId("verif_notgood_refused")

        const verif_poubelle = new ButtonBuilder()
          .setStyle(ButtonStyle.Secondary)
          .setLabel("Jeter")
          .setCustomId("verif_poubelle")

        const menu_verif_embed = new ActionRowBuilder()
          .addComponents(verif_good_accept)
          .addComponents(verif_notgood_refused)
          .addComponents(verif_poubelle)

        interaction.guild.channels.cache.get(db.database.get(String("channel_verif"))).send({ content: "**" + String(db.database.get(String("verif_counter"))) + "**", embeds: ([embed]), components: [menu_verif_embed] })

        var embed = new EmbedBuilder()
          .setColor(`${config.color.color_good}`)
          .setDescription(`${emoji.tick}${verify.description.text2}`)

        interaction.reply({ embeds: ([embed]), ephemeral: true })
      }
    } else {

      var embed = new EmbedBuilder()
        .setColor(`${config.color.color_error}`)
        .setDescription(`${emoji.wrong}${verify.description.text1}`)

      interaction.reply({ embeds: ([embed]), ephemeral: true })

    }
  }


  if (interaction.customId === "send_pub") {
    if (interaction.guildId === server_id) {
      if ((db.module.get(String("verification"))) === "on") {
        if ((db.verif.has(interaction.channelId)) && ((db.verif.get(String(interaction.channelId))) === "verif")) {
          if ((!(db.database.has(String(interaction.member.id + "-" + interaction.channelId + "-cooldown_user")))) || ((db.database.get(String(interaction.member.id + "-" + interaction.channelId + "-cooldown_user"))) <= (Math.floor(new Date().getTime() / 1000)))) {


            const modal = new Discord.ModalBuilder()
              .setCustomId('pub_modal')
              .setTitle('Publicité');

            const pub_info = new Discord.TextInputBuilder()
              .setCustomId('pub_send')
              .setLabel("Veuillez renseigner votre publicité !")
              .setStyle(TextInputStyle.Paragraph);

            const pub_infos = new ActionRowBuilder().addComponents(pub_info);

            modal.addComponents(pub_infos);

            await interaction.showModal(modal);

          } else {

            let cooldown = db.database.get(String(interaction.member.id + "-" + interaction.channelId + "-cooldown_user"))
            let time = (Math.floor(new Date().getTime() / 1000))

            var embed = new EmbedBuilder()
              .setColor(`${config.color.color_error}`)
              .setDescription(`${emoji.wrong}${verify.description.text5}` + `${cooldown - time}${verify.description.text6}`)

            interaction.reply({ embeds: ([embed]), ephemeral: true })
          }

        } else {

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color_error}`)
            .setDescription(`${emoji.wrong}${verify.description.text1}`)

          interaction.reply({ embeds: ([embed]), ephemeral: true })

        }

      } else {
        var embed = new EmbedBuilder()
          .setColor(`${config.color.color_error}`)
          .setDescription(`${emoji.wrong}${general.error.module_activate1}` + ' *`Vérification`* ' + `${general.error.module_activate2}`)

        interaction.reply({ embeds: ([embed]), ephemeral: true })
      }
    }
  }

  if (interaction.commandName === "vérification_remove") {
    if (interaction.guildId === server_id) {
      if (db.module.get(String("verification")) === "on") {
        if ((interaction.member.permissions.has(PermissionsBitField.Flags.Administrator)) || (interaction.member.id === id)) {



          var embed = new EmbedBuilder()
            .setColor(`${config.color.color_verif_stop}`)
            .setDescription(`${emoji.bin}${general.response.verif_add}` + String((interaction.options.getChannel("salon")).name) + `${general.response.verif_remove}`)

          interaction.reply({ embeds: ([embed]) })

          db.verif.delete(String(String((interaction.options.getChannel("salon")).id)))


        } else {
          ////Erreur Perms Admins\\\\

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color_error}`)
            .setDescription(`${emoji.wrong}${general.error.perms_admin}`)

          interaction.reply({
            embeds: ([embed]), ephemeral: true
          })
        }

      } else {
        var embed = new EmbedBuilder()
          .setColor(`${config.color.color_error}`)
          .setDescription(`${emoji.wrong}${general.error.module_activate1}` + ' *`Vérification`* ' + `${general.error.module_activate2}`)

        interaction.reply({ embeds: ([embed]), ephemeral: true })
      }
    } else {

      var embed = new EmbedBuilder()
        .setColor(`${config.color.color_error}`)
        .setDescription(`${emoji.wrong}${general.error.server_follow}`)

      interaction.reply({ embeds: ([embed]), ephemeral: true })
    }
  }

  if (interaction.commandName === "vérification_add") {
    if (interaction.guildId === server_id) {
      if (db.module.get(String("verification")) === "on") {
        if ((interaction.member.permissions.has(PermissionsBitField.Flags.Administrator)) || (interaction.member.id === id)) {
          if (((db.database.get(String("channel_verif")) === "*`Non défini`*") || (db.database.get(String("channel_verif_simple")) === "*`Non défini`*") || (db.database.get(String("channel_logs_verif")) === "*`Non défini`*") || (db.database.get(String("channel_logs_verif_simple")) === "*`Non défini`*") || (db.database.get(String("rank-accès_verif_add")) === "*`Non défini`*") || (db.database.get(String("rank-accès_verif_simple")) === "*`Non défini`*"))) {

            await interaction.guild.channels.cache.get(String((interaction.options.getChannel("salon")).id)).send({ content: '**`' + interaction.user.tag + '`**' + " a configuré **`" + client.channels.cache.get(reply).name + "`** comme salon publicitaire." })

            var embed = new EmbedBuilder()
              .setColor(`${config.color.color_error}`)
              .setDescription(`${emoji.wrong}${verify.description.text11}`)

            interaction.reply({ embeds: ([embed]), ephemeral: true })

          } else {

            try {


              if ((db.database.get(String("image_embed"))).includes("http")) {

                var embed = new EmbedBuilder()
                  .setColor(db.database.get(String("color_embed")))
                  .setTitle(db.database.get(String("title_embed")))
                  .setDescription(db.database.get(String("description_embed")))
                  .setImage(db.database.get(String("image_embed")))

              } else {

                var embed = new EmbedBuilder()
                  .setColor(db.database.get(String("color_embed")))
                  .setTitle(db.database.get(String("title_embed")))
                  .setDescription(db.database.get(String("description_embed")))

              }

              interaction.guild.channels.cache.get(String((interaction.options.getChannel("salon")).id)).send({ embeds: ([embed]) })

              var embed = new EmbedBuilder()
                .setColor(`${config.color.color_good}`)
                .setDescription(`${emoji.tick}${general.response.verif_add}` + String((interaction.options.getChannel("salon")).name) + `${general.response.verif_add2}`)

              interaction.reply({ embeds: ([embed]) })

              db.verif.set(String(String((interaction.options.getChannel("salon")).id)), "verif")

            } catch (err) {

              var embed = new EmbedBuilder()
                .setColor(`${config.color.color_error}`)
                .setDescription(`${emoji.wrong}${general.error.channel_notfound}`)

              interaction.reply({ embeds: ([embed]), ephemeral: true })

            }

          }
        } else {
          ////Erreur Perms Admins\\\\

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color_error}`)
            .setDescription(`${emoji.wrong}${general.error.perms_admin}`)

          interaction.reply({
            embeds: ([embed]), ephemeral: true
          })
        }

      } else {
        var embed = new EmbedBuilder()
          .setColor(`${config.color.color_error}`)
          .setDescription(`${emoji.wrong}${general.error.module_activate1}` + ' *`Vérification`* ' + `${general.error.module_activate2}`)

        interaction.reply({ embeds: ([embed]), ephemeral: true })
      }
    } else {

      var embed = new EmbedBuilder()
        .setColor(`${config.color.color_error}`)
        .setDescription(`${emoji.wrong}${general.error.server_follow}`)

      interaction.reply({ embeds: ([embed]), ephemeral: true })
    }
  }


  if (interaction.commandName === "partenariat_mp") {
    if (interaction.guildId === server_id) {
      if ((db.module.get(String("partenariat_mp"))) === "on") {

        if (!(db.database.has(String("partner_1")))) {
          db.database.set(String("partner_1"), " ")
        }
        if (!(db.database.has(String("partner_2")))) {
          db.database.set(String("partner_2"), " ")
        }
        if (!(db.database.has(String("partner_3")))) {
          db.database.set(String("partner_3"), " ")
        }
        if (!(db.database.has(String("partner_4")))) {
          db.database.set(String("partner_4"), " ")
        }
        if (!(db.database.has(String("partner_5")))) {
          db.database.set(String("partner_5"), " ")
        }
        if (!(db.database.has(String("partner_6")))) {
          db.database.set(String("partner_6"), " ")
        }
        if (!(db.database.has(String("partner_7")))) {
          db.database.set(String("partner_7"), " ")
        }
        if (!(db.database.has(String("partner_8")))) {
          db.database.set(String("partner_8"), " ")
        }
        if (!(db.database.has(String("partner_9")))) {
          db.database.set(String("partner_9"), " ")
        }
        if (!(db.database.has(String("partner_10")))) {
          db.database.set(String("partner_10"), " ")
        }
        if (!(db.database.has(String("partner_11")))) {
          db.database.set(String("partner_11"), " ")
        }
        if (!(db.database.has(String("partner_12")))) {
          db.database.set(String("partner_12"), " ")
        }
        if (!(db.database.has(String("partner_13")))) {
          db.database.set(String("partner_13"), " ")
        }
        if (!(db.database.has(String("partner_14")))) {
          db.database.set(String("partner_14"), " ")
        }
        if (!(db.database.has(String("partner_15")))) {
          db.database.set(String("partner_15"), " ")
        }
        if (!(db.database.has(String("partner_16")))) {
          db.database.set(String("partner_16"), " ")
        }
        if (!(db.database.has(String("partner_17")))) {
          db.database.set(String("partner_17"), " ")
        }
        if (!(db.database.has(String("partner_18")))) {
          db.database.set(String("partner_18"), " ")
        }
        if (!(db.database.has(String("partner_19")))) {
          db.database.set(String("partner_19"), " ")
        }
        if (!(db.database.has(String("partner_20")))) {
          db.database.set(String("partner_20"), " ")
        }
        if (!(db.database.has(String("partner_message")))) {
          db.database.set(String("partner_message"), "**" + interaction.guild.name + " vous présente ses partenaires MP: **")
        }


        if ((interaction.options.getString('action')) === 'viewpartner') {

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color}`)
            .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
            .setTitle(`${emoji.link}${partner.title.text1}`)
            .setDescription(db.database.get(String("partner_message")) + '\n\n ```' +
              "1) " + db.database.get(String("partner_1")) + '\n' +
              "2) " + db.database.get(String("partner_2")) + '\n' +
              "3) " + db.database.get(String("partner_3")) + '\n' +
              "4) " + db.database.get(String("partner_4")) + '\n' +
              "5) " + db.database.get(String("partner_5")) + '\n' +
              "6) " + db.database.get(String("partner_6")) + '\n' +
              "7) " + db.database.get(String("partner_7")) + '\n' +
              "8) " + db.database.get(String("partner_8")) + '\n' +
              "9) " + db.database.get(String("partner_9")) + '\n' +
              "10) " + db.database.get(String("partner_10")) + '\n' +
              "11) " + db.database.get(String("partner_11")) + '\n' +
              "12) " + db.database.get(String("partner_12")) + '\n' +
              "13) " + db.database.get(String("partner_13")) + '\n' +
              "14) " + db.database.get(String("partner_14")) + '\n' +
              "15) " + db.database.get(String("partner_15")) + '\n' +
              "16) " + db.database.get(String("partner_16")) + '\n' +
              "17) " + db.database.get(String("partner_17")) + '\n' +
              "18) " + db.database.get(String("partner_18")) + '\n' +
              "19) " + db.database.get(String("partner_19")) + '\n' +
              "20) " + db.database.get(String("partner_20")) + '\n' + '```')

          const send_partner_test = new ButtonBuilder()
            .setLabel("Envoyer en MP")
            .setStyle(ButtonStyle.Primary)
            .setEmoji(`${emoji.partner}`)
            .setCustomId("send_partner_test")

          const menu_partner_view = new ActionRowBuilder()
            .addComponents(send_partner_test)

          interaction.reply({ embeds: ([embed]), components: [menu_partner_view] })



        } else if ((interaction.options.getString('action')) === 'editlist') {
          if ((interaction.member.permissions.has(PermissionsBitField.Flags.Administrator)) || (interaction.member.id === dev)) {

            var embed = new EmbedBuilder()
              .setColor(`${config.color.color}`)
              .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
              .setTitle(`${emoji.link}${partner.title.text1}`)
              .setDescription(db.database.get(String("partner_message")) + '\n\n ```' +
                "1) " + db.database.get(String("partner_1")) + '\n' +
                "2) " + db.database.get(String("partner_2")) + '\n' +
                "3) " + db.database.get(String("partner_3")) + '\n' +
                "4) " + db.database.get(String("partner_4")) + '\n' +
                "5) " + db.database.get(String("partner_5")) + '\n' +
                "6) " + db.database.get(String("partner_6")) + '\n' +
                "7) " + db.database.get(String("partner_7")) + '\n' +
                "8) " + db.database.get(String("partner_8")) + '\n' +
                "9) " + db.database.get(String("partner_9")) + '\n' +
                "10) " + db.database.get(String("partner_10")) + '\n' +
                "11) " + db.database.get(String("partner_11")) + '\n' +
                "12) " + db.database.get(String("partner_12")) + '\n' +
                "13) " + db.database.get(String("partner_13")) + '\n' +
                "14) " + db.database.get(String("partner_14")) + '\n' +
                "15) " + db.database.get(String("partner_15")) + '\n' +
                "16) " + db.database.get(String("partner_16")) + '\n' +
                "17) " + db.database.get(String("partner_17")) + '\n' +
                "18) " + db.database.get(String("partner_18")) + '\n' +
                "19) " + db.database.get(String("partner_19")) + '\n' +
                "20) " + db.database.get(String("partner_20")) + '\n' + '```')

            const row = new ActionRowBuilder()
              .addComponents(
                new SelectMenuBuilder()
                  .setCustomId('menu_editlist_partner')
                  .setPlaceholder('Ajouter un serveur à une ligne.')
                  .addOptions(
                    {
                      label: '1',
                      description: 'Ajouter un server à la ligne 1.',
                      value: 'edit_list_1',
                    },
                    {
                      label: '2',
                      value: 'edit_list_2',
                    },
                    {
                      label: '3',
                      value: 'edit_list_3',
                    },
                    {
                      label: '4',
                      value: 'edit_list_4',
                    },
                    {
                      label: '5',
                      value: 'edit_list_5',
                    },
                    {
                      label: '6',
                      value: 'edit_list_6',
                    },
                    {
                      label: '7',
                      value: 'edit_list_7',
                    },
                    {
                      label: '8',
                      value: 'edit_list_8',
                    },
                    {
                      label: '9',
                      value: 'edit_list_9',
                    },
                    {
                      label: '10',
                      value: 'edit_list_10',
                    },
                    {
                      label: '11',
                      value: 'edit_list_11',
                    },
                    {
                      label: '12',
                      value: 'edit_list_12',
                    },
                    {
                      label: '13',
                      value: 'edit_list_13',
                    },
                    {
                      label: '14',
                      value: 'edit_list_14',
                    },
                    {
                      label: '15',
                      value: 'edit_list_15',
                    },
                    {
                      label: '16',
                      value: 'edit_list_16',
                    },
                    {
                      label: '17',
                      value: 'edit_list_17',
                    },
                    {
                      label: '18',
                      value: 'edit_list_18',
                    },
                    {
                      label: '19',
                      value: 'edit_list_19',
                    },
                    {
                      label: '20',
                      value: 'edit_list_20',
                    },
                  ),
              );


            const row2 = new ActionRowBuilder()
              .addComponents(
                new SelectMenuBuilder()
                  .setCustomId('menu_editlist_partner_delete')
                  .setPlaceholder('Retirer un serveur d\'une ligne.')
                  .addOptions(
                    {
                      label: '1',
                      description: 'Retirer un serveur de la ligne 1.',
                      value: 'edit_list_1_remove',
                    },
                    {
                      label: '2',
                      value: 'edit_list_2_remove',
                    },
                    {
                      label: '3',
                      value: 'edit_list_3_remove',
                    },
                    {
                      label: '4',
                      value: 'edit_list_4_remove',
                    },
                    {
                      label: '5',
                      value: 'edit_list_5_remove',
                    },
                    {
                      label: '6',
                      value: 'edit_list_6_remove',
                    },
                    {
                      label: '7',
                      value: 'edit_list_7_remove',
                    },
                    {
                      label: '8',
                      value: 'edit_list_8_remove',
                    },
                    {
                      label: '9',
                      value: 'edit_list_9_remove',
                    },
                    {
                      label: '10',
                      value: 'edit_list_10_remove',
                    },
                    {
                      label: '11',
                      value: 'edit_list_11_remove',
                    },
                    {
                      label: '12',
                      value: 'edit_list_12_remove',
                    },
                    {
                      label: '13',
                      value: 'edit_list_13_remove',
                    },
                    {
                      label: '14',
                      value: 'edit_list_14_remove',
                    },
                    {
                      label: '15',
                      value: 'edit_list_15_remove',
                    },
                    {
                      label: '16',
                      value: 'edit_list_16_remove',
                    },
                    {
                      label: '17',
                      value: 'edit_list_17_remove',
                    },
                    {
                      label: '18',
                      value: 'edit_list_18_remove',
                    },
                    {
                      label: '19',
                      value: 'edit_list_19_remove',
                    },
                    {
                      label: '20',
                      value: 'edit_list_20_remove',
                    },
                  ),
              );

            const send_partner_test = new ButtonBuilder()
              .setLabel("Envoyer en MP")
              .setStyle(ButtonStyle.Primary)
              .setEmoji(`${emoji.partner}`)
              .setCustomId("send_partner_test")

            const send_partner_reset = new ButtonBuilder()
              .setLabel("Réinitialiser")
              .setStyle(ButtonStyle.Danger)
              .setEmoji(`${emoji.bin}`)
              .setCustomId("send_partner_reset")

            const menu_partner_view = new ActionRowBuilder()
              .addComponents(send_partner_test)
              .addComponents(send_partner_reset)

            interaction.reply({ embeds: ([embed]), components: [row, row2, menu_partner_view] })


          } else {
            ////Erreur Perms Admins\\\\

            var embed = new EmbedBuilder()
              .setColor(`${config.color.color_error}`)
              .setDescription(`${emoji.wrong}${general.error.perms_admin}`)

            interaction.reply({
              embeds: ([embed]), ephemeral: true
            })
          }
        }
      } else {
        var embed = new EmbedBuilder()
          .setColor(`${config.color.color_error}`)
          .setDescription(`${emoji.wrong}${general.error.module_activate1}` + ' *`Partenariat MP`* ' + `${general.error.module_activate2}`)

        interaction.reply({ embeds: ([embed]), ephemeral: true })
      }
    } else {

      var embed = new EmbedBuilder()
        .setColor(`${config.color.color_error}`)
        .setDescription(`${emoji.wrong}${general.error.server_follow}`)

      interaction.reply({ embeds: ([embed]), ephemeral: true })
    }
  }

  if (interaction.customId === "send_partner_reset") {
    if ((interaction.member.permissions.has(PermissionsBitField.Flags.Administrator)) || (interaction.member.id === dev)) {

      db.database.set(String("partner_1"), "")
      db.database.set(String("partner_2"), "")
      db.database.set(String("partner_3"), "")
      db.database.set(String("partner_4"), "")
      db.database.set(String("partner_5"), "")
      db.database.set(String("partner_6"), "")
      db.database.set(String("partner_7"), "")
      db.database.set(String("partner_8"), "")
      db.database.set(String("partner_9"), "")
      db.database.set(String("partner_10"), "")
      db.database.set(String("partner_11"), "")
      db.database.set(String("partner_12"), "")
      db.database.set(String("partner_13"), "")
      db.database.set(String("partner_14"), "")
      db.database.set(String("partner_15"), "")
      db.database.set(String("partner_16"), "")
      db.database.set(String("partner_17"), "")
      db.database.set(String("partner_18"), "")
      db.database.set(String("partner_19"), "")
      db.database.set(String("partner_20"), "")

      var embed = new EmbedBuilder()
        .setColor(`${config.color.color}`)
        .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
        .setTitle(`${emoji.link}${partner.title.text1}`)
        .setDescription(db.database.get(String("partner_message")) + '\n\n ```' +
          "1) " + db.database.get(String("partner_1")) + '\n' +
          "2) " + db.database.get(String("partner_2")) + '\n' +
          "3) " + db.database.get(String("partner_3")) + '\n' +
          "4) " + db.database.get(String("partner_4")) + '\n' +
          "5) " + db.database.get(String("partner_5")) + '\n' +
          "6) " + db.database.get(String("partner_6")) + '\n' +
          "7) " + db.database.get(String("partner_7")) + '\n' +
          "8) " + db.database.get(String("partner_8")) + '\n' +
          "9) " + db.database.get(String("partner_9")) + '\n' +
          "10) " + db.database.get(String("partner_10")) + '\n' +
          "11) " + db.database.get(String("partner_11")) + '\n' +
          "12) " + db.database.get(String("partner_12")) + '\n' +
          "13) " + db.database.get(String("partner_13")) + '\n' +
          "14) " + db.database.get(String("partner_14")) + '\n' +
          "15) " + db.database.get(String("partner_15")) + '\n' +
          "16) " + db.database.get(String("partner_16")) + '\n' +
          "17) " + db.database.get(String("partner_17")) + '\n' +
          "18) " + db.database.get(String("partner_18")) + '\n' +
          "19) " + db.database.get(String("partner_19")) + '\n' +
          "20) " + db.database.get(String("partner_20")) + '\n' + '```')

      interaction.message.edit({ embeds: ([embed]) })

      var embed = new EmbedBuilder()
        .setColor(`${config.color.color_good}`)
        .setDescription(`${emoji.tick}${general.response.restart}`)

      interaction.channel.send({
        embeds: ([embed])
      }).then(async (response_save) => {
        interaction.deferUpdate()
        await delay(Number(3) * 1000)
        response_save.delete()
      })


    } else {
      ////Erreur Perms Admins\\\\

      var embed = new EmbedBuilder()
        .setColor(`${config.color.color_error}`)
        .setDescription(`${emoji.wrong}${general.error.perms_admin}`)

      interaction.reply({
        embeds: ([embed]), ephemeral: true
      })
    }
  }

  if (interaction.customId === "menu_editlist_partner_delete") {
    if ((db.module.get(String("partenariat_mp"))) === "on") {
      if ((interaction.member.permissions.has(PermissionsBitField.Flags.Administrator)) || (interaction.member.id === dev)) {

        if ((interaction.values[0]) === "edit_list_1_remove") {

          db.database.set(String("partner_1"), " ")

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color}`)
            .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
            .setTitle(`${emoji.link}${partner.title.text1}`)
            .setDescription(db.database.get(String("partner_message")) + '\n\n ```' +
              "1) " + db.database.get(String("partner_1")) + '\n' +
              "2) " + db.database.get(String("partner_2")) + '\n' +
              "3) " + db.database.get(String("partner_3")) + '\n' +
              "4) " + db.database.get(String("partner_4")) + '\n' +
              "5) " + db.database.get(String("partner_5")) + '\n' +
              "6) " + db.database.get(String("partner_6")) + '\n' +
              "7) " + db.database.get(String("partner_7")) + '\n' +
              "8) " + db.database.get(String("partner_8")) + '\n' +
              "9) " + db.database.get(String("partner_9")) + '\n' +
              "10) " + db.database.get(String("partner_10")) + '\n' +
              "11) " + db.database.get(String("partner_11")) + '\n' +
              "12) " + db.database.get(String("partner_12")) + '\n' +
              "13) " + db.database.get(String("partner_13")) + '\n' +
              "14) " + db.database.get(String("partner_14")) + '\n' +
              "15) " + db.database.get(String("partner_15")) + '\n' +
              "16) " + db.database.get(String("partner_16")) + '\n' +
              "17) " + db.database.get(String("partner_17")) + '\n' +
              "18) " + db.database.get(String("partner_18")) + '\n' +
              "19) " + db.database.get(String("partner_19")) + '\n' +
              "20) " + db.database.get(String("partner_20")) + '\n' + '```')

          interaction.message.edit({ embeds: ([embed]) })

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color_good}`)
            .setDescription(`${emoji.tick}${general.response.save_modifications}`)

          interaction.channel.send({
            embeds: ([embed])
          }).then(async (response_save) => {
            interaction.deferUpdate()
            await delay(Number(3) * 1000)
            response_save.delete()
          })


        } else if ((interaction.values[0]) === "edit_list_2_remove") {

          db.database.set(String("partner_2"), "")

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color}`)
            .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
            .setTitle(`${emoji.link}${partner.title.text1}`)
            .setDescription(db.database.get(String("partner_message")) + '\n\n ```' +
              "1) " + db.database.get(String("partner_1")) + '\n' +
              "2) " + db.database.get(String("partner_2")) + '\n' +
              "3) " + db.database.get(String("partner_3")) + '\n' +
              "4) " + db.database.get(String("partner_4")) + '\n' +
              "5) " + db.database.get(String("partner_5")) + '\n' +
              "6) " + db.database.get(String("partner_6")) + '\n' +
              "7) " + db.database.get(String("partner_7")) + '\n' +
              "8) " + db.database.get(String("partner_8")) + '\n' +
              "9) " + db.database.get(String("partner_9")) + '\n' +
              "10) " + db.database.get(String("partner_10")) + '\n' +
              "11) " + db.database.get(String("partner_11")) + '\n' +
              "12) " + db.database.get(String("partner_12")) + '\n' +
              "13) " + db.database.get(String("partner_13")) + '\n' +
              "14) " + db.database.get(String("partner_14")) + '\n' +
              "15) " + db.database.get(String("partner_15")) + '\n' +
              "16) " + db.database.get(String("partner_16")) + '\n' +
              "17) " + db.database.get(String("partner_17")) + '\n' +
              "18) " + db.database.get(String("partner_18")) + '\n' +
              "19) " + db.database.get(String("partner_19")) + '\n' +
              "20) " + db.database.get(String("partner_20")) + '\n' + '```')

          interaction.message.edit({ embeds: ([embed]) })

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color_good}`)
            .setDescription(`${emoji.tick}${general.response.save_modifications}`)

          interaction.channel.send({
            embeds: ([embed])
          }).then(async (response_save) => {
            interaction.deferUpdate()
            await delay(Number(3) * 1000)
            response_save.delete()
          })


        } else if ((interaction.values[0]) === "edit_list_3_remove") {

          db.database.set(String("partner_3"), " ")

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color}`)
            .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
            .setTitle(`${emoji.link}${partner.title.text1}`)
            .setDescription(db.database.get(String("partner_message")) + '\n\n ```' +
              "1) " + db.database.get(String("partner_1")) + '\n' +
              "2) " + db.database.get(String("partner_2")) + '\n' +
              "3) " + db.database.get(String("partner_3")) + '\n' +
              "4) " + db.database.get(String("partner_4")) + '\n' +
              "5) " + db.database.get(String("partner_5")) + '\n' +
              "6) " + db.database.get(String("partner_6")) + '\n' +
              "7) " + db.database.get(String("partner_7")) + '\n' +
              "8) " + db.database.get(String("partner_8")) + '\n' +
              "9) " + db.database.get(String("partner_9")) + '\n' +
              "10) " + db.database.get(String("partner_10")) + '\n' +
              "11) " + db.database.get(String("partner_11")) + '\n' +
              "12) " + db.database.get(String("partner_12")) + '\n' +
              "13) " + db.database.get(String("partner_13")) + '\n' +
              "14) " + db.database.get(String("partner_14")) + '\n' +
              "15) " + db.database.get(String("partner_15")) + '\n' +
              "16) " + db.database.get(String("partner_16")) + '\n' +
              "17) " + db.database.get(String("partner_17")) + '\n' +
              "18) " + db.database.get(String("partner_18")) + '\n' +
              "19) " + db.database.get(String("partner_19")) + '\n' +
              "20) " + db.database.get(String("partner_20")) + '\n' + '```')

          interaction.message.edit({ embeds: ([embed]) })

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color_good}`)
            .setDescription(`${emoji.tick}${general.response.save_modifications}`)

          interaction.channel.send({
            embeds: ([embed])
          }).then(async (response_save) => {
            interaction.deferUpdate()
            await delay(Number(3) * 1000)
            response_save.delete()
          })


        } else if ((interaction.values[0]) === "edit_list_4_remove") {

          db.database.set(String("partner_4"), " ")

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color}`)
            .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
            .setTitle(`${emoji.link}${partner.title.text1}`)
            .setDescription(db.database.get(String("partner_message")) + '\n\n ```' +
              "1) " + db.database.get(String("partner_1")) + '\n' +
              "2) " + db.database.get(String("partner_2")) + '\n' +
              "3) " + db.database.get(String("partner_3")) + '\n' +
              "4) " + db.database.get(String("partner_4")) + '\n' +
              "5) " + db.database.get(String("partner_5")) + '\n' +
              "6) " + db.database.get(String("partner_6")) + '\n' +
              "7) " + db.database.get(String("partner_7")) + '\n' +
              "8) " + db.database.get(String("partner_8")) + '\n' +
              "9) " + db.database.get(String("partner_9")) + '\n' +
              "10) " + db.database.get(String("partner_10")) + '\n' +
              "11) " + db.database.get(String("partner_11")) + '\n' +
              "12) " + db.database.get(String("partner_12")) + '\n' +
              "13) " + db.database.get(String("partner_13")) + '\n' +
              "14) " + db.database.get(String("partner_14")) + '\n' +
              "15) " + db.database.get(String("partner_15")) + '\n' +
              "16) " + db.database.get(String("partner_16")) + '\n' +
              "17) " + db.database.get(String("partner_17")) + '\n' +
              "18) " + db.database.get(String("partner_18")) + '\n' +
              "19) " + db.database.get(String("partner_19")) + '\n' +
              "20) " + db.database.get(String("partner_20")) + '\n' + '```')

          interaction.message.edit({ embeds: ([embed]) })

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color_good}`)
            .setDescription(`${emoji.tick}${general.response.save_modifications}`)

          interaction.channel.send({
            embeds: ([embed])
          }).then(async (response_save) => {
            interaction.deferUpdate()
            await delay(Number(3) * 1000)
            response_save.delete()
          })


        } else if ((interaction.values[0]) === "edit_list_5_remove") {

          db.database.set(String("partner_5"), " ")

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color}`)
            .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
            .setTitle(`${emoji.link}${partner.title.text1}`)
            .setDescription(db.database.get(String("partner_message")) + '\n\n ```' +
              "1) " + db.database.get(String("partner_1")) + '\n' +
              "2) " + db.database.get(String("partner_2")) + '\n' +
              "3) " + db.database.get(String("partner_3")) + '\n' +
              "4) " + db.database.get(String("partner_4")) + '\n' +
              "5) " + db.database.get(String("partner_5")) + '\n' +
              "6) " + db.database.get(String("partner_6")) + '\n' +
              "7) " + db.database.get(String("partner_7")) + '\n' +
              "8) " + db.database.get(String("partner_8")) + '\n' +
              "9) " + db.database.get(String("partner_9")) + '\n' +
              "10) " + db.database.get(String("partner_10")) + '\n' +
              "11) " + db.database.get(String("partner_11")) + '\n' +
              "12) " + db.database.get(String("partner_12")) + '\n' +
              "13) " + db.database.get(String("partner_13")) + '\n' +
              "14) " + db.database.get(String("partner_14")) + '\n' +
              "15) " + db.database.get(String("partner_15")) + '\n' +
              "16) " + db.database.get(String("partner_16")) + '\n' +
              "17) " + db.database.get(String("partner_17")) + '\n' +
              "18) " + db.database.get(String("partner_18")) + '\n' +
              "19) " + db.database.get(String("partner_19")) + '\n' +
              "20) " + db.database.get(String("partner_20")) + '\n' + '```')

          interaction.message.edit({ embeds: ([embed]) })

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color_good}`)
            .setDescription(`${emoji.tick}${general.response.save_modifications}`)

          interaction.channel.send({
            embeds: ([embed])
          }).then(async (response_save) => {
            interaction.deferUpdate()
            await delay(Number(3) * 1000)
            response_save.delete()
          })


        } else if ((interaction.values[0]) === "edit_list_6_remove") {

          db.database.set(String("partner_6"), " ")

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color}`)
            .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
            .setTitle(`${emoji.link}${partner.title.text1}`)
            .setDescription(db.database.get(String("partner_message")) + '\n\n ```' +
              "1) " + db.database.get(String("partner_1")) + '\n' +
              "2) " + db.database.get(String("partner_2")) + '\n' +
              "3) " + db.database.get(String("partner_3")) + '\n' +
              "4) " + db.database.get(String("partner_4")) + '\n' +
              "5) " + db.database.get(String("partner_5")) + '\n' +
              "6) " + db.database.get(String("partner_6")) + '\n' +
              "7) " + db.database.get(String("partner_7")) + '\n' +
              "8) " + db.database.get(String("partner_8")) + '\n' +
              "9) " + db.database.get(String("partner_9")) + '\n' +
              "10) " + db.database.get(String("partner_10")) + '\n' +
              "11) " + db.database.get(String("partner_11")) + '\n' +
              "12) " + db.database.get(String("partner_12")) + '\n' +
              "13) " + db.database.get(String("partner_13")) + '\n' +
              "14) " + db.database.get(String("partner_14")) + '\n' +
              "15) " + db.database.get(String("partner_15")) + '\n' +
              "16) " + db.database.get(String("partner_16")) + '\n' +
              "17) " + db.database.get(String("partner_17")) + '\n' +
              "18) " + db.database.get(String("partner_18")) + '\n' +
              "19) " + db.database.get(String("partner_19")) + '\n' +
              "20) " + db.database.get(String("partner_20")) + '\n' + '```')

          interaction.message.edit({ embeds: ([embed]) })

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color_good}`)
            .setDescription(`${emoji.tick}${general.response.save_modifications}`)

          interaction.channel.send({
            embeds: ([embed])
          }).then(async (response_save) => {
            interaction.deferUpdate()
            await delay(Number(3) * 1000)
            response_save.delete()
          })


        } else if ((interaction.values[0]) === "edit_list_7_remove") {

          db.database.set(String("partner_7"), " ")

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color}`)
            .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
            .setTitle(`${emoji.link}${partner.title.text1}`)
            .setDescription(db.database.get(String("partner_message")) + '\n\n ```' +
              "1) " + db.database.get(String("partner_1")) + '\n' +
              "2) " + db.database.get(String("partner_2")) + '\n' +
              "3) " + db.database.get(String("partner_3")) + '\n' +
              "4) " + db.database.get(String("partner_4")) + '\n' +
              "5) " + db.database.get(String("partner_5")) + '\n' +
              "6) " + db.database.get(String("partner_6")) + '\n' +
              "7) " + db.database.get(String("partner_7")) + '\n' +
              "8) " + db.database.get(String("partner_8")) + '\n' +
              "9) " + db.database.get(String("partner_9")) + '\n' +
              "10) " + db.database.get(String("partner_10")) + '\n' +
              "11) " + db.database.get(String("partner_11")) + '\n' +
              "12) " + db.database.get(String("partner_12")) + '\n' +
              "13) " + db.database.get(String("partner_13")) + '\n' +
              "14) " + db.database.get(String("partner_14")) + '\n' +
              "15) " + db.database.get(String("partner_15")) + '\n' +
              "16) " + db.database.get(String("partner_16")) + '\n' +
              "17) " + db.database.get(String("partner_17")) + '\n' +
              "18) " + db.database.get(String("partner_18")) + '\n' +
              "19) " + db.database.get(String("partner_19")) + '\n' +
              "20) " + db.database.get(String("partner_20")) + '\n' + '```')

          interaction.message.edit({ embeds: ([embed]) })

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color_good}`)
            .setDescription(`${emoji.tick}${general.response.save_modifications}`)

          interaction.channel.send({
            embeds: ([embed])
          }).then(async (response_save) => {
            interaction.deferUpdate()
            await delay(Number(3) * 1000)
            response_save.delete()
          })


        } else if ((interaction.values[0]) === "edit_list_8_remove") {

          db.database.set(String("partner_8"), " ")

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color}`)
            .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
            .setTitle(`${emoji.link}${partner.title.text1}`)
            .setDescription(db.database.get(String("partner_message")) + '\n\n ```' +
              "1) " + db.database.get(String("partner_1")) + '\n' +
              "2) " + db.database.get(String("partner_2")) + '\n' +
              "3) " + db.database.get(String("partner_3")) + '\n' +
              "4) " + db.database.get(String("partner_4")) + '\n' +
              "5) " + db.database.get(String("partner_5")) + '\n' +
              "6) " + db.database.get(String("partner_6")) + '\n' +
              "7) " + db.database.get(String("partner_7")) + '\n' +
              "8) " + db.database.get(String("partner_8")) + '\n' +
              "9) " + db.database.get(String("partner_9")) + '\n' +
              "10) " + db.database.get(String("partner_10")) + '\n' +
              "11) " + db.database.get(String("partner_11")) + '\n' +
              "12) " + db.database.get(String("partner_12")) + '\n' +
              "13) " + db.database.get(String("partner_13")) + '\n' +
              "14) " + db.database.get(String("partner_14")) + '\n' +
              "15) " + db.database.get(String("partner_15")) + '\n' +
              "16) " + db.database.get(String("partner_16")) + '\n' +
              "17) " + db.database.get(String("partner_17")) + '\n' +
              "18) " + db.database.get(String("partner_18")) + '\n' +
              "19) " + db.database.get(String("partner_19")) + '\n' +
              "20) " + db.database.get(String("partner_20")) + '\n' + '```')

          interaction.message.edit({ embeds: ([embed]) })

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color_good}`)
            .setDescription(`${emoji.tick}${general.response.save_modifications}`)

          interaction.channel.send({
            embeds: ([embed])
          }).then(async (response_save) => {
            interaction.deferUpdate()
            await delay(Number(3) * 1000)
            response_save.delete()
          })


        } else if ((interaction.values[0]) === "edit_list_9_remove") {

          db.database.set(String("partner_9"), " ")

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color}`)
            .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
            .setTitle(`${emoji.link}${partner.title.text1}`)
            .setDescription(db.database.get(String("partner_message")) + '\n\n ```' +
              "1) " + db.database.get(String("partner_1")) + '\n' +
              "2) " + db.database.get(String("partner_2")) + '\n' +
              "3) " + db.database.get(String("partner_3")) + '\n' +
              "4) " + db.database.get(String("partner_4")) + '\n' +
              "5) " + db.database.get(String("partner_5")) + '\n' +
              "6) " + db.database.get(String("partner_6")) + '\n' +
              "7) " + db.database.get(String("partner_7")) + '\n' +
              "8) " + db.database.get(String("partner_8")) + '\n' +
              "9) " + db.database.get(String("partner_9")) + '\n' +
              "10) " + db.database.get(String("partner_10")) + '\n' +
              "11) " + db.database.get(String("partner_11")) + '\n' +
              "12) " + db.database.get(String("partner_12")) + '\n' +
              "13) " + db.database.get(String("partner_13")) + '\n' +
              "14) " + db.database.get(String("partner_14")) + '\n' +
              "15) " + db.database.get(String("partner_15")) + '\n' +
              "16) " + db.database.get(String("partner_16")) + '\n' +
              "17) " + db.database.get(String("partner_17")) + '\n' +
              "18) " + db.database.get(String("partner_18")) + '\n' +
              "19) " + db.database.get(String("partner_19")) + '\n' +
              "20) " + db.database.get(String("partner_20")) + '\n' + '```')

          interaction.message.edit({ embeds: ([embed]) })

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color_good}`)
            .setDescription(`${emoji.tick}${general.response.save_modifications}`)

          interaction.channel.send({
            embeds: ([embed])
          }).then(async (response_save) => {
            interaction.deferUpdate()
            await delay(Number(3) * 1000)
            response_save.delete()
          })

        } else if ((interaction.values[0]) === "edit_list_10_remove") {

          db.database.set(String("partner_10"), " ")

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color}`)
            .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
            .setTitle(`${emoji.link}${partner.title.text1}`)
            .setDescription(db.database.get(String("partner_message")) + '\n\n ```' +
              "1) " + db.database.get(String("partner_1")) + '\n' +
              "2) " + db.database.get(String("partner_2")) + '\n' +
              "3) " + db.database.get(String("partner_3")) + '\n' +
              "4) " + db.database.get(String("partner_4")) + '\n' +
              "5) " + db.database.get(String("partner_5")) + '\n' +
              "6) " + db.database.get(String("partner_6")) + '\n' +
              "7) " + db.database.get(String("partner_7")) + '\n' +
              "8) " + db.database.get(String("partner_8")) + '\n' +
              "9) " + db.database.get(String("partner_9")) + '\n' +
              "10) " + db.database.get(String("partner_10")) + '\n' +
              "11) " + db.database.get(String("partner_11")) + '\n' +
              "12) " + db.database.get(String("partner_12")) + '\n' +
              "13) " + db.database.get(String("partner_13")) + '\n' +
              "14) " + db.database.get(String("partner_14")) + '\n' +
              "15) " + db.database.get(String("partner_15")) + '\n' +
              "16) " + db.database.get(String("partner_16")) + '\n' +
              "17) " + db.database.get(String("partner_17")) + '\n' +
              "18) " + db.database.get(String("partner_18")) + '\n' +
              "19) " + db.database.get(String("partner_19")) + '\n' +
              "20) " + db.database.get(String("partner_20")) + '\n' + '```')

          interaction.message.edit({ embeds: ([embed]) })

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color_good}`)
            .setDescription(`${emoji.tick}${general.response.save_modifications}`)

          interaction.channel.send({
            embeds: ([embed])
          }).then(async (response_save) => {
            interaction.deferUpdate()
            await delay(Number(3) * 1000)
            response_save.delete()
          })


        } else if ((interaction.values[0]) === "edit_list_11_remove") {

          db.database.set(String("partner_11"), " ")

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color}`)
            .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
            .setTitle(`${emoji.link}${partner.title.text1}`)
            .setDescription(db.database.get(String("partner_message")) + '\n\n ```' +
              "1) " + db.database.get(String("partner_1")) + '\n' +
              "2) " + db.database.get(String("partner_2")) + '\n' +
              "3) " + db.database.get(String("partner_3")) + '\n' +
              "4) " + db.database.get(String("partner_4")) + '\n' +
              "5) " + db.database.get(String("partner_5")) + '\n' +
              "6) " + db.database.get(String("partner_6")) + '\n' +
              "7) " + db.database.get(String("partner_7")) + '\n' +
              "8) " + db.database.get(String("partner_8")) + '\n' +
              "9) " + db.database.get(String("partner_9")) + '\n' +
              "10) " + db.database.get(String("partner_10")) + '\n' +
              "11) " + db.database.get(String("partner_11")) + '\n' +
              "12) " + db.database.get(String("partner_12")) + '\n' +
              "13) " + db.database.get(String("partner_13")) + '\n' +
              "14) " + db.database.get(String("partner_14")) + '\n' +
              "15) " + db.database.get(String("partner_15")) + '\n' +
              "16) " + db.database.get(String("partner_16")) + '\n' +
              "17) " + db.database.get(String("partner_17")) + '\n' +
              "18) " + db.database.get(String("partner_18")) + '\n' +
              "19) " + db.database.get(String("partner_19")) + '\n' +
              "20) " + db.database.get(String("partner_20")) + '\n' + '```')

          interaction.message.edit({ embeds: ([embed]) })

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color_good}`)
            .setDescription(`${emoji.tick}${general.response.save_modifications}`)

          interaction.channel.send({
            embeds: ([embed])
          }).then(async (response_save) => {
            interaction.deferUpdate()
            await delay(Number(3) * 1000)
            response_save.delete()
          })


        } else if ((interaction.values[0]) === "edit_list_12_remove") {

          db.database.set(String("partner_12"), " ")

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color}`)
            .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
            .setTitle(`${emoji.link}${partner.title.text1}`)
            .setDescription(db.database.get(String("partner_message")) + '\n\n ```' +
              "1) " + db.database.get(String("partner_1")) + '\n' +
              "2) " + db.database.get(String("partner_2")) + '\n' +
              "3) " + db.database.get(String("partner_3")) + '\n' +
              "4) " + db.database.get(String("partner_4")) + '\n' +
              "5) " + db.database.get(String("partner_5")) + '\n' +
              "6) " + db.database.get(String("partner_6")) + '\n' +
              "7) " + db.database.get(String("partner_7")) + '\n' +
              "8) " + db.database.get(String("partner_8")) + '\n' +
              "9) " + db.database.get(String("partner_9")) + '\n' +
              "10) " + db.database.get(String("partner_10")) + '\n' +
              "11) " + db.database.get(String("partner_11")) + '\n' +
              "12) " + db.database.get(String("partner_12")) + '\n' +
              "13) " + db.database.get(String("partner_13")) + '\n' +
              "14) " + db.database.get(String("partner_14")) + '\n' +
              "15) " + db.database.get(String("partner_15")) + '\n' +
              "16) " + db.database.get(String("partner_16")) + '\n' +
              "17) " + db.database.get(String("partner_17")) + '\n' +
              "18) " + db.database.get(String("partner_18")) + '\n' +
              "19) " + db.database.get(String("partner_19")) + '\n' +
              "20) " + db.database.get(String("partner_20")) + '\n' + '```')

          interaction.message.edit({ embeds: ([embed]) })

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color_good}`)
            .setDescription(`${emoji.tick}${general.response.save_modifications}`)

          interaction.channel.send({
            embeds: ([embed])
          }).then(async (response_save) => {
            interaction.deferUpdate()
            await delay(Number(3) * 1000)
            response_save.delete()
          })


        } else if ((interaction.values[0]) === "edit_list_13_remove") {

          db.database.set(String("partner_13"), " ")

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color}`)
            .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
            .setTitle(`${emoji.link}${partner.title.text1}`)
            .setDescription(db.database.get(String("partner_message")) + '\n\n ```' +
              "1) " + db.database.get(String("partner_1")) + '\n' +
              "2) " + db.database.get(String("partner_2")) + '\n' +
              "3) " + db.database.get(String("partner_3")) + '\n' +
              "4) " + db.database.get(String("partner_4")) + '\n' +
              "5) " + db.database.get(String("partner_5")) + '\n' +
              "6) " + db.database.get(String("partner_6")) + '\n' +
              "7) " + db.database.get(String("partner_7")) + '\n' +
              "8) " + db.database.get(String("partner_8")) + '\n' +
              "9) " + db.database.get(String("partner_9")) + '\n' +
              "10) " + db.database.get(String("partner_10")) + '\n' +
              "11) " + db.database.get(String("partner_11")) + '\n' +
              "12) " + db.database.get(String("partner_12")) + '\n' +
              "13) " + db.database.get(String("partner_13")) + '\n' +
              "14) " + db.database.get(String("partner_14")) + '\n' +
              "15) " + db.database.get(String("partner_15")) + '\n' +
              "16) " + db.database.get(String("partner_16")) + '\n' +
              "17) " + db.database.get(String("partner_17")) + '\n' +
              "18) " + db.database.get(String("partner_18")) + '\n' +
              "19) " + db.database.get(String("partner_19")) + '\n' +
              "20) " + db.database.get(String("partner_20")) + '\n' + '```')

          interaction.message.edit({ embeds: ([embed]) })

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color_good}`)
            .setDescription(`${emoji.tick}${general.response.save_modifications}`)

          interaction.channel.send({
            embeds: ([embed])
          }).then(async (response_save) => {
            interaction.deferUpdate()
            await delay(Number(3) * 1000)
            response_save.delete()
          })


        } else if ((interaction.values[0]) === "edit_list_14_remove") {

          db.database.set(String("partner_14"), " ")

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color}`)
            .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
            .setTitle(`${emoji.link}${partner.title.text1}`)
            .setDescription(db.database.get(String("partner_message")) + '\n\n ```' +
              "1) " + db.database.get(String("partner_1")) + '\n' +
              "2) " + db.database.get(String("partner_2")) + '\n' +
              "3) " + db.database.get(String("partner_3")) + '\n' +
              "4) " + db.database.get(String("partner_4")) + '\n' +
              "5) " + db.database.get(String("partner_5")) + '\n' +
              "6) " + db.database.get(String("partner_6")) + '\n' +
              "7) " + db.database.get(String("partner_7")) + '\n' +
              "8) " + db.database.get(String("partner_8")) + '\n' +
              "9) " + db.database.get(String("partner_9")) + '\n' +
              "10) " + db.database.get(String("partner_10")) + '\n' +
              "11) " + db.database.get(String("partner_11")) + '\n' +
              "12) " + db.database.get(String("partner_12")) + '\n' +
              "13) " + db.database.get(String("partner_13")) + '\n' +
              "14) " + db.database.get(String("partner_14")) + '\n' +
              "15) " + db.database.get(String("partner_15")) + '\n' +
              "16) " + db.database.get(String("partner_16")) + '\n' +
              "17) " + db.database.get(String("partner_17")) + '\n' +
              "18) " + db.database.get(String("partner_18")) + '\n' +
              "19) " + db.database.get(String("partner_19")) + '\n' +
              "20) " + db.database.get(String("partner_20")) + '\n' + '```')

          interaction.message.edit({ embeds: ([embed]) })

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color_good}`)
            .setDescription(`${emoji.tick}${general.response.save_modifications}`)

          interaction.channel.send({
            embeds: ([embed])
          }).then(async (response_save) => {
            interaction.deferUpdate()
            await delay(Number(3) * 1000)
            response_save.delete()
          })


        } else if ((interaction.values[0]) === "edit_list_15_remove") {

          db.database.set(String("partner_15"), " ")

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color}`)
            .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
            .setTitle(`${emoji.link}${partner.title.text1}`)
            .setDescription(db.database.get(String("partner_message")) + '\n\n ```' +
              "1) " + db.database.get(String("partner_1")) + '\n' +
              "2) " + db.database.get(String("partner_2")) + '\n' +
              "3) " + db.database.get(String("partner_3")) + '\n' +
              "4) " + db.database.get(String("partner_4")) + '\n' +
              "5) " + db.database.get(String("partner_5")) + '\n' +
              "6) " + db.database.get(String("partner_6")) + '\n' +
              "7) " + db.database.get(String("partner_7")) + '\n' +
              "8) " + db.database.get(String("partner_8")) + '\n' +
              "9) " + db.database.get(String("partner_9")) + '\n' +
              "10) " + db.database.get(String("partner_10")) + '\n' +
              "11) " + db.database.get(String("partner_11")) + '\n' +
              "12) " + db.database.get(String("partner_12")) + '\n' +
              "13) " + db.database.get(String("partner_13")) + '\n' +
              "14) " + db.database.get(String("partner_14")) + '\n' +
              "15) " + db.database.get(String("partner_15")) + '\n' +
              "16) " + db.database.get(String("partner_16")) + '\n' +
              "17) " + db.database.get(String("partner_17")) + '\n' +
              "18) " + db.database.get(String("partner_18")) + '\n' +
              "19) " + db.database.get(String("partner_19")) + '\n' +
              "20) " + db.database.get(String("partner_20")) + '\n' + '```')

          interaction.message.edit({ embeds: ([embed]) })

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color_good}`)
            .setDescription(`${emoji.tick}${general.response.save_modifications}`)

          interaction.channel.send({
            embeds: ([embed])
          }).then(async (response_save) => {
            interaction.deferUpdate()
            await delay(Number(3) * 1000)
            response_save.delete()
          })


        } else if ((interaction.values[0]) === "edit_list_16_remove") {

          db.database.set(String("partner_16"), " ")

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color}`)
            .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
            .setTitle(`${emoji.link}${partner.title.text1}`)
            .setDescription(db.database.get(String("partner_message")) + '\n\n ```' +
              "1) " + db.database.get(String("partner_1")) + '\n' +
              "2) " + db.database.get(String("partner_2")) + '\n' +
              "3) " + db.database.get(String("partner_3")) + '\n' +
              "4) " + db.database.get(String("partner_4")) + '\n' +
              "5) " + db.database.get(String("partner_5")) + '\n' +
              "6) " + db.database.get(String("partner_6")) + '\n' +
              "7) " + db.database.get(String("partner_7")) + '\n' +
              "8) " + db.database.get(String("partner_8")) + '\n' +
              "9) " + db.database.get(String("partner_9")) + '\n' +
              "10) " + db.database.get(String("partner_10")) + '\n' +
              "11) " + db.database.get(String("partner_11")) + '\n' +
              "12) " + db.database.get(String("partner_12")) + '\n' +
              "13) " + db.database.get(String("partner_13")) + '\n' +
              "14) " + db.database.get(String("partner_14")) + '\n' +
              "15) " + db.database.get(String("partner_15")) + '\n' +
              "16) " + db.database.get(String("partner_16")) + '\n' +
              "17) " + db.database.get(String("partner_17")) + '\n' +
              "18) " + db.database.get(String("partner_18")) + '\n' +
              "19) " + db.database.get(String("partner_19")) + '\n' +
              "20) " + db.database.get(String("partner_20")) + '\n' + '```')

          interaction.message.edit({ embeds: ([embed]) })

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color_good}`)
            .setDescription(`${emoji.tick}${general.response.save_modifications}`)

          interaction.channel.send({
            embeds: ([embed])
          }).then(async (response_save) => {
            interaction.deferUpdate()
            await delay(Number(3) * 1000)
            response_save.delete()
          })

        } else if ((interaction.values[0]) === "edit_list_17_remove") {

          db.database.set(String("partner_17"), " ")

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color}`)
            .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
            .setTitle(`${emoji.link}${partner.title.text1}`)
            .setDescription(db.database.get(String("partner_message")) + '\n\n ```' +
              "1) " + db.database.get(String("partner_1")) + '\n' +
              "2) " + db.database.get(String("partner_2")) + '\n' +
              "3) " + db.database.get(String("partner_3")) + '\n' +
              "4) " + db.database.get(String("partner_4")) + '\n' +
              "5) " + db.database.get(String("partner_5")) + '\n' +
              "6) " + db.database.get(String("partner_6")) + '\n' +
              "7) " + db.database.get(String("partner_7")) + '\n' +
              "8) " + db.database.get(String("partner_8")) + '\n' +
              "9) " + db.database.get(String("partner_9")) + '\n' +
              "10) " + db.database.get(String("partner_10")) + '\n' +
              "11) " + db.database.get(String("partner_11")) + '\n' +
              "12) " + db.database.get(String("partner_12")) + '\n' +
              "13) " + db.database.get(String("partner_13")) + '\n' +
              "14) " + db.database.get(String("partner_14")) + '\n' +
              "15) " + db.database.get(String("partner_15")) + '\n' +
              "16) " + db.database.get(String("partner_16")) + '\n' +
              "17) " + db.database.get(String("partner_17")) + '\n' +
              "18) " + db.database.get(String("partner_18")) + '\n' +
              "19) " + db.database.get(String("partner_19")) + '\n' +
              "20) " + db.database.get(String("partner_20")) + '\n' + '```')

          interaction.message.edit({ embeds: ([embed]) })

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color_good}`)
            .setDescription(`${emoji.tick}${general.response.save_modifications}`)

          interaction.channel.send({
            embeds: ([embed])
          }).then(async (response_save) => {
            interaction.deferUpdate()
            await delay(Number(3) * 1000)
            response_save.delete()
          })


        } else if ((interaction.values[0]) === "edit_list_18_remove") {

          db.database.set(String("partner_18"), " ")

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color}`)
            .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
            .setTitle(`${emoji.link}${partner.title.text1}`)
            .setDescription(db.database.get(String("partner_message")) + '\n\n ```' +
              "1) " + db.database.get(String("partner_1")) + '\n' +
              "2) " + db.database.get(String("partner_2")) + '\n' +
              "3) " + db.database.get(String("partner_3")) + '\n' +
              "4) " + db.database.get(String("partner_4")) + '\n' +
              "5) " + db.database.get(String("partner_5")) + '\n' +
              "6) " + db.database.get(String("partner_6")) + '\n' +
              "7) " + db.database.get(String("partner_7")) + '\n' +
              "8) " + db.database.get(String("partner_8")) + '\n' +
              "9) " + db.database.get(String("partner_9")) + '\n' +
              "10) " + db.database.get(String("partner_10")) + '\n' +
              "11) " + db.database.get(String("partner_11")) + '\n' +
              "12) " + db.database.get(String("partner_12")) + '\n' +
              "13) " + db.database.get(String("partner_13")) + '\n' +
              "14) " + db.database.get(String("partner_14")) + '\n' +
              "15) " + db.database.get(String("partner_15")) + '\n' +
              "16) " + db.database.get(String("partner_16")) + '\n' +
              "17) " + db.database.get(String("partner_17")) + '\n' +
              "18) " + db.database.get(String("partner_18")) + '\n' +
              "19) " + db.database.get(String("partner_19")) + '\n' +
              "20) " + db.database.get(String("partner_20")) + '\n' + '```')

          interaction.message.edit({ embeds: ([embed]) })

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color_good}`)
            .setDescription(`${emoji.tick}${general.response.save_modifications}`)

          interaction.channel.send({
            embeds: ([embed])
          }).then(async (response_save) => {
            interaction.deferUpdate()
            await delay(Number(3) * 1000)
            response_save.delete()
          })


        } else if ((interaction.values[0]) === "edit_list_19_remove") {

          db.database.set(String("partner_19"), " ")

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color}`)
            .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
            .setTitle(`${emoji.link}${partner.title.text1}`)
            .setDescription(db.database.get(String("partner_message")) + '\n\n ```' +
              "1) " + db.database.get(String("partner_1")) + '\n' +
              "2) " + db.database.get(String("partner_2")) + '\n' +
              "3) " + db.database.get(String("partner_3")) + '\n' +
              "4) " + db.database.get(String("partner_4")) + '\n' +
              "5) " + db.database.get(String("partner_5")) + '\n' +
              "6) " + db.database.get(String("partner_6")) + '\n' +
              "7) " + db.database.get(String("partner_7")) + '\n' +
              "8) " + db.database.get(String("partner_8")) + '\n' +
              "9) " + db.database.get(String("partner_9")) + '\n' +
              "10) " + db.database.get(String("partner_10")) + '\n' +
              "11) " + db.database.get(String("partner_11")) + '\n' +
              "12) " + db.database.get(String("partner_12")) + '\n' +
              "13) " + db.database.get(String("partner_13")) + '\n' +
              "14) " + db.database.get(String("partner_14")) + '\n' +
              "15) " + db.database.get(String("partner_15")) + '\n' +
              "16) " + db.database.get(String("partner_16")) + '\n' +
              "17) " + db.database.get(String("partner_17")) + '\n' +
              "18) " + db.database.get(String("partner_18")) + '\n' +
              "19) " + db.database.get(String("partner_19")) + '\n' +
              "20) " + db.database.get(String("partner_20")) + '\n' + '```')

          interaction.message.edit({ embeds: ([embed]) })

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color_good}`)
            .setDescription(`${emoji.tick}${general.response.save_modifications}`)

          interaction.channel.send({
            embeds: ([embed])
          }).then(async (response_save) => {
            interaction.deferUpdate()
            await delay(Number(3) * 1000)
            response_save.delete()
          })


        } else if ((interaction.values[0]) === "edit_list_20_remove") {

          db.database.set(String("partner_20"), " ")

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color}`)
            .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
            .setTitle(`${emoji.link}${partner.title.text1}`)
            .setDescription(db.database.get(String("partner_message")) + '\n\n ```' +
              "1) " + db.database.get(String("partner_1")) + '\n' +
              "2) " + db.database.get(String("partner_2")) + '\n' +
              "3) " + db.database.get(String("partner_3")) + '\n' +
              "4) " + db.database.get(String("partner_4")) + '\n' +
              "5) " + db.database.get(String("partner_5")) + '\n' +
              "6) " + db.database.get(String("partner_6")) + '\n' +
              "7) " + db.database.get(String("partner_7")) + '\n' +
              "8) " + db.database.get(String("partner_8")) + '\n' +
              "9) " + db.database.get(String("partner_9")) + '\n' +
              "10) " + db.database.get(String("partner_10")) + '\n' +
              "11) " + db.database.get(String("partner_11")) + '\n' +
              "12) " + db.database.get(String("partner_12")) + '\n' +
              "13) " + db.database.get(String("partner_13")) + '\n' +
              "14) " + db.database.get(String("partner_14")) + '\n' +
              "15) " + db.database.get(String("partner_15")) + '\n' +
              "16) " + db.database.get(String("partner_16")) + '\n' +
              "17) " + db.database.get(String("partner_17")) + '\n' +
              "18) " + db.database.get(String("partner_18")) + '\n' +
              "19) " + db.database.get(String("partner_19")) + '\n' +
              "20) " + db.database.get(String("partner_20")) + '\n' + '```')

          interaction.message.edit({ embeds: ([embed]) })

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color_good}`)
            .setDescription(`${emoji.tick}${general.response.save_modifications}`)

          interaction.channel.send({
            embeds: ([embed])
          }).then(async (response_save) => {
            interaction.deferUpdate()
            await delay(Number(3) * 1000)
            response_save.delete()
          })
        }
      } else {
        ////Erreur Perms Admins\\\\

        var embed = new EmbedBuilder()
          .setColor(`${config.color.color_error}`)
          .setDescription(`${emoji.wrong}${general.error.perms_admin}`)

        interaction.reply({
          embeds: ([embed]), ephemeral: true
        })
      }
    }
  }

  if (interaction.customId === "menu_editlist_partner") {
    if ((db.module.get(String("partenariat_mp"))) === "on") {
      if ((interaction.member.permissions.has(PermissionsBitField.Flags.Administrator)) || (interaction.member.id === dev)) {

        if ((interaction.values[0]) === "edit_list_1") {
          interaction.deferUpdate()
          interaction.channel.send(`${emoji.pen}${partner.description.text1}`).then(async (question) => {
            (interaction.channel).awaitMessages({
              filter: (m) => m.author.id === interaction.member.id,
              time: (500 * 60 * 100),
              max: 1
            }).then(async (collected) => {
              reply = collected.first().content;
              message = collected.first();
              interaction.channel.bulkDelete(1)
              question.delete()
              await delay(Number(1) * 1000)
              if (!(reply === "cancel")) {

                db.database.set(String("partner_1"), reply)

                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color}`)
                  .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
                  .setTitle(`${emoji.link}${partner.title.text1}`)
                  .setDescription(db.database.get(String("partner_message")) + '\n\n ```' +
                    "1) " + db.database.get(String("partner_1")) + '\n' +
                    "2) " + db.database.get(String("partner_2")) + '\n' +
                    "3) " + db.database.get(String("partner_3")) + '\n' +
                    "4) " + db.database.get(String("partner_4")) + '\n' +
                    "5) " + db.database.get(String("partner_5")) + '\n' +
                    "6) " + db.database.get(String("partner_6")) + '\n' +
                    "7) " + db.database.get(String("partner_7")) + '\n' +
                    "8) " + db.database.get(String("partner_8")) + '\n' +
                    "9) " + db.database.get(String("partner_9")) + '\n' +
                    "10) " + db.database.get(String("partner_10")) + '\n' +
                    "11) " + db.database.get(String("partner_11")) + '\n' +
                    "12) " + db.database.get(String("partner_12")) + '\n' +
                    "13) " + db.database.get(String("partner_13")) + '\n' +
                    "14) " + db.database.get(String("partner_14")) + '\n' +
                    "15) " + db.database.get(String("partner_15")) + '\n' +
                    "16) " + db.database.get(String("partner_16")) + '\n' +
                    "17) " + db.database.get(String("partner_17")) + '\n' +
                    "18) " + db.database.get(String("partner_18")) + '\n' +
                    "19) " + db.database.get(String("partner_19")) + '\n' +
                    "20) " + db.database.get(String("partner_20")) + '\n' + '```')

                interaction.message.edit({ embeds: ([embed]) })


                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color_good}`)
                  .setDescription(`${emoji.tick}${general.response.save_modifications}`)

                interaction.channel.send({
                  embeds: ([embed])
                }).then(async (response_save) => {
                  await delay(Number(3) * 1000)
                  response_save.delete()
                })


              }
            })
          })
        } else if ((interaction.values[0]) === "edit_list_2") {
          interaction.deferUpdate()
          interaction.channel.send(`${emoji.pen}${partner.description.text1}`).then(async (question) => {
            (interaction.channel).awaitMessages({
              filter: (m) => m.author.id === interaction.member.id,
              time: (500 * 60 * 100),
              max: 1
            }).then(async (collected) => {
              reply = collected.first().content;
              message = collected.first();
              interaction.channel.bulkDelete(1)
              question.delete()
              await delay(Number(1) * 1000)
              if (!(reply === "cancel")) {

                db.database.set(String("partner_2"), reply)

                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color}`)
                  .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
                  .setTitle(`${emoji.link}${partner.title.text1}`)
                  .setDescription(db.database.get(String("partner_message")) + '\n\n ```' +
                    "1) " + db.database.get(String("partner_1")) + '\n' +
                    "2) " + db.database.get(String("partner_2")) + '\n' +
                    "3) " + db.database.get(String("partner_3")) + '\n' +
                    "4) " + db.database.get(String("partner_4")) + '\n' +
                    "5) " + db.database.get(String("partner_5")) + '\n' +
                    "6) " + db.database.get(String("partner_6")) + '\n' +
                    "7) " + db.database.get(String("partner_7")) + '\n' +
                    "8) " + db.database.get(String("partner_8")) + '\n' +
                    "9) " + db.database.get(String("partner_9")) + '\n' +
                    "10) " + db.database.get(String("partner_10")) + '\n' +
                    "11) " + db.database.get(String("partner_11")) + '\n' +
                    "12) " + db.database.get(String("partner_12")) + '\n' +
                    "13) " + db.database.get(String("partner_13")) + '\n' +
                    "14) " + db.database.get(String("partner_14")) + '\n' +
                    "15) " + db.database.get(String("partner_15")) + '\n' +
                    "16) " + db.database.get(String("partner_16")) + '\n' +
                    "17) " + db.database.get(String("partner_17")) + '\n' +
                    "18) " + db.database.get(String("partner_18")) + '\n' +
                    "19) " + db.database.get(String("partner_19")) + '\n' +
                    "20) " + db.database.get(String("partner_20")) + '\n' + '```')

                interaction.message.edit({ embeds: ([embed]) })


                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color_good}`)
                  .setDescription(`${emoji.tick}${general.response.save_modifications}`)

                interaction.channel.send({
                  embeds: ([embed])
                }).then(async (response_save) => {
                  await delay(Number(3) * 1000)
                  response_save.delete()
                })


              }
            })
          })

        } else if ((interaction.values[0]) === "edit_list_3") {
          interaction.deferUpdate()
          interaction.channel.send(`${emoji.pen}${partner.description.text1}`).then(async (question) => {
            (interaction.channel).awaitMessages({
              filter: (m) => m.author.id === interaction.member.id,
              time: (500 * 60 * 100),
              max: 1
            }).then(async (collected) => {
              reply = collected.first().content;
              message = collected.first();
              interaction.channel.bulkDelete(1)
              question.delete()
              await delay(Number(1) * 1000)
              if (!(reply === "cancel")) {

                db.database.set(String("partner_3"), reply)

                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color}`)
                  .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
                  .setTitle(`${emoji.link}${partner.title.text1}`)
                  .setDescription(db.database.get(String("partner_message")) + '\n\n ```' +
                    "1) " + db.database.get(String("partner_1")) + '\n' +
                    "2) " + db.database.get(String("partner_2")) + '\n' +
                    "3) " + db.database.get(String("partner_3")) + '\n' +
                    "4) " + db.database.get(String("partner_4")) + '\n' +
                    "5) " + db.database.get(String("partner_5")) + '\n' +
                    "6) " + db.database.get(String("partner_6")) + '\n' +
                    "7) " + db.database.get(String("partner_7")) + '\n' +
                    "8) " + db.database.get(String("partner_8")) + '\n' +
                    "9) " + db.database.get(String("partner_9")) + '\n' +
                    "10) " + db.database.get(String("partner_10")) + '\n' +
                    "11) " + db.database.get(String("partner_11")) + '\n' +
                    "12) " + db.database.get(String("partner_12")) + '\n' +
                    "13) " + db.database.get(String("partner_13")) + '\n' +
                    "14) " + db.database.get(String("partner_14")) + '\n' +
                    "15) " + db.database.get(String("partner_15")) + '\n' +
                    "16) " + db.database.get(String("partner_16")) + '\n' +
                    "17) " + db.database.get(String("partner_17")) + '\n' +
                    "18) " + db.database.get(String("partner_18")) + '\n' +
                    "19) " + db.database.get(String("partner_19")) + '\n' +
                    "20) " + db.database.get(String("partner_20")) + '\n' + '```')

                interaction.message.edit({ embeds: ([embed]) })


                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color_good}`)
                  .setDescription(`${emoji.tick}${general.response.save_modifications}`)

                interaction.channel.send({
                  embeds: ([embed])
                }).then(async (response_save) => {
                  await delay(Number(3) * 1000)
                  response_save.delete()
                })


              }
            })
          })

        } else if ((interaction.values[0]) === "edit_list_4") {
          interaction.deferUpdate()
          interaction.channel.send(`${emoji.pen}${partner.description.text1}`).then(async (question) => {
            (interaction.channel).awaitMessages({
              filter: (m) => m.author.id === interaction.member.id,
              time: (500 * 60 * 100),
              max: 1
            }).then(async (collected) => {
              reply = collected.first().content;
              message = collected.first();
              interaction.channel.bulkDelete(1)
              question.delete()
              await delay(Number(1) * 1000)
              if (!(reply === "cancel")) {

                db.database.set(String("partner_4"), reply)

                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color}`)
                  .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
                  .setTitle(`${emoji.link}${partner.title.text1}`)
                  .setDescription(db.database.get(String("partner_message")) + '\n\n ```' +
                    "1) " + db.database.get(String("partner_1")) + '\n' +
                    "2) " + db.database.get(String("partner_2")) + '\n' +
                    "3) " + db.database.get(String("partner_3")) + '\n' +
                    "4) " + db.database.get(String("partner_4")) + '\n' +
                    "5) " + db.database.get(String("partner_5")) + '\n' +
                    "6) " + db.database.get(String("partner_6")) + '\n' +
                    "7) " + db.database.get(String("partner_7")) + '\n' +
                    "8) " + db.database.get(String("partner_8")) + '\n' +
                    "9) " + db.database.get(String("partner_9")) + '\n' +
                    "10) " + db.database.get(String("partner_10")) + '\n' +
                    "11) " + db.database.get(String("partner_11")) + '\n' +
                    "12) " + db.database.get(String("partner_12")) + '\n' +
                    "13) " + db.database.get(String("partner_13")) + '\n' +
                    "14) " + db.database.get(String("partner_14")) + '\n' +
                    "15) " + db.database.get(String("partner_15")) + '\n' +
                    "16) " + db.database.get(String("partner_16")) + '\n' +
                    "17) " + db.database.get(String("partner_17")) + '\n' +
                    "18) " + db.database.get(String("partner_18")) + '\n' +
                    "19) " + db.database.get(String("partner_19")) + '\n' +
                    "20) " + db.database.get(String("partner_20")) + '\n' + '```')

                interaction.message.edit({ embeds: ([embed]) })


                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color_good}`)
                  .setDescription(`${emoji.tick}${general.response.save_modifications}`)

                interaction.channel.send({
                  embeds: ([embed])
                }).then(async (response_save) => {
                  await delay(Number(3) * 1000)
                  response_save.delete()
                })


              }
            })
          })

        } else if ((interaction.values[0]) === "edit_list_5") {
          interaction.deferUpdate()
          interaction.channel.send(`${emoji.pen}${partner.description.text1}`).then(async (question) => {
            (interaction.channel).awaitMessages({
              filter: (m) => m.author.id === interaction.member.id,
              time: (500 * 60 * 100),
              max: 1
            }).then(async (collected) => {
              reply = collected.first().content;
              message = collected.first();
              interaction.channel.bulkDelete(1)
              question.delete()
              await delay(Number(1) * 1000)
              if (!(reply === "cancel")) {

                db.database.set(String("partner_5"), reply)

                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color}`)
                  .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
                  .setTitle(`${emoji.link}${partner.title.text1}`)
                  .setDescription(db.database.get(String("partner_message")) + '\n\n ```' +
                    "1) " + db.database.get(String("partner_1")) + '\n' +
                    "2) " + db.database.get(String("partner_2")) + '\n' +
                    "3) " + db.database.get(String("partner_3")) + '\n' +
                    "4) " + db.database.get(String("partner_4")) + '\n' +
                    "5) " + db.database.get(String("partner_5")) + '\n' +
                    "6) " + db.database.get(String("partner_6")) + '\n' +
                    "7) " + db.database.get(String("partner_7")) + '\n' +
                    "8) " + db.database.get(String("partner_8")) + '\n' +
                    "9) " + db.database.get(String("partner_9")) + '\n' +
                    "10) " + db.database.get(String("partner_10")) + '\n' +
                    "11) " + db.database.get(String("partner_11")) + '\n' +
                    "12) " + db.database.get(String("partner_12")) + '\n' +
                    "13) " + db.database.get(String("partner_13")) + '\n' +
                    "14) " + db.database.get(String("partner_14")) + '\n' +
                    "15) " + db.database.get(String("partner_15")) + '\n' +
                    "16) " + db.database.get(String("partner_16")) + '\n' +
                    "17) " + db.database.get(String("partner_17")) + '\n' +
                    "18) " + db.database.get(String("partner_18")) + '\n' +
                    "19) " + db.database.get(String("partner_19")) + '\n' +
                    "20) " + db.database.get(String("partner_20")) + '\n' + '```')

                interaction.message.edit({ embeds: ([embed]) })


                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color_good}`)
                  .setDescription(`${emoji.tick}${general.response.save_modifications}`)

                interaction.channel.send({
                  embeds: ([embed])
                }).then(async (response_save) => {
                  await delay(Number(3) * 1000)
                  response_save.delete()
                })


              }
            })
          })

        } else if ((interaction.values[0]) === "edit_list_6") {
          interaction.deferUpdate()
          interaction.channel.send(`${emoji.pen}${partner.description.text1}`).then(async (question) => {
            (interaction.channel).awaitMessages({
              filter: (m) => m.author.id === interaction.member.id,
              time: (500 * 60 * 100),
              max: 1
            }).then(async (collected) => {
              reply = collected.first().content;
              message = collected.first();
              interaction.channel.bulkDelete(1)
              question.delete()
              await delay(Number(1) * 1000)
              if (!(reply === "cancel")) {

                db.database.set(String("partner_6"), reply)

                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color}`)
                  .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
                  .setTitle(`${emoji.link}${partner.title.text1}`)
                  .setDescription(db.database.get(String("partner_message")) + '\n\n ```' +
                    "1) " + db.database.get(String("partner_1")) + '\n' +
                    "2) " + db.database.get(String("partner_2")) + '\n' +
                    "3) " + db.database.get(String("partner_3")) + '\n' +
                    "4) " + db.database.get(String("partner_4")) + '\n' +
                    "5) " + db.database.get(String("partner_5")) + '\n' +
                    "6) " + db.database.get(String("partner_6")) + '\n' +
                    "7) " + db.database.get(String("partner_7")) + '\n' +
                    "8) " + db.database.get(String("partner_8")) + '\n' +
                    "9) " + db.database.get(String("partner_9")) + '\n' +
                    "10) " + db.database.get(String("partner_10")) + '\n' +
                    "11) " + db.database.get(String("partner_11")) + '\n' +
                    "12) " + db.database.get(String("partner_12")) + '\n' +
                    "13) " + db.database.get(String("partner_13")) + '\n' +
                    "14) " + db.database.get(String("partner_14")) + '\n' +
                    "15) " + db.database.get(String("partner_15")) + '\n' +
                    "16) " + db.database.get(String("partner_16")) + '\n' +
                    "17) " + db.database.get(String("partner_17")) + '\n' +
                    "18) " + db.database.get(String("partner_18")) + '\n' +
                    "19) " + db.database.get(String("partner_19")) + '\n' +
                    "20) " + db.database.get(String("partner_20")) + '\n' + '```')

                interaction.message.edit({ embeds: ([embed]) })


                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color_good}`)
                  .setDescription(`${emoji.tick}${general.response.save_modifications}`)

                interaction.channel.send({
                  embeds: ([embed])
                }).then(async (response_save) => {
                  await delay(Number(3) * 1000)
                  response_save.delete()
                })


              }
            })
          })

        } else if ((interaction.values[0]) === "edit_list_7") {
          interaction.deferUpdate()
          interaction.channel.send(`${emoji.pen}${partner.description.text1}`).then(async (question) => {
            (interaction.channel).awaitMessages({
              filter: (m) => m.author.id === interaction.member.id,
              time: (500 * 60 * 100),
              max: 1
            }).then(async (collected) => {
              reply = collected.first().content;
              message = collected.first();
              interaction.channel.bulkDelete(1)
              question.delete()
              await delay(Number(1) * 1000)
              if (!(reply === "cancel")) {

                db.database.set(String("partner_7"), reply)

                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color}`)
                  .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
                  .setTitle(`${emoji.link}${partner.title.text1}`)
                  .setDescription(db.database.get(String("partner_message")) + '\n\n ```' +
                    "1) " + db.database.get(String("partner_1")) + '\n' +
                    "2) " + db.database.get(String("partner_2")) + '\n' +
                    "3) " + db.database.get(String("partner_3")) + '\n' +
                    "4) " + db.database.get(String("partner_4")) + '\n' +
                    "5) " + db.database.get(String("partner_5")) + '\n' +
                    "6) " + db.database.get(String("partner_6")) + '\n' +
                    "7) " + db.database.get(String("partner_7")) + '\n' +
                    "8) " + db.database.get(String("partner_8")) + '\n' +
                    "9) " + db.database.get(String("partner_9")) + '\n' +
                    "10) " + db.database.get(String("partner_10")) + '\n' +
                    "11) " + db.database.get(String("partner_11")) + '\n' +
                    "12) " + db.database.get(String("partner_12")) + '\n' +
                    "13) " + db.database.get(String("partner_13")) + '\n' +
                    "14) " + db.database.get(String("partner_14")) + '\n' +
                    "15) " + db.database.get(String("partner_15")) + '\n' +
                    "16) " + db.database.get(String("partner_16")) + '\n' +
                    "17) " + db.database.get(String("partner_17")) + '\n' +
                    "18) " + db.database.get(String("partner_18")) + '\n' +
                    "19) " + db.database.get(String("partner_19")) + '\n' +
                    "20) " + db.database.get(String("partner_20")) + '\n' + '```')

                interaction.message.edit({ embeds: ([embed]) })


                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color_good}`)
                  .setDescription(`${emoji.tick}${general.response.save_modifications}`)

                interaction.channel.send({
                  embeds: ([embed])
                }).then(async (response_save) => {
                  await delay(Number(3) * 1000)
                  response_save.delete()
                })


              }
            })
          })

        } else if ((interaction.values[0]) === "edit_list_8") {
          interaction.deferUpdate()
          interaction.channel.send(`${emoji.pen}${partner.description.text1}`).then(async (question) => {
            (interaction.channel).awaitMessages({
              filter: (m) => m.author.id === interaction.member.id,
              time: (500 * 60 * 100),
              max: 1
            }).then(async (collected) => {
              reply = collected.first().content;
              message = collected.first();
              interaction.channel.bulkDelete(1)
              question.delete()
              await delay(Number(1) * 1000)
              if (!(reply === "cancel")) {

                db.database.set(String("partner_8"), reply)

                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color}`)
                  .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
                  .setTitle(`${emoji.link}${partner.title.text1}`)
                  .setDescription(db.database.get(String("partner_message")) + '\n\n ```' +
                    "1) " + db.database.get(String("partner_1")) + '\n' +
                    "2) " + db.database.get(String("partner_2")) + '\n' +
                    "3) " + db.database.get(String("partner_3")) + '\n' +
                    "4) " + db.database.get(String("partner_4")) + '\n' +
                    "5) " + db.database.get(String("partner_5")) + '\n' +
                    "6) " + db.database.get(String("partner_6")) + '\n' +
                    "7) " + db.database.get(String("partner_7")) + '\n' +
                    "8) " + db.database.get(String("partner_8")) + '\n' +
                    "9) " + db.database.get(String("partner_9")) + '\n' +
                    "10) " + db.database.get(String("partner_10")) + '\n' +
                    "11) " + db.database.get(String("partner_11")) + '\n' +
                    "12) " + db.database.get(String("partner_12")) + '\n' +
                    "13) " + db.database.get(String("partner_13")) + '\n' +
                    "14) " + db.database.get(String("partner_14")) + '\n' +
                    "15) " + db.database.get(String("partner_15")) + '\n' +
                    "16) " + db.database.get(String("partner_16")) + '\n' +
                    "17) " + db.database.get(String("partner_17")) + '\n' +
                    "18) " + db.database.get(String("partner_18")) + '\n' +
                    "19) " + db.database.get(String("partner_19")) + '\n' +
                    "20) " + db.database.get(String("partner_20")) + '\n' + '```')

                interaction.message.edit({ embeds: ([embed]) })


                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color_good}`)
                  .setDescription(`${emoji.tick}${general.response.save_modifications}`)

                interaction.channel.send({
                  embeds: ([embed])
                }).then(async (response_save) => {
                  await delay(Number(3) * 1000)
                  response_save.delete()
                })


              }
            })
          })

        } else if ((interaction.values[0]) === "edit_list_9") {
          interaction.deferUpdate()
          interaction.channel.send(`${emoji.pen}${partner.description.text1}`).then(async (question) => {
            (interaction.channel).awaitMessages({
              filter: (m) => m.author.id === interaction.member.id,
              time: (500 * 60 * 100),
              max: 1
            }).then(async (collected) => {
              reply = collected.first().content;
              message = collected.first();
              interaction.channel.bulkDelete(1)
              question.delete()
              await delay(Number(1) * 1000)
              if (!(reply === "cancel")) {

                db.database.set(String("partner_9"), reply)

                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color}`)
                  .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
                  .setTitle(`${emoji.link}${partner.title.text1}`)
                  .setDescription(db.database.get(String("partner_message")) + '\n\n ```' +
                    "1) " + db.database.get(String("partner_1")) + '\n' +
                    "2) " + db.database.get(String("partner_2")) + '\n' +
                    "3) " + db.database.get(String("partner_3")) + '\n' +
                    "4) " + db.database.get(String("partner_4")) + '\n' +
                    "5) " + db.database.get(String("partner_5")) + '\n' +
                    "6) " + db.database.get(String("partner_6")) + '\n' +
                    "7) " + db.database.get(String("partner_7")) + '\n' +
                    "8) " + db.database.get(String("partner_8")) + '\n' +
                    "9) " + db.database.get(String("partner_9")) + '\n' +
                    "10) " + db.database.get(String("partner_10")) + '\n' +
                    "11) " + db.database.get(String("partner_11")) + '\n' +
                    "12) " + db.database.get(String("partner_12")) + '\n' +
                    "13) " + db.database.get(String("partner_13")) + '\n' +
                    "14) " + db.database.get(String("partner_14")) + '\n' +
                    "15) " + db.database.get(String("partner_15")) + '\n' +
                    "16) " + db.database.get(String("partner_16")) + '\n' +
                    "17) " + db.database.get(String("partner_17")) + '\n' +
                    "18) " + db.database.get(String("partner_18")) + '\n' +
                    "19) " + db.database.get(String("partner_19")) + '\n' +
                    "20) " + db.database.get(String("partner_20")) + '\n' + '```')

                interaction.message.edit({ embeds: ([embed]) })


                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color_good}`)
                  .setDescription(`${emoji.tick}${general.response.save_modifications}`)

                interaction.channel.send({
                  embeds: ([embed])
                }).then(async (response_save) => {
                  await delay(Number(3) * 1000)
                  response_save.delete()
                })


              }
            })
          })

        } else if ((interaction.values[0]) === "edit_list_10") {
          interaction.deferUpdate()
          interaction.channel.send(`${emoji.pen}${partner.description.text1}`).then(async (question) => {
            (interaction.channel).awaitMessages({
              filter: (m) => m.author.id === interaction.member.id,
              time: (500 * 60 * 100),
              max: 1
            }).then(async (collected) => {
              reply = collected.first().content;
              message = collected.first();
              interaction.channel.bulkDelete(1)
              question.delete()
              await delay(Number(1) * 1000)
              if (!(reply === "cancel")) {

                db.database.set(String("partner_10"), reply)

                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color}`)
                  .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
                  .setTitle(`${emoji.link}${partner.title.text1}`)
                  .setDescription(db.database.get(String("partner_message")) + '\n\n ```' +
                    "1) " + db.database.get(String("partner_1")) + '\n' +
                    "2) " + db.database.get(String("partner_2")) + '\n' +
                    "3) " + db.database.get(String("partner_3")) + '\n' +
                    "4) " + db.database.get(String("partner_4")) + '\n' +
                    "5) " + db.database.get(String("partner_5")) + '\n' +
                    "6) " + db.database.get(String("partner_6")) + '\n' +
                    "7) " + db.database.get(String("partner_7")) + '\n' +
                    "8) " + db.database.get(String("partner_8")) + '\n' +
                    "9) " + db.database.get(String("partner_9")) + '\n' +
                    "10) " + db.database.get(String("partner_10")) + '\n' +
                    "11) " + db.database.get(String("partner_11")) + '\n' +
                    "12) " + db.database.get(String("partner_12")) + '\n' +
                    "13) " + db.database.get(String("partner_13")) + '\n' +
                    "14) " + db.database.get(String("partner_14")) + '\n' +
                    "15) " + db.database.get(String("partner_15")) + '\n' +
                    "16) " + db.database.get(String("partner_16")) + '\n' +
                    "17) " + db.database.get(String("partner_17")) + '\n' +
                    "18) " + db.database.get(String("partner_18")) + '\n' +
                    "19) " + db.database.get(String("partner_19")) + '\n' +
                    "20) " + db.database.get(String("partner_20")) + '\n' + '```')

                interaction.message.edit({ embeds: ([embed]) })


                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color_good}`)
                  .setDescription(`${emoji.tick}${general.response.save_modifications}`)

                interaction.channel.send({
                  embeds: ([embed])
                }).then(async (response_save) => {
                  await delay(Number(3) * 1000)
                  response_save.delete()
                })


              }
            })
          })

        } else if ((interaction.values[0]) === "edit_list_11") {
          interaction.deferUpdate()
          interaction.channel.send(`${emoji.pen}${partner.description.text1}`).then(async (question) => {
            (interaction.channel).awaitMessages({
              filter: (m) => m.author.id === interaction.member.id,
              time: (500 * 60 * 100),
              max: 1
            }).then(async (collected) => {
              reply = collected.first().content;
              message = collected.first();
              interaction.channel.bulkDelete(1)
              question.delete()
              await delay(Number(1) * 1000)
              if (!(reply === "cancel")) {

                db.database.set(String("partner_11"), reply)

                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color}`)
                  .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
                  .setTitle(`${emoji.link}${partner.title.text1}`)
                  .setDescription(db.database.get(String("partner_message")) + '\n\n ```' +
                    "1) " + db.database.get(String("partner_1")) + '\n' +
                    "2) " + db.database.get(String("partner_2")) + '\n' +
                    "3) " + db.database.get(String("partner_3")) + '\n' +
                    "4) " + db.database.get(String("partner_4")) + '\n' +
                    "5) " + db.database.get(String("partner_5")) + '\n' +
                    "6) " + db.database.get(String("partner_6")) + '\n' +
                    "7) " + db.database.get(String("partner_7")) + '\n' +
                    "8) " + db.database.get(String("partner_8")) + '\n' +
                    "9) " + db.database.get(String("partner_9")) + '\n' +
                    "10) " + db.database.get(String("partner_10")) + '\n' +
                    "11) " + db.database.get(String("partner_11")) + '\n' +
                    "12) " + db.database.get(String("partner_12")) + '\n' +
                    "13) " + db.database.get(String("partner_13")) + '\n' +
                    "14) " + db.database.get(String("partner_14")) + '\n' +
                    "15) " + db.database.get(String("partner_15")) + '\n' +
                    "16) " + db.database.get(String("partner_16")) + '\n' +
                    "17) " + db.database.get(String("partner_17")) + '\n' +
                    "18) " + db.database.get(String("partner_18")) + '\n' +
                    "19) " + db.database.get(String("partner_19")) + '\n' +
                    "20) " + db.database.get(String("partner_20")) + '\n' + '```')

                interaction.message.edit({ embeds: ([embed]) })


                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color_good}`)
                  .setDescription(`${emoji.tick}${general.response.save_modifications}`)

                interaction.channel.send({
                  embeds: ([embed])
                }).then(async (response_save) => {
                  await delay(Number(3) * 1000)
                  response_save.delete()
                })


              }
            })
          })

        } else if ((interaction.values[0]) === "edit_list_12") {
          interaction.deferUpdate()
          interaction.channel.send(`${emoji.pen}${partner.description.text1}`).then(async (question) => {
            (interaction.channel).awaitMessages({
              filter: (m) => m.author.id === interaction.member.id,
              time: (500 * 60 * 100),
              max: 1
            }).then(async (collected) => {
              reply = collected.first().content;
              message = collected.first();
              interaction.channel.bulkDelete(1)
              question.delete()
              await delay(Number(1) * 1000)
              if (!(reply === "cancel")) {

                db.database.set(String("partner_12"), reply)

                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color}`)
                  .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
                  .setTitle(`${emoji.link}${partner.title.text1}`)
                  .setDescription(db.database.get(String("partner_message")) + '\n\n ```' +
                    "1) " + db.database.get(String("partner_1")) + '\n' +
                    "2) " + db.database.get(String("partner_2")) + '\n' +
                    "3) " + db.database.get(String("partner_3")) + '\n' +
                    "4) " + db.database.get(String("partner_4")) + '\n' +
                    "5) " + db.database.get(String("partner_5")) + '\n' +
                    "6) " + db.database.get(String("partner_6")) + '\n' +
                    "7) " + db.database.get(String("partner_7")) + '\n' +
                    "8) " + db.database.get(String("partner_8")) + '\n' +
                    "9) " + db.database.get(String("partner_9")) + '\n' +
                    "10) " + db.database.get(String("partner_10")) + '\n' +
                    "11) " + db.database.get(String("partner_11")) + '\n' +
                    "12) " + db.database.get(String("partner_12")) + '\n' +
                    "13) " + db.database.get(String("partner_13")) + '\n' +
                    "14) " + db.database.get(String("partner_14")) + '\n' +
                    "15) " + db.database.get(String("partner_15")) + '\n' +
                    "16) " + db.database.get(String("partner_16")) + '\n' +
                    "17) " + db.database.get(String("partner_17")) + '\n' +
                    "18) " + db.database.get(String("partner_18")) + '\n' +
                    "19) " + db.database.get(String("partner_19")) + '\n' +
                    "20) " + db.database.get(String("partner_20")) + '\n' + '```')

                interaction.message.edit({ embeds: ([embed]) })


                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color_good}`)
                  .setDescription(`${emoji.tick}${general.response.save_modifications}`)

                interaction.channel.send({
                  embeds: ([embed])
                }).then(async (response_save) => {
                  await delay(Number(3) * 1000)
                  response_save.delete()
                })


              }
            })
          })

        } else if ((interaction.values[0]) === "edit_list_13") {
          interaction.deferUpdate()
          interaction.channel.send(`${emoji.pen}${partner.description.text1}`).then(async (question) => {
            (interaction.channel).awaitMessages({
              filter: (m) => m.author.id === interaction.member.id,
              time: (500 * 60 * 100),
              max: 1
            }).then(async (collected) => {
              reply = collected.first().content;
              message = collected.first();
              interaction.channel.bulkDelete(1)
              question.delete()
              await delay(Number(1) * 1000)
              if (!(reply === "cancel")) {

                db.database.set(String("partner_13"), reply)

                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color}`)
                  .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
                  .setTitle(`${emoji.link}${partner.title.text1}`)
                  .setDescription(db.database.get(String("partner_message")) + '\n\n ```' +
                    "1) " + db.database.get(String("partner_1")) + '\n' +
                    "2) " + db.database.get(String("partner_2")) + '\n' +
                    "3) " + db.database.get(String("partner_3")) + '\n' +
                    "4) " + db.database.get(String("partner_4")) + '\n' +
                    "5) " + db.database.get(String("partner_5")) + '\n' +
                    "6) " + db.database.get(String("partner_6")) + '\n' +
                    "7) " + db.database.get(String("partner_7")) + '\n' +
                    "8) " + db.database.get(String("partner_8")) + '\n' +
                    "9) " + db.database.get(String("partner_9")) + '\n' +
                    "10) " + db.database.get(String("partner_10")) + '\n' +
                    "11) " + db.database.get(String("partner_11")) + '\n' +
                    "12) " + db.database.get(String("partner_12")) + '\n' +
                    "13) " + db.database.get(String("partner_13")) + '\n' +
                    "14) " + db.database.get(String("partner_14")) + '\n' +
                    "15) " + db.database.get(String("partner_15")) + '\n' +
                    "16) " + db.database.get(String("partner_16")) + '\n' +
                    "17) " + db.database.get(String("partner_17")) + '\n' +
                    "18) " + db.database.get(String("partner_18")) + '\n' +
                    "19) " + db.database.get(String("partner_19")) + '\n' +
                    "20) " + db.database.get(String("partner_20")) + '\n' + '```')

                interaction.message.edit({ embeds: ([embed]) })


                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color_good}`)
                  .setDescription(`${emoji.tick}${general.response.save_modifications}`)

                interaction.channel.send({
                  embeds: ([embed])
                }).then(async (response_save) => {
                  await delay(Number(3) * 1000)
                  response_save.delete()
                })


              }
            })
          })

        } else if ((interaction.values[0]) === "edit_list_14") {
          interaction.deferUpdate()
          interaction.channel.send(`${emoji.pen}${partner.description.text1}`).then(async (question) => {
            (interaction.channel).awaitMessages({
              filter: (m) => m.author.id === interaction.member.id,
              time: (500 * 60 * 100),
              max: 1
            }).then(async (collected) => {
              reply = collected.first().content;
              message = collected.first();
              interaction.channel.bulkDelete(1)
              question.delete()
              await delay(Number(1) * 1000)
              if (!(reply === "cancel")) {

                db.database.set(String("partner_14"), reply)

                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color}`)
                  .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
                  .setTitle(`${emoji.link}${partner.title.text1}`)
                  .setDescription(db.database.get(String("partner_message")) + '\n\n ```' +
                    "1) " + db.database.get(String("partner_1")) + '\n' +
                    "2) " + db.database.get(String("partner_2")) + '\n' +
                    "3) " + db.database.get(String("partner_3")) + '\n' +
                    "4) " + db.database.get(String("partner_4")) + '\n' +
                    "5) " + db.database.get(String("partner_5")) + '\n' +
                    "6) " + db.database.get(String("partner_6")) + '\n' +
                    "7) " + db.database.get(String("partner_7")) + '\n' +
                    "8) " + db.database.get(String("partner_8")) + '\n' +
                    "9) " + db.database.get(String("partner_9")) + '\n' +
                    "10) " + db.database.get(String("partner_10")) + '\n' +
                    "11) " + db.database.get(String("partner_11")) + '\n' +
                    "12) " + db.database.get(String("partner_12")) + '\n' +
                    "13) " + db.database.get(String("partner_13")) + '\n' +
                    "14) " + db.database.get(String("partner_14")) + '\n' +
                    "15) " + db.database.get(String("partner_15")) + '\n' +
                    "16) " + db.database.get(String("partner_16")) + '\n' +
                    "17) " + db.database.get(String("partner_17")) + '\n' +
                    "18) " + db.database.get(String("partner_18")) + '\n' +
                    "19) " + db.database.get(String("partner_19")) + '\n' +
                    "20) " + db.database.get(String("partner_20")) + '\n' + '```')

                interaction.message.edit({ embeds: ([embed]) })


                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color_good}`)
                  .setDescription(`${emoji.tick}${general.response.save_modifications}`)

                interaction.channel.send({
                  embeds: ([embed])
                }).then(async (response_save) => {
                  await delay(Number(3) * 1000)
                  response_save.delete()
                })


              }
            })
          })

        } else if ((interaction.values[0]) === "edit_list_15") {
          interaction.deferUpdate()
          interaction.channel.send(`${emoji.pen}${partner.description.text1}`).then(async (question) => {
            (interaction.channel).awaitMessages({
              filter: (m) => m.author.id === interaction.member.id,
              time: (500 * 60 * 100),
              max: 1
            }).then(async (collected) => {
              reply = collected.first().content;
              message = collected.first();
              interaction.channel.bulkDelete(1)
              question.delete()
              await delay(Number(1) * 1000)
              if (!(reply === "cancel")) {

                db.database.set(String("partner_15"), reply)

                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color}`)
                  .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
                  .setTitle(`${emoji.link}${partner.title.text1}`)
                  .setDescription(db.database.get(String("partner_message")) + '\n\n ```' +
                    "1) " + db.database.get(String("partner_1")) + '\n' +
                    "2) " + db.database.get(String("partner_2")) + '\n' +
                    "3) " + db.database.get(String("partner_3")) + '\n' +
                    "4) " + db.database.get(String("partner_4")) + '\n' +
                    "5) " + db.database.get(String("partner_5")) + '\n' +
                    "6) " + db.database.get(String("partner_6")) + '\n' +
                    "7) " + db.database.get(String("partner_7")) + '\n' +
                    "8) " + db.database.get(String("partner_8")) + '\n' +
                    "9) " + db.database.get(String("partner_9")) + '\n' +
                    "10) " + db.database.get(String("partner_10")) + '\n' +
                    "11) " + db.database.get(String("partner_11")) + '\n' +
                    "12) " + db.database.get(String("partner_12")) + '\n' +
                    "13) " + db.database.get(String("partner_13")) + '\n' +
                    "14) " + db.database.get(String("partner_14")) + '\n' +
                    "15) " + db.database.get(String("partner_15")) + '\n' +
                    "16) " + db.database.get(String("partner_16")) + '\n' +
                    "17) " + db.database.get(String("partner_17")) + '\n' +
                    "18) " + db.database.get(String("partner_18")) + '\n' +
                    "19) " + db.database.get(String("partner_19")) + '\n' +
                    "20) " + db.database.get(String("partner_20")) + '\n' + '```')

                interaction.message.edit({ embeds: ([embed]) })


                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color_good}`)
                  .setDescription(`${emoji.tick}${general.response.save_modifications}`)

                interaction.channel.send({
                  embeds: ([embed])
                }).then(async (response_save) => {
                  await delay(Number(3) * 1000)
                  response_save.delete()
                })


              }
            })
          })

        } else if ((interaction.values[0]) === "edit_list_16") {
          interaction.deferUpdate()
          interaction.channel.send(`${emoji.pen}${partner.description.text1}`).then(async (question) => {
            (interaction.channel).awaitMessages({
              filter: (m) => m.author.id === interaction.member.id,
              time: (500 * 60 * 100),
              max: 1
            }).then(async (collected) => {
              reply = collected.first().content;
              message = collected.first();
              interaction.channel.bulkDelete(1)
              question.delete()
              await delay(Number(1) * 1000)
              if (!(reply === "cancel")) {

                db.database.set(String("partner_16"), reply)

                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color}`)
                  .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
                  .setTitle(`${emoji.link}${partner.title.text1}`)
                  .setDescription(db.database.get(String("partner_message")) + '\n\n ```' +
                    "1) " + db.database.get(String("partner_1")) + '\n' +
                    "2) " + db.database.get(String("partner_2")) + '\n' +
                    "3) " + db.database.get(String("partner_3")) + '\n' +
                    "4) " + db.database.get(String("partner_4")) + '\n' +
                    "5) " + db.database.get(String("partner_5")) + '\n' +
                    "6) " + db.database.get(String("partner_6")) + '\n' +
                    "7) " + db.database.get(String("partner_7")) + '\n' +
                    "8) " + db.database.get(String("partner_8")) + '\n' +
                    "9) " + db.database.get(String("partner_9")) + '\n' +
                    "10) " + db.database.get(String("partner_10")) + '\n' +
                    "11) " + db.database.get(String("partner_11")) + '\n' +
                    "12) " + db.database.get(String("partner_12")) + '\n' +
                    "13) " + db.database.get(String("partner_13")) + '\n' +
                    "14) " + db.database.get(String("partner_14")) + '\n' +
                    "15) " + db.database.get(String("partner_15")) + '\n' +
                    "16) " + db.database.get(String("partner_16")) + '\n' +
                    "17) " + db.database.get(String("partner_17")) + '\n' +
                    "18) " + db.database.get(String("partner_18")) + '\n' +
                    "19) " + db.database.get(String("partner_19")) + '\n' +
                    "20) " + db.database.get(String("partner_20")) + '\n' + '```')

                interaction.message.edit({ embeds: ([embed]) })


                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color_good}`)
                  .setDescription(`${emoji.tick}${general.response.save_modifications}`)

                interaction.channel.send({
                  embeds: ([embed])
                }).then(async (response_save) => {
                  await delay(Number(3) * 1000)
                  response_save.delete()
                })


              }
            })
          })

        } else if ((interaction.values[0]) === "edit_list_17") {
          interaction.deferUpdate()
          interaction.channel.send(`${emoji.pen}${partner.description.text1}`).then(async (question) => {
            (interaction.channel).awaitMessages({
              filter: (m) => m.author.id === interaction.member.id,
              time: (500 * 60 * 100),
              max: 1
            }).then(async (collected) => {
              reply = collected.first().content;
              message = collected.first();
              interaction.channel.bulkDelete(1)
              question.delete()
              await delay(Number(1) * 1000)
              if (!(reply === "cancel")) {

                db.database.set(String("partner_17"), reply)

                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color}`)
                  .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
                  .setTitle(`${emoji.link}${partner.title.text1}`)
                  .setDescription(db.database.get(String("partner_message")) + '\n\n ```' +
                    "1) " + db.database.get(String("partner_1")) + '\n' +
                    "2) " + db.database.get(String("partner_2")) + '\n' +
                    "3) " + db.database.get(String("partner_3")) + '\n' +
                    "4) " + db.database.get(String("partner_4")) + '\n' +
                    "5) " + db.database.get(String("partner_5")) + '\n' +
                    "6) " + db.database.get(String("partner_6")) + '\n' +
                    "7) " + db.database.get(String("partner_7")) + '\n' +
                    "8) " + db.database.get(String("partner_8")) + '\n' +
                    "9) " + db.database.get(String("partner_9")) + '\n' +
                    "10) " + db.database.get(String("partner_10")) + '\n' +
                    "11) " + db.database.get(String("partner_11")) + '\n' +
                    "12) " + db.database.get(String("partner_12")) + '\n' +
                    "13) " + db.database.get(String("partner_13")) + '\n' +
                    "14) " + db.database.get(String("partner_14")) + '\n' +
                    "15) " + db.database.get(String("partner_15")) + '\n' +
                    "16) " + db.database.get(String("partner_16")) + '\n' +
                    "17) " + db.database.get(String("partner_17")) + '\n' +
                    "18) " + db.database.get(String("partner_18")) + '\n' +
                    "19) " + db.database.get(String("partner_19")) + '\n' +
                    "20) " + db.database.get(String("partner_20")) + '\n' + '```')

                interaction.message.edit({ embeds: ([embed]) })


                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color_good}`)
                  .setDescription(`${emoji.tick}${general.response.save_modifications}`)

                interaction.channel.send({
                  embeds: ([embed])
                }).then(async (response_save) => {
                  await delay(Number(3) * 1000)
                  response_save.delete()
                })


              }
            })
          })

        } else if ((interaction.values[0]) === "edit_list_18") {
          interaction.deferUpdate()
          interaction.channel.send(`${emoji.pen}${partner.description.text1}`).then(async (question) => {
            (interaction.channel).awaitMessages({
              filter: (m) => m.author.id === interaction.member.id,
              time: (500 * 60 * 100),
              max: 1
            }).then(async (collected) => {
              reply = collected.first().content;
              message = collected.first();
              interaction.channel.bulkDelete(1)
              question.delete()
              await delay(Number(1) * 1000)
              if (!(reply === "cancel")) {

                db.database.set(String("partner_18"), reply)

                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color}`)
                  .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
                  .setTitle(`${emoji.link}${partner.title.text1}`)
                  .setDescription(db.database.get(String("partner_message")) + '\n\n ```' +
                    "1) " + db.database.get(String("partner_1")) + '\n' +
                    "2) " + db.database.get(String("partner_2")) + '\n' +
                    "3) " + db.database.get(String("partner_3")) + '\n' +
                    "4) " + db.database.get(String("partner_4")) + '\n' +
                    "5) " + db.database.get(String("partner_5")) + '\n' +
                    "6) " + db.database.get(String("partner_6")) + '\n' +
                    "7) " + db.database.get(String("partner_7")) + '\n' +
                    "8) " + db.database.get(String("partner_8")) + '\n' +
                    "9) " + db.database.get(String("partner_9")) + '\n' +
                    "10) " + db.database.get(String("partner_10")) + '\n' +
                    "11) " + db.database.get(String("partner_11")) + '\n' +
                    "12) " + db.database.get(String("partner_12")) + '\n' +
                    "13) " + db.database.get(String("partner_13")) + '\n' +
                    "14) " + db.database.get(String("partner_14")) + '\n' +
                    "15) " + db.database.get(String("partner_15")) + '\n' +
                    "16) " + db.database.get(String("partner_16")) + '\n' +
                    "17) " + db.database.get(String("partner_17")) + '\n' +
                    "18) " + db.database.get(String("partner_18")) + '\n' +
                    "19) " + db.database.get(String("partner_19")) + '\n' +
                    "20) " + db.database.get(String("partner_20")) + '\n' + '```')

                interaction.message.edit({ embeds: ([embed]) })


                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color_good}`)
                  .setDescription(`${emoji.tick}${general.response.save_modifications}`)

                interaction.channel.send({
                  embeds: ([embed])
                }).then(async (response_save) => {
                  await delay(Number(3) * 1000)
                  response_save.delete()
                })


              }
            })
          })

        } else if ((interaction.values[0]) === "edit_list_19") {
          interaction.deferUpdate()
          interaction.channel.send(`${emoji.pen}${partner.description.text1}`).then(async (question) => {
            (interaction.channel).awaitMessages({
              filter: (m) => m.author.id === interaction.member.id,
              time: (500 * 60 * 100),
              max: 1
            }).then(async (collected) => {
              reply = collected.first().content;
              message = collected.first();
              interaction.channel.bulkDelete(1)
              question.delete()
              await delay(Number(1) * 1000)
              if (!(reply === "cancel")) {

                db.database.set(String("partner_19"), reply)

                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color}`)
                  .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
                  .setTitle(`${emoji.link}${partner.title.text1}`)
                  .setDescription(db.database.get(String("partner_message")) + '\n\n ```' +
                    "1) " + db.database.get(String("partner_1")) + '\n' +
                    "2) " + db.database.get(String("partner_2")) + '\n' +
                    "3) " + db.database.get(String("partner_3")) + '\n' +
                    "4) " + db.database.get(String("partner_4")) + '\n' +
                    "5) " + db.database.get(String("partner_5")) + '\n' +
                    "6) " + db.database.get(String("partner_6")) + '\n' +
                    "7) " + db.database.get(String("partner_7")) + '\n' +
                    "8) " + db.database.get(String("partner_8")) + '\n' +
                    "9) " + db.database.get(String("partner_9")) + '\n' +
                    "10) " + db.database.get(String("partner_10")) + '\n' +
                    "11) " + db.database.get(String("partner_11")) + '\n' +
                    "12) " + db.database.get(String("partner_12")) + '\n' +
                    "13) " + db.database.get(String("partner_13")) + '\n' +
                    "14) " + db.database.get(String("partner_14")) + '\n' +
                    "15) " + db.database.get(String("partner_15")) + '\n' +
                    "16) " + db.database.get(String("partner_16")) + '\n' +
                    "17) " + db.database.get(String("partner_17")) + '\n' +
                    "18) " + db.database.get(String("partner_18")) + '\n' +
                    "19) " + db.database.get(String("partner_19")) + '\n' +
                    "20) " + db.database.get(String("partner_20")) + '\n' + '```')

                interaction.message.edit({ embeds: ([embed]) })


                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color_good}`)
                  .setDescription(`${emoji.tick}${general.response.save_modifications}`)

                interaction.channel.send({
                  embeds: ([embed])
                }).then(async (response_save) => {
                  await delay(Number(3) * 1000)
                  response_save.delete()
                })


              }
            })
          })

        } else if ((interaction.values[0]) === "edit_list_20") {
          interaction.deferUpdate()
          interaction.channel.send(`${emoji.pen}${partner.description.text1}`).then(async (question) => {
            (interaction.channel).awaitMessages({
              filter: (m) => m.author.id === interaction.member.id,
              time: (500 * 60 * 100),
              max: 1
            }).then(async (collected) => {
              reply = collected.first().content;
              message = collected.first();
              interaction.channel.bulkDelete(1)
              question.delete()
              await delay(Number(1) * 1000)
              if (!(reply === "cancel")) {

                db.database.set(String("partner_20"), reply)

                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color}`)
                  .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
                  .setTitle(`${emoji.link}${partner.title.text1}`)
                  .setDescription(db.database.get(String("partner_message")) + '\n\n ```' +
                    "1) " + db.database.get(String("partner_1")) + '\n' +
                    "2) " + db.database.get(String("partner_2")) + '\n' +
                    "3) " + db.database.get(String("partner_3")) + '\n' +
                    "4) " + db.database.get(String("partner_4")) + '\n' +
                    "5) " + db.database.get(String("partner_5")) + '\n' +
                    "6) " + db.database.get(String("partner_6")) + '\n' +
                    "7) " + db.database.get(String("partner_7")) + '\n' +
                    "8) " + db.database.get(String("partner_8")) + '\n' +
                    "9) " + db.database.get(String("partner_9")) + '\n' +
                    "10) " + db.database.get(String("partner_10")) + '\n' +
                    "11) " + db.database.get(String("partner_11")) + '\n' +
                    "12) " + db.database.get(String("partner_12")) + '\n' +
                    "13) " + db.database.get(String("partner_13")) + '\n' +
                    "14) " + db.database.get(String("partner_14")) + '\n' +
                    "15) " + db.database.get(String("partner_15")) + '\n' +
                    "16) " + db.database.get(String("partner_16")) + '\n' +
                    "17) " + db.database.get(String("partner_17")) + '\n' +
                    "18) " + db.database.get(String("partner_18")) + '\n' +
                    "19) " + db.database.get(String("partner_19")) + '\n' +
                    "20) " + db.database.get(String("partner_20")) + '\n' + '```')

                interaction.message.edit({ embeds: ([embed]) })


                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color_good}`)
                  .setDescription(`${emoji.tick}${general.response.save_modifications}`)

                interaction.channel.send({
                  embeds: ([embed])
                }).then(async (response_save) => {
                  await delay(Number(3) * 1000)
                  response_save.delete()
                })


              }
            })
          })

        }
      } else {
        ////Erreur Perms Admins\\\\

        var embed = new EmbedBuilder()
          .setColor(`${config.color.color_error}`)
          .setDescription(`${emoji.wrong}${general.error.perms_admin}`)

        interaction.reply({
          embeds: ([embed]), ephemeral: true
        })
      }
    } else {
      var embed = new EmbedBuilder()
        .setColor(`${config.color.color_error}`)
        .setDescription(`${emoji.wrong}${general.error.module_activate1}` + ' *`Partenariat MP`* ' + `${general.error.module_activate2}`)

      interaction.reply({ embeds: ([embed]), ephemeral: true })
    }
  }

  if (interaction.customId === "send_partner_test") {
    if ((db.module.get(String("partenariat_mp"))) === "on") {

      interaction.member.send({
        content: db.database.get(String("partner_message")) + '\n\n' +
          db.database.get(String("partner_1")) + '\n' +
          db.database.get(String("partner_2")) + '\n' +
          db.database.get(String("partner_3")) + '\n' +
          db.database.get(String("partner_4")) + '\n' +
          db.database.get(String("partner_5")) + '\n' +
          db.database.get(String("partner_6")) + '\n' +
          db.database.get(String("partner_7")) + '\n' +
          db.database.get(String("partner_8")) + '\n' +
          db.database.get(String("partner_9")) + '\n' +
          db.database.get(String("partner_10")) + '\n' +
          db.database.get(String("partner_11")) + '\n' +
          db.database.get(String("partner_12")) + '\n' +
          db.database.get(String("partner_13")) + '\n' +
          db.database.get(String("partner_14")) + '\n' +
          db.database.get(String("partner_15")) + '\n' +
          db.database.get(String("partner_16")) + '\n' +
          db.database.get(String("partner_17")) + '\n' +
          db.database.get(String("partner_18")) + '\n' +
          db.database.get(String("partner_19")) + '\n' +
          db.database.get(String("partner_20")) + '\n'
      })

      interaction.deferUpdate()

    } else {
      var embed = new EmbedBuilder()
        .setColor(`${config.color.color_error}`)
        .setDescription(`${emoji.wrong}${general.error.module_activate1}` + ' *`Partenariat MP`* ' + `${general.error.module_activate2}`)

      interaction.channel.send({
        embeds: ([embed]), ephemeral: true
      }).then(async (response) => {
        interaction.deferUpdate()
        await delay(Number(3) * 1000)
        await response.delete()
      })
    }
  }

  if (interaction.commandName === "Signaler") {
    if ((db.module.get(String('report'))) === "on") {
      if (((db.database.get(String(interaction.member.id + '-cooldown_report'))) <= (String(Math.floor(new Date().getTime() / 1000)))) || (!(db.database.has(String(interaction.member.id + '-cooldown_report'))))) {
        if ((!(db.database.has(String(interaction.options.getMessage('message').id + '-report_message')))) && (!(db.database.get(String(interaction.options.getMessage('message').id + '-report_message')) === "reported"))) {
          if (db.database.has(String("channel_report"))) {

            db.database.set(String(interaction.member.id + '-cooldown_report'), (Math.floor(new Date().getTime() / 1000)))
            db.database.add(String(interaction.member.id + '-cooldown_report'), 300)
            db.database.set(String(interaction.options.getMessage('message').id + '-report_message'), "reported")

            var embed = new EmbedBuilder()
              .setColor(`${config.color.color_good}`)
              .setDescription(`${emoji.tick}${report.description.text7}`)

            interaction.reply({ embeds: ([embed]) })


            var embed = new EmbedBuilder()
              .setColor(`${config.color.color_error}`)
              .setTimestamp()
              .setTitle(`${emoji.warn}${report.title.text1}`)
              .setDescription(`${emoji.community}${report.description.text5}` + '<@' + interaction.options.getMessage('message').author.id + '> *`/ ' + interaction.options.getMessage('message').author.tag + ' / ' + interaction.options.getMessage('message').author.id + '`*\n'
                + `${emoji.moderator}${report.description.text6}` + '<@' + interaction.member.id + '> *`/ ' + interaction.user.tag + ' / ' + interaction.member.id + '`*\n'
                + `${emoji.file}${report.description.text8}` + '<#' + interaction.channel.id + '> *`/ #' + interaction.channel.name + ' / ' + interaction.channel.id + '`*\n\n'
                + `${emoji.rules}${report.description.text9}` + '```' + interaction.options.getMessage('message').content + '```')

            const report_message_url = new ButtonBuilder()
              .setLabel("S'y rendre !")
              .setStyle(ButtonStyle.Link)
              .setURL("https://ptb.discord.com/channels/" + interaction.guildId + '/' + interaction.channel.id + '/' + interaction.options.getMessage('message').id)

            const menu_report_message = new ActionRowBuilder()
              .addComponents(report_message_url)

            client.channels.cache.get(db.database.get(String('channel_report'))).send({ embeds: ([embed]), components: [menu_report_message] })


          } else {

            var embed = new EmbedBuilder()
              .setColor(`${config.color.color_error}`)
              .setDescription(`${emoji.wrong}${report.description.text4}`)

            interaction.reply({ embeds: ([embed]), ephemeral: true })
          }
        } else {

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color_error}`)
            .setDescription(`${emoji.wrong}${report.description.text3}`)

          interaction.reply({ embeds: ([embed]), ephemeral: true })
        }
      } else {

        let time = (Math.floor(new Date().getTime() / 1000))
        let cooldown = db.database.get(String(interaction.member.id + '-cooldown_report'))

        var embed = new EmbedBuilder()
          .setColor(`${config.color.color_error}`)
          .setDescription(`${emoji.wrong}${report.description.text1}` + (`${cooldown - time}`) + `${report.description.text2}`)

        interaction.reply({ embeds: ([embed]), ephemeral: true })
      }
    } else {
      var embed = new EmbedBuilder()
        .setColor(`${config.color.color_error}`)
        .setDescription(`${emoji.wrong}${general.error.module_activate1}` + ' *`Signalement`* ' + `${general.error.module_activate2}`)

      interaction.reply({ embeds: ([embed]), ephemeral: true })
    }
  }

  if (interaction.customId === "button_good_partenariat") {
    if (interaction.member.roles.cache.has(db.database.get(String('partenariat_rank-accès')))) {

      db.database.add(String('partenariat_limite_count'), 1)
      db.database.add(String(interaction.member.id + '-partenariat_count'), 1)

      var embed = new EmbedBuilder()
        .setColor(`${config.color.color_good}`)
        .setDescription(`${emoji.tick}${partenariat.description.text9}` + client.channels.cache.get(db.database.get(String('partenariat_channel'))).name + '`* **!**')

      const channel_url_partenariat = new ButtonBuilder()
        .setStyle(ButtonStyle.Link)
        .setLabel("S'y rendre !")
        .setURL("https://discord.com/channels/" + interaction.guildId + "/" + db.database.get(String('partenariat_channel')))

      const url_menu_partenariat = new ActionRowBuilder()
        .addComponents(channel_url_partenariat)

      interaction.message.edit({ embeds: ([embed]), components: [url_menu_partenariat] })

      interaction.deferUpdate()

      client.channels.cache.get(db.database.get(String('partenariat_channel'))).send({
        content: `${emoji.protector}${partenariat.description.text4}` + interaction.user.tag + ' / ' + interaction.user.id + '`*\n'
          + `${emoji.booster}${partenariat.description.text3}` + db.database.get(String(interaction.member.id + '-resp')) + '\n'
          + `${emoji.ping}${partenariat.description.text5}` + db.database.get(String(interaction.member.id + '-ping'))
          + `\n\n${emoji.welcome}${partenariat.description.text6}\n\n` + db.database.get(String(interaction.member.id + '-pub'))
      })

      if (!(db.database.get(String('partenariat_channel_logs')) === "Non défini")) {


        var embed = new EmbedBuilder()
          .setColor(`${config.color.color}`)
          .setTitle(`${emoji.partenariat}${partenariat.title.text2}`)
          .setDescription(`${emoji.protector}${partenariat.description.text4}` + interaction.user.tag + ' / ' + interaction.user.id + '`*\n'
            + `${emoji.booster}${partenariat.description.text3}` + db.database.get(String(interaction.member.id + '-resp')) + '\n'
            + `${emoji.ping}${partenariat.description.text5}` + db.database.get(String(interaction.member.id + '-ping'))
            + `\n\n${emoji.welcome}${partenariat.description.text6}\n\n` + db.database.get(String(interaction.member.id + '-pub')))

        client.channels.cache.get(db.database.get(String('partenariat_channel_logs'))).send({ embeds: ([embed]) })
      }


      try {

        var embed = new EmbedBuilder()
          .setColor(`${config.color.color_good}`)
          .setDescription(`${emoji.diamond}${partenariat.description.text9}` + client.channels.cache.get(db.database.get(String('partenariat_channel'))).name + `${partenariat.description.text10}`)

        const channel_url_partenariat1 = new ButtonBuilder()
          .setStyle(ButtonStyle.Link)
          .setLabel("Se rendre dans le salon !")
          .setURL("https://discord.com/channels/" + interaction.guildId + "/" + db.database.get(String('partenariat_channel')))

        const url_menu_partenariat1 = new ActionRowBuilder()
          .addComponents(channel_url_partenariat)

        client.users.cache.get(db.database.get(String(interaction.member.id + '-resp_id'))).send({ embeds: ([embed]), components: [url_menu_partenariat1] })

        if (!(db.database.get(String('partenariat_rank_add')) === "Non défini")) {
          (interaction.guild.members.cache.get(db.database.get(String(interaction.member.id + '-resp_id')))).roles.add(interaction.guild.roles.cache.get(db.database.get(String('partenariat_rank_add'))))
        }
      } catch (err) {
        console.log(chalk.redBright(err + " | Utilisateur Introuvalbe (Partenariat)"))
      }

      console.log(chalk.greenBright("Nouveau partenariat exécuté !"))
    }
  }

  if (interaction.customId === "button_everyone_partenariat") {
    if (interaction.member.roles.cache.has(db.database.get(String('partenariat_rank-accès')))) {
      if ((interaction.member.permissions.has(PermissionsBitField.Flags.Administrator)) || (interaction.member.id === dev)) {

        db.database.set(String(interaction.member.id + '-ping'), "@everyone")

        var embed = new EmbedBuilder()
          .setColor(`${config.color.color}`)
          .setTitle(`${emoji.partenariat}${partenariat.title.text1}`)
          .setDescription(`${emoji.protector}${partenariat.description.text4}` + interaction.user.tag + ' / ' + interaction.user.id + '`*\n'
            + `${emoji.booster}${partenariat.description.text3}` + db.database.get(String(interaction.member.id + '-resp')) + '\n'
            + `${emoji.ping}${partenariat.description.text5}` + db.database.get(String(interaction.member.id + '-ping'))
            + `\n\n${emoji.welcome}${partenariat.description.text6}\n\n` + db.database.get(String(interaction.member.id + '-pub')))

        const resp_button_partenariat = new ButtonBuilder()
          .setCustomId('resp_button_partenariat')
          .setEmoji(`${emoji.booster}`)
          .setStyle(ButtonStyle.Secondary)

        const ping_button_partenariat = new ButtonBuilder()
          .setCustomId('ping_button_partenariat')
          .setEmoji(`${emoji.ping}`)
          .setStyle(ButtonStyle.Secondary)

        const pub_button_partenariat = new ButtonBuilder()
          .setCustomId('pub_button_partenariat')
          .setEmoji(`${emoji.welcome}`)
          .setStyle(ButtonStyle.Secondary)

        const button_good_partenariat = new ButtonBuilder()
          .setStyle(ButtonStyle.Success)
          .setCustomId("button_good_partenariat")
          .setEmoji(`${emoji.tick}`)

        const button_good_partenariat_disable = new ButtonBuilder()
          .setStyle(ButtonStyle.Success)
          .setCustomId("button_good_partenariat")
          .setEmoji(`${emoji.tick}`)
          .setDisabled(true)

        const partenariat_menu_module1 = new ActionRowBuilder()
          .addComponents(resp_button_partenariat)
          .addComponents(ping_button_partenariat)
          .addComponents(pub_button_partenariat)
          .addComponents(button_good_partenariat)

        const partenariat_menu_module2 = new ActionRowBuilder()
          .addComponents(resp_button_partenariat)
          .addComponents(ping_button_partenariat)
          .addComponents(pub_button_partenariat)
          .addComponents(button_good_partenariat_disable)

        if ((!(db.database.get(String(interaction.member.id + '-resp')) === "*`Non défini`*")) && (!(db.database.get(String(interaction.member.id + '-ping')) === "*`Non défini`*")) && (!(db.database.get(String(interaction.member.id + '-pub')) === "*`Non défini`*"))) {
          interaction.message.edit({ embeds: ([embed]), components: [partenariat_menu_module1] })
        } else {
          interaction.message.edit({ embeds: ([embed]), components: [partenariat_menu_module2] })
        }

        interaction.deferUpdate()
      }
    }
  }

  if (interaction.customId === "button_here_partenariat") {
    if (interaction.member.roles.cache.has(db.database.get(String('partenariat_rank-accès')))) {
      if ((interaction.member.permissions.has(PermissionsBitField.Flags.Administrator)) || (interaction.member.id === dev)) {

        db.database.set(String(interaction.member.id + '-ping'), "@here")

        var embed = new EmbedBuilder()
          .setColor(`${config.color.color}`)
          .setTitle(`${emoji.partenariat}${partenariat.title.text1}`)
          .setDescription(`${emoji.protector}${partenariat.description.text4}` + interaction.user.tag + ' / ' + interaction.user.id + '`*\n'
            + `${emoji.booster}${partenariat.description.text3}` + db.database.get(String(interaction.member.id + '-resp')) + '\n'
            + `${emoji.ping}${partenariat.description.text5}` + db.database.get(String(interaction.member.id + '-ping'))
            + `\n\n${emoji.welcome}${partenariat.description.text6}\n\n` + db.database.get(String(interaction.member.id + '-pub')))

        const resp_button_partenariat = new ButtonBuilder()
          .setCustomId('resp_button_partenariat')
          .setEmoji(`${emoji.booster}`)
          .setStyle(ButtonStyle.Secondary)

        const ping_button_partenariat = new ButtonBuilder()
          .setCustomId('ping_button_partenariat')
          .setEmoji(`${emoji.ping}`)
          .setStyle(ButtonStyle.Secondary)

        const pub_button_partenariat = new ButtonBuilder()
          .setCustomId('pub_button_partenariat')
          .setEmoji(`${emoji.welcome}`)
          .setStyle(ButtonStyle.Secondary)

        const button_good_partenariat = new ButtonBuilder()
          .setStyle(ButtonStyle.Success)
          .setCustomId("button_good_partenariat")
          .setEmoji(`${emoji.tick}`)

        const button_good_partenariat_disable = new ButtonBuilder()
          .setStyle(ButtonStyle.Success)
          .setCustomId("button_good_partenariat")
          .setEmoji(`${emoji.tick}`)
          .setDisabled(true)

        const partenariat_menu_module1 = new ActionRowBuilder()
          .addComponents(resp_button_partenariat)
          .addComponents(ping_button_partenariat)
          .addComponents(pub_button_partenariat)
          .addComponents(button_good_partenariat)

        const partenariat_menu_module2 = new ActionRowBuilder()
          .addComponents(resp_button_partenariat)
          .addComponents(ping_button_partenariat)
          .addComponents(pub_button_partenariat)
          .addComponents(button_good_partenariat_disable)

        if ((!(db.database.get(String(interaction.member.id + '-resp')) === "*`Non défini`*")) && (!(db.database.get(String(interaction.member.id + '-ping')) === "*`Non défini`*")) && (!(db.database.get(String(interaction.member.id + '-pub')) === "*`Non défini`*"))) {
          interaction.message.edit({ embeds: ([embed]), components: [partenariat_menu_module1] })
        } else {
          interaction.message.edit({ embeds: ([embed]), components: [partenariat_menu_module2] })
        }

        interaction.deferUpdate()
      }
    }
  }

  if (interaction.customId === "button_notif_partenariat") {
    if (interaction.member.roles.cache.has(db.database.get(String('partenariat_rank-accès')))) {

      db.database.set(String(interaction.member.id + '-ping'), "<@&" + db.database.get(String('partenariat_notif-part')) + ">")

      var embed = new EmbedBuilder()
        .setColor(`${config.color.color}`)
        .setTitle(`${emoji.partenariat}${partenariat.title.text1}`)
        .setDescription(`${emoji.protector}${partenariat.description.text4}` + interaction.user.tag + ' / ' + interaction.user.id + '`*\n'
          + `${emoji.booster}${partenariat.description.text3}` + db.database.get(String(interaction.member.id + '-resp')) + '\n'
          + `${emoji.ping}${partenariat.description.text5}` + db.database.get(String(interaction.member.id + '-ping'))
          + `\n\n${emoji.welcome}${partenariat.description.text6}\n\n` + db.database.get(String(interaction.member.id + '-pub')))

      const resp_button_partenariat = new ButtonBuilder()
        .setCustomId('resp_button_partenariat')
        .setEmoji(`${emoji.booster}`)
        .setStyle(ButtonStyle.Secondary)

      const ping_button_partenariat = new ButtonBuilder()
        .setCustomId('ping_button_partenariat')
        .setEmoji(`${emoji.ping}`)
        .setStyle(ButtonStyle.Secondary)

      const pub_button_partenariat = new ButtonBuilder()
        .setCustomId('pub_button_partenariat')
        .setEmoji(`${emoji.welcome}`)
        .setStyle(ButtonStyle.Secondary)

      const button_good_partenariat = new ButtonBuilder()
        .setStyle(ButtonStyle.Success)
        .setCustomId("button_good_partenariat")
        .setEmoji(`${emoji.tick}`)

      const button_good_partenariat_disable = new ButtonBuilder()
        .setStyle(ButtonStyle.Success)
        .setCustomId("button_good_partenariat")
        .setEmoji(`${emoji.tick}`)
        .setDisabled(true)

      const partenariat_menu_module1 = new ActionRowBuilder()
        .addComponents(resp_button_partenariat)
        .addComponents(ping_button_partenariat)
        .addComponents(pub_button_partenariat)
        .addComponents(button_good_partenariat)

      const partenariat_menu_module2 = new ActionRowBuilder()
        .addComponents(resp_button_partenariat)
        .addComponents(ping_button_partenariat)
        .addComponents(pub_button_partenariat)
        .addComponents(button_good_partenariat_disable)

      if ((!(db.database.get(String(interaction.member.id + '-resp')) === "*`Non défini`*")) && (!(db.database.get(String(interaction.member.id + '-ping')) === "*`Non défini`*")) && (!(db.database.get(String(interaction.member.id + '-pub')) === "*`Non défini`*"))) {
        interaction.message.edit({ embeds: ([embed]), components: [partenariat_menu_module1] })
      } else {
        interaction.message.edit({ embeds: ([embed]), components: [partenariat_menu_module2] })
      }

      interaction.deferUpdate()
    }
  }


  if (interaction.customId === "button_no_partenariat") {
    if (interaction.member.roles.cache.has(db.database.get(String('partenariat_rank-accès')))) {

      db.database.set(String(interaction.member.id + '-ping'), "*`Aucune Mention`*")

      var embed = new EmbedBuilder()
        .setColor(`${config.color.color}`)
        .setTitle(`${emoji.partenariat}${partenariat.title.text1}`)
        .setDescription(`${emoji.protector}${partenariat.description.text4}` + interaction.user.tag + ' / ' + interaction.user.id + '`*\n'
          + `${emoji.booster}${partenariat.description.text3}` + db.database.get(String(interaction.member.id + '-resp')) + '\n'
          + `${emoji.ping}${partenariat.description.text5}` + db.database.get(String(interaction.member.id + '-ping'))
          + `\n\n${emoji.welcome}${partenariat.description.text6}\n\n` + db.database.get(String(interaction.member.id + '-pub')))

      const resp_button_partenariat = new ButtonBuilder()
        .setCustomId('resp_button_partenariat')
        .setEmoji(`${emoji.booster}`)
        .setStyle(ButtonStyle.Secondary)

      const ping_button_partenariat = new ButtonBuilder()
        .setCustomId('ping_button_partenariat')
        .setEmoji(`${emoji.ping}`)
        .setStyle(ButtonStyle.Secondary)

      const pub_button_partenariat = new ButtonBuilder()
        .setCustomId('pub_button_partenariat')
        .setEmoji(`${emoji.welcome}`)
        .setStyle(ButtonStyle.Secondary)

      const button_good_partenariat = new ButtonBuilder()
        .setStyle(ButtonStyle.Success)
        .setCustomId("button_good_partenariat")
        .setEmoji(`${emoji.tick}`)

      const button_good_partenariat_disable = new ButtonBuilder()
        .setStyle(ButtonStyle.Success)
        .setCustomId("button_good_partenariat")
        .setEmoji(`${emoji.tick}`)
        .setDisabled(true)

      const partenariat_menu_module1 = new ActionRowBuilder()
        .addComponents(resp_button_partenariat)
        .addComponents(ping_button_partenariat)
        .addComponents(pub_button_partenariat)
        .addComponents(button_good_partenariat)

      const partenariat_menu_module2 = new ActionRowBuilder()
        .addComponents(resp_button_partenariat)
        .addComponents(ping_button_partenariat)
        .addComponents(pub_button_partenariat)
        .addComponents(button_good_partenariat_disable)

      if ((!(db.database.get(String(interaction.member.id + '-resp')) === "*`Non défini`*")) && (!(db.database.get(String(interaction.member.id + '-ping')) === "*`Non défini`*")) && (!(db.database.get(String(interaction.member.id + '-pub')) === "*`Non défini`*"))) {
        interaction.message.edit({ embeds: ([embed]), components: [partenariat_menu_module1] })
      } else {
        interaction.message.edit({ embeds: ([embed]), components: [partenariat_menu_module2] })
      }

      interaction.deferUpdate()
    }
  }


  if (interaction.customId === "ping_button_partenariat") {
    if (interaction.member.roles.cache.has(db.database.get(String('partenariat_rank-accès')))) {

      var embed = new EmbedBuilder()
        .setColor(`${config.color.color}`)
        .setTitle(`${emoji.partenariat}${partenariat.title.text1}`)
        .setDescription(`${emoji.protector}${partenariat.description.text4}` + interaction.user.tag + ' / ' + interaction.user.id + '`*\n'
          + `${emoji.booster}${partenariat.description.text3}` + db.database.get(String(interaction.member.id + '-resp')) + '\n'
          + `${emoji.ping}${partenariat.description.text5}` + db.database.get(String(interaction.member.id + '-ping'))
          + `\n\n${emoji.welcome}${partenariat.description.text6}\n\n` + db.database.get(String(interaction.member.id + '-pub')))

      const button_everyone_partenariat = new ButtonBuilder()
        .setCustomId("button_everyone_partenariat")
        .setStyle(ButtonStyle.Danger)
        .setLabel('Everyone')
        .setEmoji(`${emoji.announce}`)

      const button_here_partenariat = new ButtonBuilder()
        .setCustomId("button_here_partenariat")
        .setStyle(ButtonStyle.Primary)
        .setLabel('Here')
        .setEmoji(`${emoji.infos}`)


      const button_everyone_partenariat_disable = new ButtonBuilder()
        .setCustomId("button_everyone_partenariat")
        .setStyle(ButtonStyle.Danger)
        .setLabel('Everyone')
        .setEmoji(`${emoji.announce}`)
        .setDisabled(true)

      const button_here_partenariat_disable = new ButtonBuilder()
        .setCustomId("button_here_partenariat")
        .setStyle(ButtonStyle.Primary)
        .setLabel('Here')
        .setEmoji(`${emoji.infos}`)
        .setDisabled(true)

      const button_notif_partenariat = new ButtonBuilder()
        .setCustomId('button_notif_partenariat')
        .setStyle(ButtonStyle.Success)
        .setLabel("Notification Partenariat")
        .setEmoji(`${emoji.zoom}`)


      const button_notif_partenariat_disable = new ButtonBuilder()
        .setCustomId('button_notif_partenariat')
        .setStyle(ButtonStyle.Success)
        .setLabel("Notification Partenariat")
        .setEmoji(`${emoji.zoom}`)
        .setDisabled(true)


      const button_no_partenariat = new ButtonBuilder()
        .setCustomId("button_no_partenariat")
        .setStyle(ButtonStyle.Secondary)
        .setLabel("Aucune Mention")
        .setEmoji(`${emoji.mute}`)


      const condition1_partenariat = new ActionRowBuilder()
        .addComponents(button_everyone_partenariat)
        .addComponents(button_here_partenariat)
        .addComponents(button_notif_partenariat)
        .addComponents(button_no_partenariat)

      const condition2_partenariat = new ActionRowBuilder()
        .addComponents(button_everyone_partenariat_disable)
        .addComponents(button_here_partenariat_disable)
        .addComponents(button_notif_partenariat_disable)
        .addComponents(button_no_partenariat)

      const condition3_partenariat = new ActionRowBuilder()
        .addComponents(button_everyone_partenariat_disable)
        .addComponents(button_here_partenariat_disable)
        .addComponents(button_notif_partenariat)
        .addComponents(button_no_partenariat)

      const condition4_partenariat = new ActionRowBuilder()
        .addComponents(button_everyone_partenariat)
        .addComponents(button_here_partenariat)
        .addComponents(button_notif_partenariat_disable)
        .addComponents(button_no_partenariat)

      if ((db.database.get(String('partenariat_ping')) === "Activées") && (interaction.member.permissions.has(PermissionsBitField.Flags.Administrator)) && (!(db.database.get(String('partenariat_notif-part')) === "Non défini"))) {
        interaction.message.edit({ embeds: ([embed]), components: [condition1_partenariat] })
      }

      if ((db.database.get(String('partenariat_ping')) === "Activées") && (interaction.member.permissions.has(PermissionsBitField.Flags.Administrator)) && (db.database.get(String('partenariat_notif-part')) === "Non défini")) {
        interaction.message.edit({ embeds: ([embed]), components: [condition4_partenariat] })
      }
      if ((!(db.database.get(String('partenariat_ping')) === "Activées")) && (!(interaction.member.permissions.has(PermissionsBitField.Flags.Administrator))) && (!(db.database.get(String('partenariat_notif-part')) === "Non défini"))) {
        interaction.message.edit({ embeds: ([embed]), components: [condition3_partenariat] })
      }
      if (((db.database.get(String('partenariat_ping')) === "Activées")) && (!(interaction.member.permissions.has(PermissionsBitField.Flags.Administrator))) && (!(db.database.get(String('partenariat_notif-part')) === "Non défini"))) {
        interaction.message.edit({ embeds: ([embed]), components: [condition3_partenariat] })
      }
      if ((!(db.database.get(String('partenariat_ping')) === "Activées")) && ((interaction.member.permissions.has(PermissionsBitField.Flags.Administrator))) && (!(db.database.get(String('partenariat_notif-part')) === "Non défini"))) {
        interaction.message.edit({ embeds: ([embed]), components: [condition3_partenariat] })
      }
      if ((db.database.get(String('partenariat_ping')) === "Activées") && (!(interaction.member.permissions.has(PermissionsBitField.Flags.Administrator))) && ((db.database.get(String('partenariat_notif-part')) === "Non défini"))) {
        interaction.message.edit({ embeds: ([embed]), components: [condition2_partenariat] })
      }
      if ((!(db.database.get(String('partenariat_ping')) === "Activées")) && ((interaction.member.permissions.has(PermissionsBitField.Flags.Administrator))) && ((db.database.get(String('partenariat_notif-part')) === "Non défini"))) {
        interaction.message.edit({ embeds: ([embed]), components: [condition2_partenariat] })
      }
      if ((!(db.database.get(String('partenariat_ping')) === "Activées")) && (!(interaction.member.permissions.has(PermissionsBitField.Flags.Administrator))) && ((db.database.get(String('partenariat_notif-part')) === "Non défini"))) {
        interaction.message.edit({ embeds: ([embed]), components: [condition2_partenariat] })
      }

      await interaction.deferUpdate()
    }
  }

  if (interaction.customId === "pub_button_partenariat") {
    if (interaction.member.roles.cache.has(db.database.get(String('partenariat_rank-accès')))) {

      interaction.deferUpdate()

      interaction.channel.send(`${emoji.pen}${partenariat.description.text7}`).then(async (question) => {
        (interaction.channel).awaitMessages({
          filter: (m) => m.author.id === interaction.member.id,
          time: (500 * 60 * 100),
          max: 1
        }).then(async (collected) => {
          reply = collected.first().content;
          message = collected.first();
          interaction.channel.bulkDelete(1)
          question.delete()
          await delay(Number(1) * 1000)
          if (!(reply === "cancel")) {

            db.database.set(String(interaction.member.id + '-pub'), reply)

            var embed = new EmbedBuilder()
              .setColor(`${config.color.color}`)
              .setTitle(`${emoji.partenariat}${partenariat.title.text1}`)
              .setDescription(`${emoji.protector}${partenariat.description.text4}` + interaction.user.tag + ' / ' + interaction.user.id + '`*\n'
                + `${emoji.booster}${partenariat.description.text3}` + db.database.get(String(interaction.member.id + '-resp')) + '\n'
                + `${emoji.ping}${partenariat.description.text5}` + db.database.get(String(interaction.member.id + '-ping'))
                + `\n\n${emoji.welcome}${partenariat.description.text6}\n\n` + db.database.get(String(interaction.member.id + '-pub')))

            const resp_button_partenariat = new ButtonBuilder()
              .setCustomId('resp_button_partenariat')
              .setEmoji(`${emoji.booster}`)
              .setStyle(ButtonStyle.Secondary)

            const ping_button_partenariat = new ButtonBuilder()
              .setCustomId('ping_button_partenariat')
              .setEmoji(`${emoji.ping}`)
              .setStyle(ButtonStyle.Secondary)

            const pub_button_partenariat = new ButtonBuilder()
              .setCustomId('pub_button_partenariat')
              .setEmoji(`${emoji.welcome}`)
              .setStyle(ButtonStyle.Secondary)

            const button_good_partenariat = new ButtonBuilder()
              .setStyle(ButtonStyle.Success)
              .setCustomId("button_good_partenariat")
              .setEmoji(`${emoji.tick}`)

            const button_good_partenariat_disable = new ButtonBuilder()
              .setStyle(ButtonStyle.Success)
              .setCustomId("button_good_partenariat")
              .setEmoji(`${emoji.tick}`)
              .setDisabled(true)

            const partenariat_menu_module1 = new ActionRowBuilder()
              .addComponents(resp_button_partenariat)
              .addComponents(ping_button_partenariat)
              .addComponents(pub_button_partenariat)
              .addComponents(button_good_partenariat)

            const partenariat_menu_module2 = new ActionRowBuilder()
              .addComponents(resp_button_partenariat)
              .addComponents(ping_button_partenariat)
              .addComponents(pub_button_partenariat)
              .addComponents(button_good_partenariat_disable)

            if ((!(db.database.get(String(interaction.member.id + '-resp')) === "*`Non défini`*")) && (!(db.database.get(String(interaction.member.id + '-ping')) === "*`Non défini`*")) && (!(db.database.get(String(interaction.member.id + '-pub')) === "*`Non défini`*"))) {
              interaction.message.edit({ embeds: ([embed]), components: [partenariat_menu_module1] })
            } else {
              interaction.message.edit({ embeds: ([embed]), components: [partenariat_menu_module2] })
            }

            var embed = new EmbedBuilder()
              .setColor(`${config.color.color_good}`)
              .setDescription(`${emoji.tick}${general.response.save_modifications}`)

            interaction.channel.send({
              embeds: ([embed])
            }).then(async (response_save) => {
              await delay(Number(3) * 1000)
              response_save.delete()
            })


          } else {

            var embed = new EmbedBuilder()
              .setColor(`${config.color.color_error}`)
              .setDescription(`${emoji.wrong}${general.response.nosave_modif}`)

            interaction.channel.send({
              embeds: ([embed])
            }).then(async (response_nosave) => {
              await delay(Number(3) * 1000)
              response_nosave.delete()

            })
          }
        })
      })
    }
  }


  if (interaction.customId === "config_button_pub_set") {
    if ((interaction.member.permissions.has(PermissionsBitField.Flags.Administrator)) || (interaction.member.id === dev)) {

      interaction.deferUpdate()

      interaction.channel.send(`${emoji.pen}${configm.description.text75}`).then(async (question) => {
        (interaction.channel).awaitMessages({
          filter: (m) => m.author.id === interaction.member.id,
          time: (500 * 60 * 100),
          max: 1
        }).then(async (collected) => {
          reply = collected.first().content;
          message = collected.first();
          interaction.channel.bulkDelete(1)
          question.delete()
          await delay(Number(1) * 1000)
          if (!(reply === "cancel")) {

            db.database.set(String('pub_publicité'), reply)

            var embed = new EmbedBuilder()
              .setTitle(`${emoji.settings}${configm.title.text1}`)
              .setColor(`${config.color.color}`)
              .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
              .setDescription(`${emoji.welcome}${configm.description.text74}` + db.database.get(String('pub_publicité')))

            interaction.message.edit({ embeds: ([embed]) })

            var embed = new EmbedBuilder()
              .setColor(`${config.color.color_good}`)
              .setDescription(`${emoji.tick}${general.response.save_modifications}`)

            interaction.channel.send({
              embeds: ([embed])
            }).then(async (response_save) => {
              await delay(Number(3) * 1000)
              response_save.delete()
            })


          } else {

            var embed = new EmbedBuilder()
              .setColor(`${config.color.color_error}`)
              .setDescription(`${emoji.wrong}${general.response.nosave_modif}`)

            interaction.channel.send({
              embeds: ([embed])
            }).then(async (response_nosave) => {
              await delay(Number(3) * 1000)
              response_nosave.delete()

            })
          }
        })
      })
    }
  }




  if (interaction.customId === "resp_button_partenariat") {
    if (interaction.member.roles.cache.has(db.database.get(String('partenariat_rank-accès')))) {

      interaction.deferUpdate()

      interaction.channel.send(`${emoji.pen}${partenariat.description.text7}`).then(async (question) => {
        (interaction.channel).awaitMessages({
          filter: (m) => m.author.id === interaction.member.id,
          time: (500 * 60 * 100),
          max: 1
        }).then(async (collected) => {
          reply = collected.first().content;
          message = collected.first();
          interaction.channel.bulkDelete(1)
          question.delete()
          await delay(Number(1) * 1000)
          if (!(reply === "cancel")) {
            if ((((reply) || '').startsWith('<@' || ''))) {

              let change = reply.replace('<', '')
              let change1 = change.replace('@', '')
              let change2 = change1.replace('>', '')

              db.database.set(String(interaction.member.id + '-resp'), '<@' + change2 + '>')
              db.database.set(String(interaction.member.id + '-resp_id'), change2)

              var embed = new EmbedBuilder()
                .setColor(`${config.color.color}`)
                .setTitle(`${emoji.partenariat}${partenariat.title.text1}`)
                .setDescription(`${emoji.protector}${partenariat.description.text4}` + interaction.user.tag + ' / ' + interaction.user.id + '`*\n'
                  + `${emoji.booster}${partenariat.description.text3}` + db.database.get(String(interaction.member.id + '-resp')) + '\n'
                  + `${emoji.ping}${partenariat.description.text5}` + db.database.get(String(interaction.member.id + '-ping'))
                  + `\n\n${emoji.welcome}${partenariat.description.text6}\n\n` + db.database.get(String(interaction.member.id + '-pub')))

              const resp_button_partenariat = new ButtonBuilder()
                .setCustomId('resp_button_partenariat')
                .setEmoji(`${emoji.booster}`)
                .setStyle(ButtonStyle.Secondary)

              const ping_button_partenariat = new ButtonBuilder()
                .setCustomId('ping_button_partenariat')
                .setEmoji(`${emoji.ping}`)
                .setStyle(ButtonStyle.Secondary)

              const pub_button_partenariat = new ButtonBuilder()
                .setCustomId('pub_button_partenariat')
                .setEmoji(`${emoji.welcome}`)
                .setStyle(ButtonStyle.Secondary)

              const button_good_partenariat = new ButtonBuilder()
                .setStyle(ButtonStyle.Success)
                .setCustomId("button_good_partenariat")
                .setEmoji(`${emoji.tick}`)

              const button_good_partenariat_disable = new ButtonBuilder()
                .setStyle(ButtonStyle.Success)
                .setCustomId("button_good_partenariat")
                .setEmoji(`${emoji.tick}`)
                .setDisabled(true)

              const partenariat_menu_module1 = new ActionRowBuilder()
                .addComponents(resp_button_partenariat)
                .addComponents(ping_button_partenariat)
                .addComponents(pub_button_partenariat)
                .addComponents(button_good_partenariat)

              const partenariat_menu_module2 = new ActionRowBuilder()
                .addComponents(resp_button_partenariat)
                .addComponents(ping_button_partenariat)
                .addComponents(pub_button_partenariat)
                .addComponents(button_good_partenariat_disable)

              if ((!(db.database.get(String(interaction.member.id + '-resp')) === "*`Non défini`*")) && (!(db.database.get(String(interaction.member.id + '-ping')) === "*`Non défini`*")) && (!(db.database.get(String(interaction.member.id + '-pub')) === "*`Non défini`*"))) {
                interaction.message.edit({ embeds: ([embed]), components: [partenariat_menu_module1] })
              } else {
                interaction.message.edit({ embeds: ([embed]), components: [partenariat_menu_module2] })
              }

              var embed = new EmbedBuilder()
                .setColor(`${config.color.color_good}`)
                .setDescription(`${emoji.tick}${general.response.save_modifications}`)

              interaction.channel.send({
                embeds: ([embed])
              }).then(async (response_save) => {
                await delay(Number(3) * 1000)
                response_save.delete()
              })

            } else {

              db.database.set(String(interaction.member.id + '-resp'), '<@' + reply + '>')

              var embed = new EmbedBuilder()
                .setColor(`${config.color.color}`)
                .setTitle(`${emoji.partenariat}${partenariat.title.text1}`)
                .setDescription(`${emoji.protector}${partenariat.description.text4}` + interaction.user.tag + ' / ' + interaction.user.id + '`*\n'
                  + `${emoji.booster}${partenariat.description.text3}` + db.database.get(String(interaction.member.id + '-resp')) + '\n'
                  + `${emoji.ping}${partenariat.description.text5}` + db.database.get(String(interaction.member.id + '-ping'))
                  + `\n\n${emoji.welcome}${partenariat.description.text6}\n\n` + db.database.get(String(interaction.member.id + '-pub')))

              const resp_button_partenariat = new ButtonBuilder()
                .setCustomId('resp_button_partenariat')
                .setEmoji(`${emoji.booster}`)
                .setStyle(ButtonStyle.Secondary)

              const ping_button_partenariat = new ButtonBuilder()
                .setCustomId('ping_button_partenariat')
                .setEmoji(`${emoji.ping}`)
                .setStyle(ButtonStyle.Secondary)

              const pub_button_partenariat = new ButtonBuilder()
                .setCustomId('pub_button_partenariat')
                .setEmoji(`${emoji.welcome}`)
                .setStyle(ButtonStyle.Secondary)

              const button_good_partenariat = new ButtonBuilder()
                .setStyle(ButtonStyle.Success)
                .setCustomId("button_good_partenariat")
                .setEmoji(`${emoji.tick}`)

              const button_good_partenariat_disable = new ButtonBuilder()
                .setStyle(ButtonStyle.Success)
                .setCustomId("button_good_partenariat")
                .setEmoji(`${emoji.tick}`)
                .setDisabled(true)

              const partenariat_menu_module1 = new ActionRowBuilder()
                .addComponents(resp_button_partenariat)
                .addComponents(ping_button_partenariat)
                .addComponents(pub_button_partenariat)
                .addComponents(button_good_partenariat)

              const partenariat_menu_module2 = new ActionRowBuilder()
                .addComponents(resp_button_partenariat)
                .addComponents(ping_button_partenariat)
                .addComponents(pub_button_partenariat)
                .addComponents(button_good_partenariat_disable)

              if ((!(db.database.get(String(interaction.member.id + '-resp')) === "*`Non défini`*")) && (!(db.database.get(String(interaction.member.id + '-ping')) === "*`Non défini`*")) && (!(db.database.get(String(interaction.member.id + '-pub')) === "*`Non défini`*"))) {
                interaction.message.edit({ embeds: ([embed]), components: [partenariat_menu_module1] })
              } else {
                interaction.message.edit({ embeds: ([embed]), components: [partenariat_menu_module2] })
              }

              var embed = new EmbedBuilder()
                .setColor(`${config.color.color_good}`)
                .setDescription(`${emoji.tick}${general.response.save_modifications}`)

              interaction.channel.send({
                embeds: ([embed])
              }).then(async (response_save) => {
                await delay(Number(3) * 1000)
                response_save.delete()
              })


            }
          } else {

            var embed = new EmbedBuilder()
              .setColor(`${config.color.color_error}`)
              .setDescription(`${emoji.wrong}${general.response.nosave_modif}`)
            interaction.channel.send({
              embeds: ([embed])
            }).then(async (response_nosave) => {
              await delay(Number(3) * 1000)
              response_nosave.delete()

            })
          }
        })
      })
    }

  }

  if (interaction.commandName === "partenariat") {
    if ((db.module.get(String("partenariat"))) === "on") {
      if (!((db.database.get(String('partenariat_channel'))) === "Non défini")) {
        if (!((db.database.get(String('partenariat_channel_logs'))) === "Non défini")) {
          if (!((db.database.get(String('partenariat_rank-accès'))) === "Non défini")) {
            if (db.database.has(String('partenariat_limite')) || (db.database.get(String('partenariat_limite')) === 0)) {
              if (interaction.member.roles.cache.has(db.database.get(String('partenariat_rank-accès')))) {
                if ((db.database.get(String('partenariat_limite')) === 0) || (!(db.database.has(String('partenariat_limite_count')))) || (db.database.get(String('partenariat_limite_count')) < db.database.get(String('partenariat_limite')))) {

                  db.database.set(String(interaction.member.id + '-resp'), "*`Non défini`*")
                  db.database.set(String(interaction.member.id + '-ping'), "*`Non défini`*")
                  db.database.set(String(interaction.member.id + '-pub'), "*`Non défini`*")

                  var embed = new EmbedBuilder()
                    .setColor(`${config.color.color}`)
                    .setTitle(`${emoji.partenariat}${partenariat.title.text1}`)
                    .setDescription(`${emoji.protector}${partenariat.description.text4}` + interaction.user.tag + ' / ' + interaction.user.id + '`*\n'
                      + `${emoji.booster}${partenariat.description.text3}` + db.database.get(String(interaction.member.id + '-resp')) + '\n'
                      + `${emoji.ping}${partenariat.description.text5}` + db.database.get(String(interaction.member.id + '-ping'))
                      + `\n\n${emoji.welcome}${partenariat.description.text6}\n\n` + db.database.get(String(interaction.member.id + '-pub')))

                  const resp_button_partenariat = new ButtonBuilder()
                    .setCustomId('resp_button_partenariat')
                    .setEmoji(`${emoji.booster}`)
                    .setStyle(ButtonStyle.Secondary)

                  const ping_button_partenariat = new ButtonBuilder()
                    .setCustomId('ping_button_partenariat')
                    .setEmoji(`${emoji.ping}`)
                    .setStyle(ButtonStyle.Secondary)

                  const pub_button_partenariat = new ButtonBuilder()
                    .setCustomId('pub_button_partenariat')
                    .setEmoji(`${emoji.welcome}`)
                    .setStyle(ButtonStyle.Secondary)

                  const button_good_partenariat = new ButtonBuilder()
                    .setStyle(ButtonStyle.Success)
                    .setCustomId("button_good_partenariat")
                    .setEmoji(`${emoji.tick}`)

                  const button_good_partenariat_disable = new ButtonBuilder()
                    .setStyle(ButtonStyle.Success)
                    .setCustomId("button_good_partenariat")
                    .setEmoji(`${emoji.tick}`)
                    .setDisabled(true)

                  const partenariat_menu_module1 = new ActionRowBuilder()
                    .addComponents(resp_button_partenariat)
                    .addComponents(ping_button_partenariat)
                    .addComponents(pub_button_partenariat)
                    .addComponents(button_good_partenariat)

                  const partenariat_menu_module2 = new ActionRowBuilder()
                    .addComponents(resp_button_partenariat)
                    .addComponents(ping_button_partenariat)
                    .addComponents(pub_button_partenariat)
                    .addComponents(button_good_partenariat_disable)

                  if ((!(db.database.get(String(interaction.member.id + '-resp')) === "*`Non défini`*")) && (!(db.database.get(String(interaction.member.id + '-ping')) === "*`Non défini`*")) && (!(db.database.get(String(interaction.member.id + '-pub')) === "*`Non défini`*"))) {
                    interaction.reply({ embeds: ([embed]), components: [partenariat_menu_module1] })
                  } else {
                    interaction.reply({ embeds: ([embed]), components: [partenariat_menu_module2] })
                  }
                } else {

                  var embed = new EmbedBuilder()
                    .setColor(`${config.color.color_error}`)
                    .setDescription(`${emoji.wrong}${partenariat.description.text8}`)

                  interaction.reply({ embeds: ([embed]), ephemeral: true })

                }

              } else {

                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color_error}`)
                  .setDescription(`${emoji.wrong}${partenariat.description.text1}` + ((interaction.guild).roles.cache.get(db.database.get(String('partenariat_rank-accès')))).name + `${partenariat.description.text2}`)

                interaction.reply({ embeds: ([embed]), ephemeral: true })
              }

            } else {

              var embed = new EmbedBuilder()
                .setColor(`${config.color.color_error}`)
                .setDescription(`${emoji.wrong}${configm.description.text65}`)

              interaction.reply({ embeds: ([embed]), ephemeral: true })
            }

          } else {

            var embed = new EmbedBuilder()
              .setColor(`${config.color.color_error}`)
              .setDescription(`${emoji.wrong}${configm.description.text65}`)

            interaction.reply({ embeds: ([embed]), ephemeral: true })
          }

        } else {

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color_error}`)
            .setDescription(`${emoji.wrong}${configm.description.text65}`)

          interaction.reply({ embeds: ([embed]), ephemeral: true })
        }

      } else {

        var embed = new EmbedBuilder()
          .setColor(`${config.color.color_error}`)
          .setDescription(`${emoji.wrong}${configm.description.text65}`)

        interaction.reply({ embeds: ([embed]), ephemeral: true })
      }

    } else {
      var embed = new EmbedBuilder()
        .setColor(`${config.color.color_error}`)
        .setDescription(`${emoji.wrong}${general.error.module_activate1}` + ' *`Partenariat`* ' + `${general.error.module_activate2}`)

      interaction.reply({ embeds: ([embed]), ephemeral: true })
    }

  }

  if (interaction.customId === "1day_add_button") {
    if (interaction.member.id === dev) {
      db.module.add(String('time'), parseInt(String(86400)))
      db.module.set(String('bloque'), '0')

      if (db.module.get(String('time')) >= 86400) {
        db.module.set(String('time_days'), (db.module.get(String('time')) / 86400))
      }

      var embed = new EmbedBuilder()
        .setColor(`${config.color.error}`)
        .setTitle(`${emoji.diamond}${manage_bot.title.text1}`)
        .setDescription(`${manage_bot.description.text1}` + db.module.get(String('time_days')) + ' jours(s)`* !')

      interaction.message.edit({ embeds: ([embed]) })

      interaction.deferUpdate()

      var embed = new EmbedBuilder()
        .setColor(`${config.color.color_good}`)
        .setDescription(`${emoji.tick}${manage_bot.description.text2}`)

      interaction.channel.send({
        embeds: ([embed])

      }).then(async (save_message) => {
        await delay(Number(3) * 1000)
        await save_message.delete()
      })
    }
  }

  if (interaction.customId === "1week_add_button") {
    if (interaction.member.id === dev) {
      db.module.add(String('time'), parseInt(String(604800)))
      db.module.set(String('bloque'), '0')

      if (db.module.get(String('time')) >= 86400) {
        db.module.set(String('time_days'), (db.module.get(String('time')) / 86400))
      }

      var embed = new EmbedBuilder()
        .setColor(`${config.color.error}`)
        .setTitle(`${emoji.diamond}${manage_bot.title.text1}`)
        .setDescription(`${manage_bot.description.text1}` + db.module.get(String('time_days')) + ' jours(s)`* !')

      interaction.message.edit({ embeds: ([embed]) })

      interaction.deferUpdate()

      var embed = new EmbedBuilder()
        .setColor(`${config.color.color_good}`)
        .setDescription(`${emoji.tick}${manage_bot.description.text2}`)

      interaction.channel.send({
        embeds: ([embed])

      }).then(async (save_message) => {
        await delay(Number(3) * 1000)
        await save_message.delete()
      })
    }
  }

  if (interaction.customId === "2week_add_button") {
    if (interaction.member.id === dev) {
      db.module.add(String('time'), parseInt(String(1209600)))
      db.module.set(String('bloque'), '0')

      if (db.module.get(String('time')) >= 86400) {
        db.module.set(String('time_days'), (db.module.get(String('time')) / 86400))
      }

      var embed = new EmbedBuilder()
        .setColor(`${config.color.error}`)
        .setTitle(`${emoji.diamond}${manage_bot.title.text1}`)
        .setDescription(`${manage_bot.description.text1}` + db.module.get(String('time_days')) + ' jours(s)`* !')

      interaction.message.edit({ embeds: ([embed]) })

      interaction.deferUpdate()

      var embed = new EmbedBuilder()
        .setColor(`${config.color.color_good}`)
        .setDescription(`${emoji.tick}${manage_bot.description.text2}`)

      interaction.channel.send({
        embeds: ([embed])

      }).then(async (save_message) => {
        await delay(Number(3) * 1000)
        await save_message.delete()
      })
    }
  }

  if (interaction.customId === "3week_add_button") {
    if (interaction.member.id === dev) {
      db.module.add(String('time'), parseInt(String(1814400)))
      db.module.set(String('bloque'), '0')

      if (db.module.get(String('time')) >= 86400) {
        db.module.set(String('time_days'), (db.module.get(String('time')) / 86400))
      }

      var embed = new EmbedBuilder()
        .setColor(`${config.color.error}`)
        .setTitle(`${emoji.diamond}${manage_bot.title.text1}`)
        .setDescription(`${manage_bot.description.text1}` + db.module.get(String('time_days')) + ' jours(s)`* !')

      interaction.message.edit({ embeds: ([embed]) })

      interaction.deferUpdate()

      var embed = new EmbedBuilder()
        .setColor(`${config.color.color_good}`)
        .setDescription(`${emoji.tick}${manage_bot.description.text2}`)

      interaction.channel.send({
        embeds: ([embed])

      }).then(async (save_message) => {
        await delay(Number(3) * 1000)
        await save_message.delete()
      })
    }
  }

  if (interaction.customId === "1month_add_button") {
    if (interaction.member.id === dev) {
      db.module.add(String('time'), parseInt(String(2419200)))
      db.module.set(String('bloque'), '0')

      if (db.module.get(String('time')) >= 86400) {
        db.module.set(String('time_days'), (db.module.get(String('time')) / 86400))
      }

      var embed = new EmbedBuilder()
        .setColor(`${config.color.error}`)
        .setTitle(`${emoji.diamond}${manage_bot.title.text1}`)
        .setDescription(`${manage_bot.description.text1}` + db.module.get(String('time_days')) + ' jours(s)`* !')

      interaction.message.edit({ embeds: ([embed]) })

      interaction.deferUpdate()

      var embed = new EmbedBuilder()
        .setColor(`${config.color.color_good}`)
        .setDescription(`${emoji.tick}${manage_bot.description.text2}`)

      interaction.channel.send({
        embeds: ([embed])

      }).then(async (save_message) => {
        await delay(Number(3) * 1000)
        await save_message.delete()
      })
    }
  }

  if (interaction.customId === "3month_add_button") {
    if (interaction.member.id === dev) {
      db.module.add(String('time'), parseInt(String(7257600)))
      db.module.set(String('bloque'), '0')

      if (db.module.get(String('time')) >= 86400) {
        db.module.set(String('time_days'), (db.module.get(String('time')) / 86400))
      }

      var embed = new EmbedBuilder()
        .setColor(`${config.color.error}`)
        .setTitle(`${emoji.diamond}${manage_bot.title.text1}`)
        .setDescription(`${manage_bot.description.text1}` + db.module.get(String('time_days')) + ' jours(s)`* !')

      interaction.message.edit({ embeds: ([embed]) })

      interaction.deferUpdate()

      var embed = new EmbedBuilder()
        .setColor(`${config.color.color_good}`)
        .setDescription(`${emoji.tick}${manage_bot.description.text2}`)

      interaction.channel.send({
        embeds: ([embed])

      }).then(async (save_message) => {
        await delay(Number(3) * 1000)
        await save_message.delete()
      })
    }
  }

  if (interaction.customId === "permanetly_add_button") {
    if (interaction.member.id === dev) {
      db.module.add(String('time'), parseInt(String(315360000)))
      db.module.set(String('bloque'), '0')

      if (db.module.get(String('time')) >= 86400) {
        db.module.set(String('time_days'), (db.module.get(String('time')) / 86400))
      }

      var embed = new EmbedBuilder()
        .setColor(`${config.color.error}`)
        .setTitle(`${emoji.diamond}${manage_bot.title.text1}`)
        .setDescription(`${manage_bot.description.text1}` + db.module.get(String('time_days')) + ' jours(s)`* !')

      interaction.message.edit({ embeds: ([embed]) })

      interaction.deferUpdate()

      var embed = new EmbedBuilder()
        .setColor(`${config.color.color_good}`)
        .setDescription(`${emoji.tick}${manage_bot.description.text2}`)

      interaction.channel.send({
        embeds: ([embed])

      }).then(async (save_message) => {
        await delay(Number(3) * 1000)
        await save_message.delete()
      })
    }
  }

  if (interaction.customId === "delete_abonnement") {
    if (interaction.member.id === dev) {
      db.module.set(String('bloque'), '1')
      db.module.set(String('time'), parseInt(String(0)))
      db.module.set(String('time_days'), parseInt(String(0)))

      if (db.module.get(String('time')) >= 86400) {
        db.module.set(String('time_days'), (db.module.get(String('time')) / 86400))
      }

      var embed = new EmbedBuilder()
        .setColor(`${config.color.error}`)
        .setTitle(`${emoji.diamond}${manage_bot.title.text1}`)
        .setDescription(`${manage_bot.description.text1}` + db.module.get(String('time_days')) + ' jours(s)`* !')

      interaction.message.edit({ embeds: ([embed]) })

      interaction.deferUpdate()

      var embed = new EmbedBuilder()
        .setColor(`${config.color.color}`)
        .setDescription(`${emoji.bin}${manage_bot.description.text3}`)

      interaction.channel.send({
        embeds: ([embed])

      }).then(async (save_message) => {
        await delay(Number(3) * 1000)
        await save_message.delete()
      })
    }
  }

  if (interaction.commandName === "abonnement") {
    if (interaction.member.id === dev) {

      if (!(db.module.has(String('time')))) {
        db.module.add(String('time'), parseInt('0'))
      }

      const day_add_button = new ButtonBuilder()
        .setCustomId("1day_add_button")
        .setStyle(ButtonStyle.Primary)
        .setLabel("1 Jour")

      const week_add_button = new ButtonBuilder()
        .setCustomId("1week_add_button")
        .setStyle(ButtonStyle.Primary)
        .setLabel("1 Semaine")

      const two_week_add_button = new ButtonBuilder()
        .setCustomId("2week_add_button")
        .setStyle(ButtonStyle.Primary)
        .setLabel("2 Semaines")

      const tri_week_add_button = new ButtonBuilder()
        .setCustomId("3week_add_button")
        .setStyle(ButtonStyle.Primary)
        .setLabel("3 Semaines")

      const month_add_button = new ButtonBuilder()
        .setCustomId("1month_add_button")
        .setStyle(ButtonStyle.Primary)
        .setLabel("1 Mois")

      const tri_month_add_button = new ButtonBuilder()
        .setCustomId("3month_add_button")
        .setStyle(ButtonStyle.Primary)
        .setLabel("3 Mois")

      const permanent_add_button = new ButtonBuilder()
        .setCustomId("permanetly_add_button")
        .setStyle(ButtonStyle.Primary)
        .setLabel("Permanent")

      const stop_subscribe = new ButtonBuilder()
        .setCustomId("delete_abonnement")
        .setStyle(ButtonStyle.Danger)
        .setEmoji(`${emoji.bin}`)
        .setLabel('Réinitialiser')

      const time_menu1 = new ActionRowBuilder()
        .addComponents(day_add_button)
        .addComponents(week_add_button)
        .addComponents(two_week_add_button)
        .addComponents(tri_week_add_button)

      const time_menu2 = new ActionRowBuilder()
        .addComponents(month_add_button)
        .addComponents(tri_month_add_button)
        .addComponents(permanent_add_button)
        .addComponents(stop_subscribe)

      if (db.module.get(String('time')) >= 86400) {
        db.module.set(String('time_days'), (db.module.get(String('time')) / 86400))

        var embed = new EmbedBuilder()
          .setColor(`${config.color.error}`)
          .setTitle(`${emoji.diamond}${manage_bot.title.text1}`)
          .setDescription(`${manage_bot.description.text1}` + db.module.get(String('time_days')) + ' jours(s)`* !')

        interaction.reply({ embeds: ([embed]), components: [time_menu1, time_menu2] })

      } else {

        var embed = new EmbedBuilder()
          .setColor(`${config.color.error}`)
          .setTitle(`${emoji.diamond}${manage_bot.title.text1}`)
          .setDescription(`${manage_bot.description.text1}` + db.module.get(String('time')) + ' seconde(s)`* !')

        interaction.reply({ embeds: ([embed]), components: [time_menu1, time_menu2] })

      }

    } else {

      var embed = new EmbedBuilder()
        .setColor(`${config.color.color_error}`)
        .setDescription(`${emoji.wrong}${general.error.perms_dev}`)

      interaction.reply({ embeds: ([embed]) })
    }
  }

  if (interaction.customId === "reset_button_ok") {
    if ((interaction.member.permissions.has(PermissionsBitField.Flags.Administrator)) || (interaction.member.id === dev)) {

      interaction.message.delete()

      var embed = new EmbedBuilder()
        .setColor(`${config.color.color}`)
        .setDescription(`${emoji.loading}${reset_money.description.text3}`)

      interaction.channel.send({
        embeds: ([embed])
      }).then(async (interaction_edit) => {

        db.money.clear()

        await delay(Number(3) * 1000)

        var embed = new EmbedBuilder()
          .setColor(`${config.color.color_good}`)
          .setDescription(`${emoji.tick}${reset_money.description.text4}`)

        interaction_edit.edit({ embeds: ([embed]) })
      })
    }
  }


  if (interaction.customId === "reset_button_nook") {
    if ((interaction.member.permissions.has(PermissionsBitField.Flags.Administrator)) || (interaction.member.id === dev)) {

      interaction.message.delete()

      var embed = new EmbedBuilder()
        .setColor(`${config.color.color_error}`)
        .setDescription(`${emoji.wrong}${reset_money.description.text2}`)

      interaction.channel.send({ embeds: ([embed]) })
    }
  }

  if (interaction.customId === "pub_not_copiable") {
    if (db.module.get(String("pub")) === "on") {
      if ((db.database.has(String('pub_publicité'))) && (!(db.database.get(String('pub_publicité')) === "*`Non définie`*"))) {

        var embed = new EmbedBuilder()
          .setColor(`${config.color.color}`)
          .setTitle(`${emoji.welcome}${pub.title.text1}`)
          .setDescription(db.database.get(String('pub_publicité')))

        const pub_copiable = new ButtonBuilder()
          .setStyle(ButtonStyle.Primary)
          .setLabel("Version Copiable")
          .setEmoji(`${emoji.rules}`)
          .setCustomId("pub_copiable")

        const pub_menu = new ActionRowBuilder()
          .addComponents(pub_copiable)

        interaction.message.edit({ embeds: ([embed]), components: [pub_menu] })

        interaction.deferUpdate()

      } else {

        var embed = new EmbedBuilder()
          .setColor(`${config.color.color_error}`)
          .setDescription(`${emoji.wrong}${pub.description.text1}`)

        interaction.reply({ embeds: ([embed]), ephemeral: true })
      }

    } else {
      var embed = new EmbedBuilder()
        .setColor(`${config.color.color_error}`)
        .setDescription(`${emoji.wrong}${general.error.module_activate1}` + ' *`Publicité`* ' + `${general.error.module_activate2}`)

      interaction.reply({ embeds: ([embed]), ephemeral: true })
    }

  }

  if (interaction.customId === "pub_copiable") {
    if (db.module.get(String("pub")) === "on") {
      if ((db.database.has(String('pub_publicité'))) && (!(db.database.get(String('pub_publicité')) === "*`Non définie`*"))) {

        var embed = new EmbedBuilder()
          .setColor(`${config.color.color}`)
          .setTitle(`${emoji.welcome}${pub.title.text1}`)
          .setDescription('```' + db.database.get(String('pub_publicité')) + '```')

        const pub_not_copiable = new ButtonBuilder()
          .setStyle(ButtonStyle.Primary)
          .setLabel("Version Non-Copiable")
          .setEmoji(`${emoji.rules}`)
          .setCustomId("pub_not_copiable")

        const pub_menu1 = new ActionRowBuilder()
          .addComponents(pub_not_copiable)

        interaction.message.edit({ embeds: ([embed]), components: [pub_menu1] })

        interaction.deferUpdate()

      } else {

        var embed = new EmbedBuilder()
          .setColor(`${config.color.color_error}`)
          .setDescription(`${emoji.wrong}${pub.description.text1}`)

        interaction.reply({ embeds: ([embed]), ephemeral: true })
      }

    } else {
      var embed = new EmbedBuilder()
        .setColor(`${config.color.color_error}`)
        .setDescription(`${emoji.wrong}${general.error.module_activate1}` + ' *`Publicité`* ' + `${general.error.module_activate2}`)

      interaction.reply({ embeds: ([embed]), ephemeral: true })
    }

  }

  if (interaction.commandName === "publicité") {
    if (interaction.guildId === server_id) {
      if (db.module.get(String("pub")) === "on") {
        if ((db.database.has(String('pub_publicité'))) && (!(db.database.get(String('pub_publicité')) === "*`Non définie`*"))) {

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color}`)
            .setTitle(`${emoji.welcome}${pub.title.text1}`)
            .setDescription(db.database.get(String('pub_publicité')))

          const pub_copiable = new ButtonBuilder()
            .setStyle(ButtonStyle.Primary)
            .setLabel("Version Copiable")
            .setEmoji(`${emoji.rules}`)
            .setCustomId("pub_copiable")

          const pub_menu = new ActionRowBuilder()
            .addComponents(pub_copiable)

          interaction.reply({ embeds: ([embed]), components: [pub_menu] })

        } else {

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color_error}`)
            .setDescription(`${emoji.wrong}${pub.description.text1}`)

          interaction.reply({ embeds: ([embed]), ephemeral: true })
        }

      } else {
        var embed = new EmbedBuilder()
          .setColor(`${config.color.color_error}`)
          .setDescription(`${emoji.wrong}${general.error.module_activate1}` + ' *`Publicité`* ' + `${general.error.module_activate2}`)

        interaction.reply({ embeds: ([embed]), ephemeral: true })
      }

    } else {

      var embed = new EmbedBuilder()
        .setColor(`${config.color.color_error}`)
        .setDescription(`${emoji.wrong}${general.error.server_follow}`)

      interaction.reply({ embeds: ([embed]), ephemeral: true })

    }
  }

  if (interaction.commandName === "reset_money") {
    if (interaction.guildId === server_id) {
      if (db.module.get(String("economie")) === "on") {
        if (((interaction.member).permissions.has(PermissionsBitField.Flags.Administrator)) || interaction.member.id === dev) {

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color}`)
            .setTitle(`${emoji.bin}${reset_money.title.text1}`)
            .setDescription(`${reset_money.description.text1}`)
            .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })

          const reset_button_ok = new ButtonBuilder()
            .setEmoji(`${emoji.tick}`)
            .setCustomId("reset_button_ok")
            .setStyle(ButtonStyle.Secondary)

          const reset_button_nook = new ButtonBuilder()
            .setEmoji(`${emoji.wrong}`)
            .setCustomId("reset_button_nook")
            .setStyle(ButtonStyle.Secondary)

          const reset_money_menu = new ActionRowBuilder()
            .addComponents(reset_button_ok)
            .addComponents(reset_button_nook)

          interaction.reply({ embeds: ([embed]), components: [reset_money_menu] })

        } else {
          ////Erreur Perms Admins\\\\

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color_error}`)
            .setDescription(`${emoji.wrong}${general.error.perms_admin}`)

          interaction.reply({
            embeds: ([embed]), ephemeral: true
          })
        }

      } else {
        var embed = new EmbedBuilder()
          .setColor(`${config.color.color_error}`)
          .setDescription(`${emoji.wrong}${general.error.module_activate1}` + ' *`Economie`* ' + `${general.error.module_activate2}`)

        interaction.reply({ embeds: ([embed]), ephemeral: true })
      }
    } else {

      var embed = new EmbedBuilder()
        .setColor(`${config.color.color_error}`)
        .setDescription(`${emoji.wrong}${general.error.server_follow}`)

      interaction.reply({ embeds: ([embed]), ephemeral: true })
    }
  }

  if (interaction.commandName === "manage_money") {
    if (interaction.guildId === server_id) {
      if (db.module.get(String('economie')) === "on") {
        if (((interaction.member).permissions.has(PermissionsBitField.Flags.Administrator)) || interaction.member.id === dev) {

          if (interaction.options.getString("action") === "add_money") {
            if (interaction.options.getInteger("somme") >= 1) {

              if (!(db.money.has(String((interaction.options.getUser("utilisateur")).id + '-money')))) {
                db.money.add(String((interaction.options.getUser("utilisateur")).id + "-money"), parseInt(db.database.get(String("economie_start"))))
                await delay(Number(1) * 1000)
              }

              db.money.add(String((interaction.options.getUser("utilisateur")).id + "-money"), parseInt(interaction.options.getInteger("somme")))

              var embed = new EmbedBuilder()
                .setColor(`${config.color.color_good}`)
                .setDescription(`${emoji.tick}${manage_money.description.text3}` + interaction.options.getInteger("somme") + db.database.get(String("economie_symbole")) + `${manage_money.description.text4}` + (interaction.options.getUser('utilisateur')).tag + `${manage_money.description.text5}`)

              interaction.reply({ embeds: ([embed]) })

            } else {
              var embed = new EmbedBuilder()
                .setColor(`${config.color.color_error}`)
                .setDescription(`${emoji.wrong}${manage_money.description.text1}`)

              interaction.reply({ embeds: ([embed]), ephemeral: true })
            }
          } else if (interaction.options.getString("action") === "remove_money") {
            if (interaction.options.getInteger("somme") >= 1) {
              if (!(interaction.options.getInteger("somme") > db.money.get(String((interaction.options.getUser("utilisateur")).id + '-money')))) {

                if (!(db.money.has(String((interaction.options.getUser("utilisateur")).id + '-money')))) {
                  db.money.add(String((interaction.options.getUser("utilisateur")).id + "-money"), parseInt(db.database.get(String("economie_start"))))
                  await delay(Number(1) * 1000)
                }

                db.money.subtract(String((interaction.options.getUser("utilisateur")).id + "-money"), parseInt(interaction.options.getInteger("somme")))

                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color_good}`)
                  .setDescription(`${emoji.tick}${manage_money.description.text3}` + interaction.options.getInteger("somme") + db.database.get(String("economie_symbole")) + `${manage_money.description.text6}` + (interaction.options.getUser('utilisateur')).tag + `${manage_money.description.text5}`)

                interaction.reply({ embeds: ([embed]) })
              } else {

                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color_error}`)
                  .setDescription(`${emoji.wrong}${manage_money.description.text7}`)

                interaction.reply({ embeds: ([embed]), ephemeral: true })
              }
            } else {
              var embed = new EmbedBuilder()
                .setColor(`${config.color.color_error}`)
                .setDescription(`${emoji.wrong}${manage_money.description.text2}`)

              interaction.reply({ embeds: ([embed]), ephemeral: true })
            }
          }

        } else {

          ////Erreur Perms Admins\\\\

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color_error}`)
            .setDescription(`${emoji.wrong}${general.error.perms_admin}`)

          interaction.reply({
            embeds: ([embed]), ephemeral: true
          })
        }

      } else {
        var embed = new EmbedBuilder()
          .setColor(`${config.color.color_error}`)
          .setDescription(`${emoji.wrong}${general.error.module_activate1}` + ' *`Economie`* ' + `${general.error.module_activate2}`)

        interaction.reply({ embeds: ([embed]), ephemeral: true })
      }
    } else {

      var embed = new EmbedBuilder()
        .setColor(`${config.color.color_error}`)
        .setDescription(`${emoji.wrong}${general.error.server_follow}`)

      interaction.reply({ embeds: ([embed]), ephemeral: true })
    }
  }

  if (interaction.commandName === "partenariat_count") {
    if (interaction.guildId === server_id) {
      if (db.module.has(String('partenariat')) && db.module.get(String('partenariat')) === "on") {

        try {

          if (!((String(interaction.options.getUser('utilisateur'))) === "null")) {
            if (db.database.has(String((interaction.options.getUser('utilisateur')).id + '-partenariat_count'))) {

              var embed = new EmbedBuilder()
                .setColor(`${config.color.color}`)
                .setTitle(`${emoji.partner}${partenariat.title.text3}`)
                .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
                .setDescription(`${partenariat.description.text13}` + db.database.get(String(String((interaction.options.getUser('utilisateur')).id) + '-partenariat_count')) + `${partenariat.description.text14}`)

              interaction.reply({ embeds: ([embed]) })
            } else {

              db.database.set(String((interaction.options.getUser('utilisateur')).id + '-partenariat_count'), 0)

              var embed = new EmbedBuilder()
                .setColor(`${config.color.color}`)
                .setTitle(`${emoji.partner}${partenariat.title.text3}`)
                .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
                .setDescription(`${partenariat.description.text13}` + db.database.get(String(String((interaction.options.getUser('utilisateur')).id) + '-partenariat_count')) + `${partenariat.description.text14}`)

              interaction.reply({ embeds: ([embed]) })
            }
          } else {
            if (db.database.has(String(interaction.user.id) + '-partenariat_count')) {

              var embed = new EmbedBuilder()
                .setColor(`${config.color.color}`)
                .setTitle(`${emoji.partner}${partenariat.title.text3}`)
                .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
                .setDescription(`${partenariat.description.text11}` + db.database.get(String(interaction.member.id + '-partenariat_count')) + `${partenariat.description.text12}`)

              interaction.reply({ embeds: ([embed]) })
            } else {

              db.database.set(String((interaction.options.getUser('utilisateur')).id + '-partenariat_count'), 0)

              var embed = new EmbedBuilder()
                .setColor(`${config.color.color}`)
                .setTitle(`${emoji.partner}${partenariat.title.text3}`)
                .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
                .setDescription(`${partenariat.description.text11}` + db.database.get(String(interaction.member.id + '-partenariat_count')) + `${partenariat.description.text12}`)

              interaction.reply({ embeds: ([embed]) })

            }
          }

        } catch (err) {
          console.log(chalk.red(err));

          var embed = new EmbedBuilder()
            .setColor(`${config.color.error}`)
            .setDescription(`${emoji.error}${server_infos.description.text9}`)

          interaction.reply({ embeds: ([embed]), ephemeral: true })

          let error = err

          var embed = new EmbedBuilder()
            .setColor(`${config.color.error}`)
            .setTitle(`${emoji.error}${server_infos.title.text2}`)
            .setDescription('```partenariat_count``` ```diff' + `\n\n` + `- ${error}` + '```')
            .setAuthor({ name: client.user.tag + ' | ' + client.user.id, iconURL: client.user.displayAvatarURL() })
            .setFooter({ text: interaction.user.tag + ' | ' + interaction.user.id, iconURL: interaction.user.displayAvatarURL() })

          client.channels.cache.get(String(`${config.channels.error}`)).send({ embeds: ([embed]) })

        }


      } else {
        var embed = new EmbedBuilder()
          .setColor(`${config.color.color_error}`)
          .setDescription(`${emoji.wrong}${general.error.module_activate1}` + ' *`Partenariat`* ' + `${general.error.module_activate2}`)

        interaction.reply({ embeds: ([embed]), ephemeral: true })
      }
    } else {

      var embed = new EmbedBuilder()
        .setColor(`${config.color.color_error}`)
        .setDescription(`${emoji.wrong}${general.error.server_follow}`)

      interaction.reply({ embeds: ([embed]), ephemeral: true })
    }
  }

  if (interaction.commandName === "money") {
    if (interaction.guildId === server_id) {
      if (db.module.has(String('economie')) && db.module.get(String('economie')) === "on") {

        try {

          if (!((String(interaction.options.getUser('utilisateur'))) === "null")) {
            if (db.money.has(String((interaction.options.getUser('utilisateur')).id + '-money'))) {

              var embed = new EmbedBuilder()
                .setColor(`${config.color.color}`)
                .setTitle(`${emoji.money}${ecomoney.title.text1}`)
                .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
                .setDescription(`${ecomoney.description.text1}` + '*`' + db.money.get(String((interaction.options.getUser('utilisateur')).id + '-money')) + db.database.get(String('economie_symbole')) + '`* !')

              interaction.reply({ embeds: ([embed]) })
            } else {

              db.money.set(String((interaction.options.getUser('utilisateur')).id + '-money'), parseInt(db.database.get(String('economie_start'))))

              var embed = new EmbedBuilder()
                .setColor(`${config.color.color}`)
                .setTitle(`${emoji.money}${ecomoney.title.text1}`)
                .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
                .setDescription(`${ecomoney.description.text1}` + '*`' + db.money.get(String((String(interaction.options.getUser('utilisateur').id)) + '-money')) + db.database.get(String('economie_symbole')) + '`* !')

              interaction.reply({ embeds: ([embed]) })
            }
          } else {
            if (db.money.has(String(interaction.user.id) + '-money')) {

              var embed = new EmbedBuilder()
                .setColor(`${config.color.color}`)
                .setTitle(`${emoji.money}${ecomoney.title.text1}`)
                .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
                .setDescription(`${ecomoney.description.text3}` + '*`' + db.money.get(String((String(interaction.user.id)) + '-money')) + db.database.get(String('economie_symbole')) + '`* !')

              interaction.reply({ embeds: ([embed]) })
            } else {

              db.money.set(String((interaction.options.getUser('utilisateur')).id + '-money'), parseInt(db.database.get(String('economie_start'))))

              var embed = new EmbedBuilder()
                .setColor(`${config.color.color}`)
                .setTitle(`${emoji.money}${ecomoney.title.text1}`)
                .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
                .setDescription(`${ecomoney.description.text3}` + '*`' + db.money.get(String((String(interaction.user.id)) + '-money')) + db.database.get(String('economie_symbole')) + '`* !')

              interaction.reply({ embeds: ([embed]) })

            }
          }

        } catch (err) {
          console.log(chalk.red(err));

          var embed = new EmbedBuilder()
            .setColor(`${config.color.error}`)
            .setDescription(`${emoji.error}${server_infos.description.text9}`)

          interaction.reply({ embeds: ([embed]), ephemeral: true })

          let error = err

          var embed = new EmbedBuilder()
            .setColor(`${config.color.error}`)
            .setTitle(`${emoji.error}${server_infos.title.text2}`)
            .setDescription('```money``` ```diff' + `\n\n` + `- ${error}` + '```')
            .setAuthor({ name: client.user.tag + ' | ' + client.user.id, iconURL: client.user.displayAvatarURL() })
            .setFooter({ text: interaction.user.tag + ' | ' + interaction.user.id, iconURL: interaction.user.displayAvatarURL() })

          client.channels.cache.get(String(`${config.channels.error}`)).send({ embeds: ([embed]) })

        }

      } else {
        var embed = new EmbedBuilder()
          .setColor(`${config.color.color_error}`)
          .setDescription(`${emoji.wrong}${general.error.module_activate1}` + ' *`Economie`* ' + `${general.error.module_activate2}`)

        interaction.reply({ embeds: ([embed]), ephemeral: true })
      }
    } else {

      var embed = new EmbedBuilder()
        .setColor(`${config.color.color_error}`)
        .setDescription(`${emoji.wrong}${general.error.server_follow}`)

      interaction.reply({ embeds: ([embed]), ephemeral: true })
    }
  }

  ///////// Embed Command \\\\\\\

  if (interaction.customId === "button_embed_channel") {
    if (db.module.get(String('embed')) === "on") {
      if ((interaction.member.permissions.has(PermissionsBitField.Flags.Administrator)) || (interaction.member.id === dev)) {
        interaction.deferUpdate()
        interaction.channel.send(`${emoji.pen}${embedm.description.text1}`).then(async (question) => {
          (interaction.channel).awaitMessages({
            filter: (m) => m.author.id === interaction.member.id,
            time: (500 * 60 * 100),
            max: 1
          }).then(async (collected) => {
            reply = collected.first().content;
            message = collected.first();
            interaction.channel.bulkDelete(1)
            question.delete()
            await delay(Number(1) * 1000)
            if (!(reply === "cancel")) {
              if ((!(((reply) || '').startsWith('<#' || '')))) {


                try {

                  client.channels.cache.get(reply).send({
                    content: "Salon d'arrivé de l'embed"
                  }).then(async (test) => {
                    await test.delete()
                  })

                  db.database.set(String(interaction.member.id + '-channel_embed'), (reply));

                  var embed = new EmbedBuilder()
                    .setColor(`${config.color.color_good}`)
                    .setDescription(`${emoji.tick}${general.response.save_modifications}`)

                  interaction.channel.send({
                    embeds: ([embed])
                  }).then(async (response_save) => {
                    await delay(Number(3) * 1000)
                    response_save.delete()
                  })

                  var embed = new EmbedBuilder()
                    .setColor(db.database.get(String(interaction.member.id + '-color_embed')))
                    .setDescription(db.database.get(String(interaction.member.id + '-description_embed')))
                    .setTitle(db.database.get(String(interaction.member.id + '-title_embed')))
                    .setAuthor({ name: db.database.get(String(interaction.member.id + '-author_embed')) })
                    .setFooter({ text: db.database.get(String(interaction.member.id + '-footer_embed')) })

                  const button_embed_channel = new ButtonBuilder()
                    .setLabel('Salon d\'envoi')
                    .setEmoji(`${emoji.chanel}`)
                    .setCustomId('button_embed_channel')
                    .setStyle(ButtonStyle.Primary)

                  const button_embed_title = new ButtonBuilder()
                    .setLabel('Titre')
                    .setEmoji(`${emoji.list}`)
                    .setCustomId('button_embed_title')
                    .setStyle(ButtonStyle.Danger)

                  const button_embed_description = new ButtonBuilder()
                    .setLabel('Description')
                    .setEmoji(`${emoji.pen}`)
                    .setCustomId('button_embed_description')
                    .setStyle(ButtonStyle.Secondary)

                  const button_embed_footer = new ButtonBuilder()
                    .setLabel('Footer')
                    .setEmoji(`${emoji.diamond}`)
                    .setCustomId('button_embed_footer')
                    .setStyle(ButtonStyle.Success)

                  const button_embed_author = new ButtonBuilder()
                    .setLabel('Auteur')
                    .setEmoji(`${emoji.file}`)
                    .setCustomId('button_embed_author')
                    .setStyle(ButtonStyle.Success)

                  const button_embed_color = new ButtonBuilder()
                    .setLabel('Couleur')
                    .setEmoji(`${emoji.color}`)
                    .setCustomId('button_embed_color')
                    .setStyle(ButtonStyle.Success)

                  const button_embed_send = new ButtonBuilder()
                    .setEmoji(`${emoji.tick}`)
                    .setStyle(ButtonStyle.Success)
                    .setCustomId("button_embed_send")

                  const button_embed_send_disable = new ButtonBuilder()
                    .setEmoji(`${emoji.tick}`)
                    .setStyle(ButtonStyle.Success)
                    .setCustomId("button_embed_send_disable")
                    .setDisabled(true)

                  const menu_embed = new ActionRowBuilder()
                    .addComponents(button_embed_channel)
                    .addComponents(button_embed_send)

                  const menu_embed2 = new ActionRowBuilder()
                    .addComponents(button_embed_channel)
                    .addComponents(button_embed_send_disable)

                  const menu_embed1 = new ActionRowBuilder()
                    .addComponents(button_embed_title)
                    .addComponents(button_embed_description)
                    .addComponents(button_embed_footer)
                    .addComponents(button_embed_author)
                    .addComponents(button_embed_color)


                  if ((db.database.get(String(interaction.member.id + '-channel_embed')) === "**Salon:** *`Non défini`*")) {
                    interaction.message.edit({ content: db.database.get(String(interaction.member.id + '-channel_embed')), embeds: ([embed]), components: [menu_embed1, menu_embed2] })
                  } else {
                    interaction.message.edit({ content: '**Salon:** <#' + db.database.get(String(interaction.member.id + '-channel_embed')) + '>', embeds: ([embed]), components: [menu_embed1, menu_embed] })
                  }

                } catch (err) {

                  console.log(chalk.red(err + ' (SALON RENSEIGNE INTROUVABLE)'))

                  var embed = new EmbedBuilder()
                    .setColor(`${config.color.color_error}`)
                    .setDescription(`${emoji.wrong}${general.error.channel_notfound}`)

                  interaction.channel.send({
                    embeds: ([embed])
                  }).then(async (response_error) => {
                    await delay(Number(3) * 1000)
                    response_error.delete()

                  })



                }

              } else {

                try {

                  let change = reply.replace('<', '')
                  let change1 = change.replace('#', '')
                  let change2 = change1.replace('>', '')

                  db.database.set(String(interaction.member.id + '-channel_embed'), change2)

                  client.channels.cache.get(change2).send({
                    content: "Salon d'arrivé de l'embed"
                  }).then(async (test) => {
                    await test.delete()
                  })

                  var embed = new EmbedBuilder()
                    .setColor(`${config.color.color_good}`)
                    .setDescription(`${emoji.tick}${general.response.save_modifications}`)

                  interaction.channel.send({
                    embeds: ([embed])
                  }).then(async (response_save) => {
                    await delay(Number(3) * 1000)
                    response_save.delete()
                  })

                  var embed = new EmbedBuilder()
                    .setColor(db.database.get(String(interaction.member.id + '-color_embed')))
                    .setDescription(db.database.get(String(interaction.member.id + '-description_embed')))
                    .setTitle(db.database.get(String(interaction.member.id + '-title_embed')))
                    .setAuthor({ name: db.database.get(String(interaction.member.id + '-author_embed')) })
                    .setFooter({ text: db.database.get(String(interaction.member.id + '-footer_embed')) })

                  const button_embed_channel = new ButtonBuilder()
                    .setLabel('Salon d\'envoi')
                    .setEmoji(`${emoji.chanel}`)
                    .setCustomId('button_embed_channel')
                    .setStyle(ButtonStyle.Primary)

                  const button_embed_title = new ButtonBuilder()
                    .setLabel('Titre')
                    .setEmoji(`${emoji.list}`)
                    .setCustomId('button_embed_title')
                    .setStyle(ButtonStyle.Danger)

                  const button_embed_description = new ButtonBuilder()
                    .setLabel('Description')
                    .setEmoji(`${emoji.pen}`)
                    .setCustomId('button_embed_description')
                    .setStyle(ButtonStyle.Secondary)

                  const button_embed_footer = new ButtonBuilder()
                    .setLabel('Footer')
                    .setEmoji(`${emoji.diamond}`)
                    .setCustomId('button_embed_footer')
                    .setStyle(ButtonStyle.Success)

                  const button_embed_author = new ButtonBuilder()
                    .setLabel('Auteur')
                    .setEmoji(`${emoji.file}`)
                    .setCustomId('button_embed_author')
                    .setStyle(ButtonStyle.Success)

                  const button_embed_color = new ButtonBuilder()
                    .setLabel('Couleur')
                    .setEmoji(`${emoji.color}`)
                    .setCustomId('button_embed_color')
                    .setStyle(ButtonStyle.Success)

                  const button_embed_send = new ButtonBuilder()
                    .setEmoji(`${emoji.tick}`)
                    .setStyle(ButtonStyle.Success)
                    .setCustomId("button_embed_send")

                  const button_embed_send_disable = new ButtonBuilder()
                    .setEmoji(`${emoji.tick}`)
                    .setStyle(ButtonStyle.Success)
                    .setCustomId("button_embed_send_disable")
                    .setDisabled(true)

                  const menu_embed = new ActionRowBuilder()
                    .addComponents(button_embed_channel)
                    .addComponents(button_embed_send)

                  const menu_embed2 = new ActionRowBuilder()
                    .addComponents(button_embed_channel)
                    .addComponents(button_embed_send_disable)

                  const menu_embed1 = new ActionRowBuilder()
                    .addComponents(button_embed_title)
                    .addComponents(button_embed_description)
                    .addComponents(button_embed_footer)
                    .addComponents(button_embed_author)
                    .addComponents(button_embed_color)


                  if ((db.database.get(String(interaction.member.id + '-channel_embed')) === "**Salon:** *`Non défini`*")) {
                    interaction.message.edit({ content: db.database.get(String(interaction.member.id + '-channel_embed')), embeds: ([embed]), components: [menu_embed1, menu_embed2] })
                  } else {
                    interaction.message.edit({ content: '**Salon:** <#' + db.database.get(String(interaction.member.id + '-channel_embed')) + '>', embeds: ([embed]), components: [menu_embed1, menu_embed] })
                  }

                  console.log(chalk.green("L'utilisateur " + interaction.user.tag + " a configuré le salon de partenariat sur le salon " + client.channels.cache.get(change2).name + "."))

                } catch (err) {

                  console.log(chalk.red(err + ' (SALON RENSEIGNE INTROUVABLE)'))

                  var embed = new EmbedBuilder()
                    .setColor(`${config.color.color_error}`)
                    .setDescription(`${emoji.wrong}${general.error.channel_notfound}`)

                  interaction.channel.send({
                    embeds: ([embed])
                  }).then(async (response_error) => {
                    await delay(Number(3) * 1000)
                    response_error.delete()

                  })



                }
              }
            } else {

              var embed = new EmbedBuilder()
                .setColor(`${config.color.color_error}`)
                .setDescription(`${emoji.wrong}${general.response.nosave_modif}`)
              interaction.channel.send({
                embeds: ([embed])
              }).then(async (response_nosave) => {
                await delay(Number(3) * 1000)
                response_nosave.delete()

              })
            }
          })
        })
      }
    }

  }

  if (interaction.customId === "button_embed_title") {
    if (db.module.get(String('embed')) === "on") {
      if ((interaction.member.permissions.has(PermissionsBitField.Flags.Administrator)) || (interaction.member.id === dev)) {
        interaction.deferUpdate()
        interaction.channel.send(`${emoji.pen}${embedm.description.text2}`).then(async (question) => {
          (interaction.channel).awaitMessages({
            filter: (m) => m.author.id === interaction.member.id,
            time: (1500 * 60 * 100),
            max: 1
          }).then(async (collected) => {
            reply = collected.first().content;
            message = collected.first();
            interaction.channel.bulkDelete(1)
            question.delete()
            await delay(Number(1) * 1000)
            if (!(reply === "cancel")) {

              db.database.set(String(interaction.member.id + '-title_embed'), reply)

              var embed = new EmbedBuilder()
                .setColor(`${config.color.color_good}`)
                .setDescription(`${emoji.tick}${general.response.save_modifications}`)

              interaction.channel.send({
                embeds: ([embed])
              }).then(async (response_save) => {
                await delay(Number(3) * 1000)
                response_save.delete()
              })

              var embed = new EmbedBuilder()
                .setColor(db.database.get(String(interaction.member.id + '-color_embed')))
                .setDescription(db.database.get(String(interaction.member.id + '-description_embed')))
                .setTitle(db.database.get(String(interaction.member.id + '-title_embed')))
                .setAuthor({ name: db.database.get(String(interaction.member.id + '-author_embed')) })
                .setFooter({ text: db.database.get(String(interaction.member.id + '-footer_embed')) })

              const button_embed_channel = new ButtonBuilder()
                .setLabel('Salon d\'envoi')
                .setEmoji(`${emoji.chanel}`)
                .setCustomId('button_embed_channel')
                .setStyle(ButtonStyle.Primary)

              const button_embed_title = new ButtonBuilder()
                .setLabel('Titre')
                .setEmoji(`${emoji.list}`)
                .setCustomId('button_embed_title')
                .setStyle(ButtonStyle.Danger)

              const button_embed_description = new ButtonBuilder()
                .setLabel('Description')
                .setEmoji(`${emoji.pen}`)
                .setCustomId('button_embed_description')
                .setStyle(ButtonStyle.Secondary)

              const button_embed_footer = new ButtonBuilder()
                .setLabel('Footer')
                .setEmoji(`${emoji.diamond}`)
                .setCustomId('button_embed_footer')
                .setStyle(ButtonStyle.Success)

              const button_embed_author = new ButtonBuilder()
                .setLabel('Auteur')
                .setEmoji(`${emoji.file}`)
                .setCustomId('button_embed_author')
                .setStyle(ButtonStyle.Success)

              const button_embed_color = new ButtonBuilder()
                .setLabel('Couleur')
                .setEmoji(`${emoji.color}`)
                .setCustomId('button_embed_color')
                .setStyle(ButtonStyle.Success)

              const button_embed_send = new ButtonBuilder()
                .setEmoji(`${emoji.tick}`)
                .setStyle(ButtonStyle.Success)
                .setCustomId("button_embed_send")

              const button_embed_send_disable = new ButtonBuilder()
                .setEmoji(`${emoji.tick}`)
                .setStyle(ButtonStyle.Success)
                .setCustomId("button_embed_send_disable")
                .setDisabled(true)

              const menu_embed = new ActionRowBuilder()
                .addComponents(button_embed_channel)
                .addComponents(button_embed_send)

              const menu_embed2 = new ActionRowBuilder()
                .addComponents(button_embed_channel)
                .addComponents(button_embed_send_disable)

              const menu_embed1 = new ActionRowBuilder()
                .addComponents(button_embed_title)
                .addComponents(button_embed_description)
                .addComponents(button_embed_footer)
                .addComponents(button_embed_author)
                .addComponents(button_embed_color)


              if ((db.database.get(String(interaction.member.id + '-channel_embed')) === "**Salon:** *`Non défini`*")) {
                interaction.message.edit({ content: db.database.get(String(interaction.member.id + '-channel_embed')), embeds: ([embed]), components: [menu_embed1, menu_embed2] })
              } else {
                interaction.message.edit({ content: '**Salon:** <#' + db.database.get(String(interaction.member.id + '-channel_embed')) + '>', embeds: ([embed]), components: [menu_embed1, menu_embed] })
              }

            } else {

              var embed = new EmbedBuilder()
                .setColor(`${config.color.color_error}`)
                .setDescription(`${emoji.wrong}${general.response.nosave_modif}`)
              interaction.channel.send({
                embeds: ([embed])
              }).then(async (response_nosave) => {
                await delay(Number(3) * 1000)
                response_nosave.delete()

              })
            }
          })
        })
      }
    }

  }

  if (interaction.customId === "button_embed_description") {
    if (db.module.get(String('embed')) === "on") {
      if ((interaction.member.permissions.has(PermissionsBitField.Flags.Administrator)) || (interaction.member.id === dev)) {
        interaction.deferUpdate()
        interaction.channel.send(`${emoji.pen}${embedm.description.text3}`).then(async (question) => {
          (interaction.channel).awaitMessages({
            filter: (m) => m.author.id === interaction.member.id,
            time: (1500 * 60 * 100),
            max: 1
          }).then(async (collected) => {
            reply = collected.first().content;
            message = collected.first();
            interaction.channel.bulkDelete(1)
            question.delete()
            await delay(Number(1) * 1000)
            if (!(reply === "cancel")) {

              db.database.set(String(interaction.member.id + '-description_embed'), reply)

              var embed = new EmbedBuilder()
                .setColor(`${config.color.color_good}`)
                .setDescription(`${emoji.tick}${general.response.save_modifications}`)

              interaction.channel.send({
                embeds: ([embed])
              }).then(async (response_save) => {
                await delay(Number(3) * 1000)
                response_save.delete()
              })

              var embed = new EmbedBuilder()
                .setColor(db.database.get(String(interaction.member.id + '-color_embed')))
                .setDescription(db.database.get(String(interaction.member.id + '-description_embed')))
                .setTitle(db.database.get(String(interaction.member.id + '-title_embed')))
                .setAuthor({ name: db.database.get(String(interaction.member.id + '-author_embed')) })
                .setFooter({ text: db.database.get(String(interaction.member.id + '-footer_embed')) })

              const button_embed_channel = new ButtonBuilder()
                .setLabel('Salon d\'envoi')
                .setEmoji(`${emoji.chanel}`)
                .setCustomId('button_embed_channel')
                .setStyle(ButtonStyle.Primary)

              const button_embed_title = new ButtonBuilder()
                .setLabel('Titre')
                .setEmoji(`${emoji.list}`)
                .setCustomId('button_embed_title')
                .setStyle(ButtonStyle.Danger)

              const button_embed_description = new ButtonBuilder()
                .setLabel('Description')
                .setEmoji(`${emoji.pen}`)
                .setCustomId('button_embed_description')
                .setStyle(ButtonStyle.Secondary)

              const button_embed_footer = new ButtonBuilder()
                .setLabel('Footer')
                .setEmoji(`${emoji.diamond}`)
                .setCustomId('button_embed_footer')
                .setStyle(ButtonStyle.Success)

              const button_embed_author = new ButtonBuilder()
                .setLabel('Auteur')
                .setEmoji(`${emoji.file}`)
                .setCustomId('button_embed_author')
                .setStyle(ButtonStyle.Success)

              const button_embed_color = new ButtonBuilder()
                .setLabel('Couleur')
                .setEmoji(`${emoji.color}`)
                .setCustomId('button_embed_color')
                .setStyle(ButtonStyle.Success)

              const button_embed_send = new ButtonBuilder()
                .setEmoji(`${emoji.tick}`)
                .setStyle(ButtonStyle.Success)
                .setCustomId("button_embed_send")

              const button_embed_send_disable = new ButtonBuilder()
                .setEmoji(`${emoji.tick}`)
                .setStyle(ButtonStyle.Success)
                .setCustomId("button_embed_send_disable")
                .setDisabled(true)

              const menu_embed = new ActionRowBuilder()
                .addComponents(button_embed_channel)
                .addComponents(button_embed_send)

              const menu_embed2 = new ActionRowBuilder()
                .addComponents(button_embed_channel)
                .addComponents(button_embed_send_disable)

              const menu_embed1 = new ActionRowBuilder()
                .addComponents(button_embed_title)
                .addComponents(button_embed_description)
                .addComponents(button_embed_footer)
                .addComponents(button_embed_author)
                .addComponents(button_embed_color)


              if ((db.database.get(String(interaction.member.id + '-channel_embed')) === "**Salon:** *`Non défini`*")) {
                interaction.message.edit({ content: db.database.get(String(interaction.member.id + '-channel_embed')), embeds: ([embed]), components: [menu_embed1, menu_embed2] })
              } else {
                interaction.message.edit({ content: '**Salon:** <#' + db.database.get(String(interaction.member.id + '-channel_embed')) + '>', embeds: ([embed]), components: [menu_embed1, menu_embed] })
              }

            } else {

              var embed = new EmbedBuilder()
                .setColor(`${config.color.color_error}`)
                .setDescription(`${emoji.wrong}${general.response.nosave_modif}`)
              interaction.channel.send({
                embeds: ([embed])
              }).then(async (response_nosave) => {
                await delay(Number(3) * 1000)
                response_nosave.delete()

              })
            }
          })
        })
      }
    }

  }

  if (interaction.customId === "button_embed_author") {
    if (db.module.get(String('embed')) === "on") {
      if ((interaction.member.permissions.has(PermissionsBitField.Flags.Administrator)) || (interaction.member.id === dev)) {
        interaction.deferUpdate()
        interaction.channel.send(`${emoji.pen}${embedm.description.text6}`).then(async (question) => {
          (interaction.channel).awaitMessages({
            filter: (m) => m.author.id === interaction.member.id,
            time: (1500 * 60 * 100),
            max: 1
          }).then(async (collected) => {
            reply = collected.first().content;
            message = collected.first();
            interaction.channel.bulkDelete(1)
            question.delete()
            await delay(Number(1) * 1000)
            if (!(reply === "cancel")) {

              db.database.set(String(interaction.member.id + '-author_embed'), reply)

              var embed = new EmbedBuilder()
                .setColor(`${config.color.color_good}`)
                .setDescription(`${emoji.tick}${general.response.save_modifications}`)

              interaction.channel.send({
                embeds: ([embed])
              }).then(async (response_save) => {
                await delay(Number(3) * 1000)
                response_save.delete()
              })

              var embed = new EmbedBuilder()
                .setColor(db.database.get(String(interaction.member.id + '-color_embed')))
                .setDescription(db.database.get(String(interaction.member.id + '-description_embed')))
                .setTitle(db.database.get(String(interaction.member.id + '-title_embed')))
                .setAuthor({ name: db.database.get(String(interaction.member.id + '-author_embed')) })
                .setFooter({ text: db.database.get(String(interaction.member.id + '-footer_embed')) })

              const button_embed_channel = new ButtonBuilder()
                .setLabel('Salon d\'envoi')
                .setEmoji(`${emoji.chanel}`)
                .setCustomId('button_embed_channel')
                .setStyle(ButtonStyle.Primary)

              const button_embed_title = new ButtonBuilder()
                .setLabel('Titre')
                .setEmoji(`${emoji.list}`)
                .setCustomId('button_embed_title')
                .setStyle(ButtonStyle.Danger)

              const button_embed_description = new ButtonBuilder()
                .setLabel('Description')
                .setEmoji(`${emoji.pen}`)
                .setCustomId('button_embed_description')
                .setStyle(ButtonStyle.Secondary)

              const button_embed_footer = new ButtonBuilder()
                .setLabel('Footer')
                .setEmoji(`${emoji.diamond}`)
                .setCustomId('button_embed_footer')
                .setStyle(ButtonStyle.Success)

              const button_embed_author = new ButtonBuilder()
                .setLabel('Auteur')
                .setEmoji(`${emoji.file}`)
                .setCustomId('button_embed_author')
                .setStyle(ButtonStyle.Success)

              const button_embed_color = new ButtonBuilder()
                .setLabel('Couleur')
                .setEmoji(`${emoji.color}`)
                .setCustomId('button_embed_color')
                .setStyle(ButtonStyle.Success)

              const button_embed_send = new ButtonBuilder()
                .setEmoji(`${emoji.tick}`)
                .setStyle(ButtonStyle.Success)
                .setCustomId("button_embed_send")

              const button_embed_send_disable = new ButtonBuilder()
                .setEmoji(`${emoji.tick}`)
                .setStyle(ButtonStyle.Success)
                .setCustomId("button_embed_send_disable")
                .setDisabled(true)

              const menu_embed = new ActionRowBuilder()
                .addComponents(button_embed_channel)
                .addComponents(button_embed_send)

              const menu_embed2 = new ActionRowBuilder()
                .addComponents(button_embed_channel)
                .addComponents(button_embed_send_disable)

              const menu_embed1 = new ActionRowBuilder()
                .addComponents(button_embed_title)
                .addComponents(button_embed_description)
                .addComponents(button_embed_footer)
                .addComponents(button_embed_author)
                .addComponents(button_embed_color)


              if ((db.database.get(String(interaction.member.id + '-channel_embed')) === "**Salon:** *`Non défini`*")) {
                interaction.message.edit({ content: db.database.get(String(interaction.member.id + '-channel_embed')), embeds: ([embed]), components: [menu_embed1, menu_embed2] })
              } else {
                interaction.message.edit({ content: '**Salon:** <#' + db.database.get(String(interaction.member.id + '-channel_embed')) + '>', embeds: ([embed]), components: [menu_embed1, menu_embed] })
              }

            } else {

              var embed = new EmbedBuilder()
                .setColor(`${config.color.color_error}`)
                .setDescription(`${emoji.wrong}${general.response.nosave_modif}`)
              interaction.channel.send({
                embeds: ([embed])
              }).then(async (response_nosave) => {
                await delay(Number(3) * 1000)
                response_nosave.delete()

              })
            }
          })
        })
      }
    }

  }

  if (interaction.customId === "button_embed_footer") {
    if (db.module.get(String('embed')) === "on") {
      if ((interaction.member.permissions.has(PermissionsBitField.Flags.Administrator)) || (interaction.member.id === dev)) {
        interaction.deferUpdate()
        interaction.channel.send(`${emoji.pen}${embedm.description.text4}`).then(async (question) => {
          (interaction.channel).awaitMessages({
            filter: (m) => m.author.id === interaction.member.id,
            time: (1500 * 60 * 100),
            max: 1
          }).then(async (collected) => {
            reply = collected.first().content;
            message = collected.first();
            interaction.channel.bulkDelete(1)
            question.delete()
            await delay(Number(1) * 1000)
            if (!(reply === "cancel")) {

              db.database.set(String(interaction.member.id + '-footer_embed'), reply)

              var embed = new EmbedBuilder()
                .setColor(`${config.color.color_good}`)
                .setDescription(`${emoji.tick}${general.response.save_modifications}`)

              interaction.channel.send({
                embeds: ([embed])
              }).then(async (response_save) => {
                await delay(Number(3) * 1000)
                response_save.delete()
              })

              var embed = new EmbedBuilder()
                .setColor(db.database.get(String(interaction.member.id + '-color_embed')))
                .setDescription(db.database.get(String(interaction.member.id + '-description_embed')))
                .setTitle(db.database.get(String(interaction.member.id + '-title_embed')))
                .setAuthor({ name: db.database.get(String(interaction.member.id + '-author_embed')) })
                .setFooter({ text: db.database.get(String(interaction.member.id + '-footer_embed')) })

              const button_embed_channel = new ButtonBuilder()
                .setLabel('Salon d\'envoi')
                .setEmoji(`${emoji.chanel}`)
                .setCustomId('button_embed_channel')
                .setStyle(ButtonStyle.Primary)

              const button_embed_title = new ButtonBuilder()
                .setLabel('Titre')
                .setEmoji(`${emoji.list}`)
                .setCustomId('button_embed_title')
                .setStyle(ButtonStyle.Danger)

              const button_embed_description = new ButtonBuilder()
                .setLabel('Description')
                .setEmoji(`${emoji.pen}`)
                .setCustomId('button_embed_description')
                .setStyle(ButtonStyle.Secondary)

              const button_embed_footer = new ButtonBuilder()
                .setLabel('Footer')
                .setEmoji(`${emoji.diamond}`)
                .setCustomId('button_embed_footer')
                .setStyle(ButtonStyle.Success)

              const button_embed_author = new ButtonBuilder()
                .setLabel('Auteur')
                .setEmoji(`${emoji.file}`)
                .setCustomId('button_embed_author')
                .setStyle(ButtonStyle.Success)

              const button_embed_color = new ButtonBuilder()
                .setLabel('Couleur')
                .setEmoji(`${emoji.color}`)
                .setCustomId('button_embed_color')
                .setStyle(ButtonStyle.Success)

              const button_embed_send = new ButtonBuilder()
                .setEmoji(`${emoji.tick}`)
                .setStyle(ButtonStyle.Success)
                .setCustomId("button_embed_send")

              const button_embed_send_disable = new ButtonBuilder()
                .setEmoji(`${emoji.tick}`)
                .setStyle(ButtonStyle.Success)
                .setCustomId("button_embed_send_disable")
                .setDisabled(true)

              const menu_embed = new ActionRowBuilder()
                .addComponents(button_embed_channel)
                .addComponents(button_embed_send)

              const menu_embed2 = new ActionRowBuilder()
                .addComponents(button_embed_channel)
                .addComponents(button_embed_send_disable)

              const menu_embed1 = new ActionRowBuilder()
                .addComponents(button_embed_title)
                .addComponents(button_embed_description)
                .addComponents(button_embed_footer)
                .addComponents(button_embed_author)
                .addComponents(button_embed_color)


              if ((db.database.get(String(interaction.member.id + '-channel_embed')) === "**Salon:** *`Non défini`*")) {
                interaction.message.edit({ content: db.database.get(String(interaction.member.id + '-channel_embed')), embeds: ([embed]), components: [menu_embed1, menu_embed2] })
              } else {
                interaction.message.edit({ content: '**Salon:** <#' + db.database.get(String(interaction.member.id + '-channel_embed')) + '>', embeds: ([embed]), components: [menu_embed1, menu_embed] })
              }

            } else {

              var embed = new EmbedBuilder()
                .setColor(`${config.color.color_error}`)
                .setDescription(`${emoji.wrong}${general.response.nosave_modif}`)
              interaction.channel.send({
                embeds: ([embed])
              }).then(async (response_nosave) => {
                await delay(Number(3) * 1000)
                response_nosave.delete()

              })
            }
          })
        })
      }
    }

  }

  if (interaction.customId === "embed_button_footer_image_member") {
    if (db.module.get(String('embed')) === "on") {
      if ((interaction.member.permissions.has(PermissionsBitField.Flags.Administrator)) || (interaction.member.id === dev)) {
        interaction.deferUpdate()
        interaction.channel.send(`${emoji.pen}${embedm.description.text5}`).then(async (question) => {
          (interaction.channel).awaitMessages({
            filter: (m) => m.author.id === interaction.member.id,
            time: (500 * 60 * 100),
            max: 1
          }).then(async (collected) => {
            reply = collected.first().content;
            message = collected.first();
            interaction.channel.bulkDelete(1)
            question.delete()
            await delay(Number(1) * 1000)
            if (!(reply === "cancel")) {
              if ((((reply) || '').startsWith('<@' || ''))) {

                let change = reply.replace('<', '')
                let change1 = change.replace('@', '')
                let change2 = change1.replace('>', '')

                db.database.set(String(interaction.member.id + '-footer_embed_image'), change2)

                var embed = new EmbedBuilder()
                  .setColor(db.database.get(String(interaction.member.id + '-color_embed')))
                  .setDescription(db.database.get(String(interaction.member.id + '-description_embed')))
                  .setTitle(db.database.get(String(interaction.member.id + '-title_embed')))
                  .setAuthor({ name: db.database.get(String(interaction.member.id + '-author_embed')) })
                  .setFooter({ text: db.database.get(String(interaction.member.id + '-footer_embed')) })



                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color_good}`)
                  .setDescription(`${emoji.tick}${general.response.save_modifications}`)

                interaction.channel.send({
                  embeds: ([embed])
                }).then(async (response_save) => {
                  await delay(Number(3) * 1000)
                  response_save.delete()
                })

              } else {

                db.database.set(String(interaction.member.id + '-footer_embed_image'), reply)

                var embed = new EmbedBuilder()
                  .setColor(db.database.get(String(interaction.member.id + '-color_embed')))
                  .setDescription(db.database.get(String(interaction.member.id + '-description_embed')))
                  .setTitle(db.database.get(String(interaction.member.id + '-title_embed')))
                  .setAuthor({ name: db.database.get(String(interaction.member.id + '-author_embed')) })
                  .setFooter({ text: db.database.get(String(interaction.member.id + '-footer_embed')) })



                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color_good}`)
                  .setDescription(`${emoji.tick}${general.response.save_modifications}`)

                interaction.channel.send({
                  embeds: ([embed])
                }).then(async (response_save) => {
                  await delay(Number(3) * 1000)
                  response_save.delete()
                })


              }
            } else {

              var embed = new EmbedBuilder()
                .setColor(`${config.color.color_error}`)
                .setDescription(`${emoji.wrong}${general.response.nosave_modif}`)
              interaction.channel.send({
                embeds: ([embed])
              }).then(async (response_nosave) => {
                await delay(Number(3) * 1000)
                response_nosave.delete()

              })
            }
          })
        })
      }

    }
  }



  if (interaction.customId === "embed_button_footer_image") {
    if (db.module.get(String('embed')) === "on") {
      if ((interaction.member.permissions.has(PermissionsBitField.Flags.Administrator)) || (interaction.member.id === dev)) {

        var embed = new EmbedBuilder()
          .setColor(db.database.get(String(interaction.member.id + '-color_embed')))
          .setDescription(db.database.get(String(interaction.member.id + '-description_embed')))
          .setTitle(db.database.get(String(interaction.member.id + '-title_embed')))
          .setAuthor({ name: db.database.get(String(interaction.member.id + '-author_embed')) })
          .setFooter({ text: db.database.get(String(interaction.member.id + '-footer_embed')) })

        const embed_button_footer_image_member = new ButtonBuilder()
          .setLabel("Photo de profile")
          .setStyle(ButtonStyle.Secondary)
          .setCustomId("embed_button_footer_image_member")
          .setEmoji(`${emoji.community}`)

        const embed_button_footer_image_link = new ButtonBuilder()
          .setLabel("Image (Lien)")
          .setStyle(ButtonStyle.Secondary)
          .setCustomId("embed_button_footer_image_link")
          .setEmoji(`${emoji.partner}`)

        const embed_button_footer_image_return = new ButtonBuilder()
          .setStyle(ButtonStyle.Secondary)
          .setCustomId("embed_button_footer_image_return")
          .setEmoji(`${emoji.return}`)

        const embed_menu_footer_image = new ActionRowBuilder()
          .addComponents(embed_button_footer_image_member)
          .addComponents(embed_button_footer_image_link)
          .addComponents(embed_button_footer_image_return)

        if ((db.database.get(String(interaction.member.id + '-channel_embed')) === "**Salon:** *`Non défini`*")) {
          interaction.message.edit({ content: db.database.get(String(interaction.member.id + '-channel_embed')), embeds: ([embed]), components: [embed_menu_footer_image] })
        } else {
          interaction.message.edit({ content: '**Salon:** <#' + db.database.get(String(interaction.member.id + '-channel_embed')) + '>', embeds: ([embed]), components: [embed_menu_footer_image] })
        }

        interaction.deferUpdate()

      }
    }
  }

  if (interaction.customId === "button_embed_foot") {
    if (db.module.get(String('embed')) === "on") {
      if ((interaction.member.permissions.has(PermissionsBitField.Flags.Administrator)) || (interaction.member.id === dev)) {

        var embed = new EmbedBuilder()
          .setColor(db.database.get(String(interaction.member.id + '-color_embed')))
          .setDescription(db.database.get(String(interaction.member.id + '-description_embed')))
          .setTitle(db.database.get(String(interaction.member.id + '-title_embed')))
          .setAuthor({ name: db.database.get(String(interaction.member.id + '-author_embed')) })
          .setFooter({ text: db.database.get(String(interaction.member.id + '-footer_embed')) })

        const embed_button_footer_text = new ButtonBuilder()
          .setLabel("Text")
          .setStyle(ButtonStyle.Secondary)
          .setCustomId("embed_button_footer_text")
          .setEmoji(`${emoji.list}`)

        const embed_button_footer_image = new ButtonBuilder()
          .setLabel("Image")
          .setStyle(ButtonStyle.Secondary)
          .setCustomId("embed_button_footer_image")
          .setEmoji(`${emoji.link}`)

        const embed_button_footer_return = new ButtonBuilder()
          .setStyle(ButtonStyle.Secondary)
          .setCustomId("embed_button_footer_return")
          .setEmoji(`${emoji.return}`)

        const embed_menu_footer = new ActionRowBuilder()
          .addComponents(embed_button_footer_text)
          .addComponents(embed_button_footer_image)
          .addComponents(embed_button_footer_return)

        if ((db.database.get(String(interaction.member.id + '-channel_embed')) === "**Salon:** *`Non défini`*")) {
          interaction.message.edit({ content: db.database.get(String(interaction.member.id + '-channel_embed')), embeds: ([embed]), components: [embed_menu_footer] })
        } else {
          interaction.message.edit({ content: '**Salon:** <#' + db.database.get(String(interaction.member.id + '-channel_embed')) + '>', embeds: ([embed]), components: [embed_menu_footer] })
        }

        interaction.deferUpdate()



      }
    }
  }

  if (interaction.customId === "embed_button_footer_image_return") {
    if (db.module.get(String('embed')) === "on") {
      if ((interaction.member.permissions.has(PermissionsBitField.Flags.Administrator)) || (interaction.member.id === dev)) {

        var embed = new EmbedBuilder()
          .setColor(db.database.get(String(interaction.member.id + '-color_embed')))
          .setDescription(db.database.get(String(interaction.member.id + '-description_embed')))
          .setTitle(db.database.get(String(interaction.member.id + '-title_embed')))
          .setAuthor({ name: db.database.get(String(interaction.member.id + '-author_embed')) })
          .setFooter({ text: db.database.get(String(interaction.member.id + '-footer_embed')) })

        const embed_button_footer_text = new ButtonBuilder()
          .setLabel("Text")
          .setStyle(ButtonStyle.Secondary)
          .setCustomId("embed_button_footer_text")
          .setEmoji(`${emoji.list}`)

        const embed_button_footer_image = new ButtonBuilder()
          .setLabel("Image")
          .setStyle(ButtonStyle.Secondary)
          .setCustomId("embed_button_footer_image")
          .setEmoji(`${emoji.link}`)

        const embed_button_footer_return = new ButtonBuilder()
          .setStyle(ButtonStyle.Secondary)
          .setCustomId("embed_button_footer_return")
          .setEmoji(`${emoji.return}`)

        const embed_menu_footer = new ActionRowBuilder()
          .addComponents(embed_button_footer_text)
          .addComponents(embed_button_footer_image)
          .addComponents(embed_button_footer_return)

        if ((db.database.get(String(interaction.member.id + '-channel_embed')) === "**Salon:** *`Non défini`*")) {
          interaction.message.edit({ content: db.database.get(String(interaction.member.id + '-channel_embed')), embeds: ([embed]), components: [embed_menu_footer] })
        } else {
          interaction.message.edit({ content: '**Salon:** <#' + db.database.get(String(interaction.member.id + '-channel_embed')) + '>', embeds: ([embed]), components: [embed_menu_footer] })
        }

        interaction.deferUpdate()

      }
    }
  }

  if (interaction.customId === "embed_button_footer_return") {
    if (db.module.get(String('embed')) === "on") {
      if ((interaction.member.permissions.has(PermissionsBitField.Flags.Administrator)) || (interaction.member.id === dev)) {

        var embed = new EmbedBuilder()
          .setColor(db.database.get(String(interaction.member.id + '-color_embed')))
          .setDescription(db.database.get(String(interaction.member.id + '-description_embed')))
          .setTitle(db.database.get(String(interaction.member.id + '-title_embed')))
          .setAuthor({ name: db.database.get(String(interaction.member.id + '-author_embed')) })
          .setFooter({ text: db.database.get(String(interaction.member.id + '-footer_embed')) })

        const button_embed_channel = new ButtonBuilder()
          .setLabel('Salon d\'envoi')
          .setEmoji(`${emoji.chanel}`)
          .setCustomId('button_embed_channel')
          .setStyle(ButtonStyle.Primary)

        const button_embed_title = new ButtonBuilder()
          .setLabel('Titre')
          .setEmoji(`${emoji.list}`)
          .setCustomId('button_embed_title')
          .setStyle(ButtonStyle.Danger)

        const button_embed_description = new ButtonBuilder()
          .setLabel('Description')
          .setEmoji(`${emoji.pen}`)
          .setCustomId('button_embed_description')
          .setStyle(ButtonStyle.Secondary)

        const button_embed_footer = new ButtonBuilder()
          .setLabel('Footer')
          .setEmoji(`${emoji.diamond}`)
          .setCustomId('button_embed_footer')
          .setStyle(ButtonStyle.Success)

        const button_embed_author = new ButtonBuilder()
          .setLabel('Auteur')
          .setEmoji(`${emoji.file}`)
          .setCustomId('button_embed_author')
          .setStyle(ButtonStyle.Success)

        const button_embed_color = new ButtonBuilder()
          .setLabel('Couleur')
          .setEmoji(`${emoji.color}`)
          .setCustomId('button_embed_color')
          .setStyle(ButtonStyle.Success)

        const button_embed_send = new ButtonBuilder()
          .setEmoji(`${emoji.tick}`)
          .setStyle(ButtonStyle.Success)
          .setCustomId("button_embed_send")

        const button_embed_send_disable = new ButtonBuilder()
          .setEmoji(`${emoji.tick}`)
          .setStyle(ButtonStyle.Success)
          .setCustomId("button_embed_send_disable")
          .setDisabled(true)

        const menu_embed = new ActionRowBuilder()
          .addComponents(button_embed_channel)
          .addComponents(button_embed_send)

        const menu_embed2 = new ActionRowBuilder()
          .addComponents(button_embed_channel)
          .addComponents(button_embed_send_disable)

        const menu_embed1 = new ActionRowBuilder()
          .addComponents(button_embed_title)
          .addComponents(button_embed_description)
          .addComponents(button_embed_footer)
          .addComponents(button_embed_author)
          .addComponents(button_embed_color)


        if ((db.database.get(String(interaction.member.id + '-channel_embed')) === "**Salon:** *`Non défini`*")) {
          interaction.message.edit({ content: db.database.get(String(interaction.member.id + '-channel_embed')), embeds: ([embed]), components: [menu_embed1, menu_embed2] })
        } else {
          interaction.message.edit({ content: '**Salon:** <#' + db.database.get(String(interaction.member.id + '-channel_embed')) + '>', embeds: ([embed]), components: [menu_embed1, menu_embed] })
        }

        interaction.deferUpdate()

      }
    }
  }

  if (interaction.customId === "button_embed_color_red") {
    if (db.module.get(String('embed')) === "on") {
      if ((interaction.member.permissions.has(PermissionsBitField.Flags.Administrator)) || (interaction.member.id === dev)) {

        db.database.set(String(interaction.member.id + '-color_embed'), '#d83c3e')

        var embed = new EmbedBuilder()
          .setColor(db.database.get(String(interaction.member.id + '-color_embed')))
          .setDescription(db.database.get(String(interaction.member.id + '-description_embed')))
          .setTitle(db.database.get(String(interaction.member.id + '-title_embed')))
          .setAuthor({ name: db.database.get(String(interaction.member.id + '-author_embed')) })
          .setFooter({ text: db.database.get(String(interaction.member.id + '-footer_embed')) })

        const button_embed_channel = new ButtonBuilder()
          .setLabel('Salon d\'envoi')
          .setEmoji(`${emoji.chanel}`)
          .setCustomId('button_embed_channel')
          .setStyle(ButtonStyle.Primary)

        const button_embed_title = new ButtonBuilder()
          .setLabel('Titre')
          .setEmoji(`${emoji.list}`)
          .setCustomId('button_embed_title')
          .setStyle(ButtonStyle.Danger)

        const button_embed_description = new ButtonBuilder()
          .setLabel('Description')
          .setEmoji(`${emoji.pen}`)
          .setCustomId('button_embed_description')
          .setStyle(ButtonStyle.Secondary)

        const button_embed_footer = new ButtonBuilder()
          .setLabel('Footer')
          .setEmoji(`${emoji.diamond}`)
          .setCustomId('button_embed_footer')
          .setStyle(ButtonStyle.Success)

        const button_embed_author = new ButtonBuilder()
          .setLabel('Auteur')
          .setEmoji(`${emoji.file}`)
          .setCustomId('button_embed_author')
          .setStyle(ButtonStyle.Success)

        const button_embed_color = new ButtonBuilder()
          .setLabel('Couleur')
          .setEmoji(`${emoji.color}`)
          .setCustomId('button_embed_color')
          .setStyle(ButtonStyle.Success)

        const button_embed_send = new ButtonBuilder()
          .setEmoji(`${emoji.tick}`)
          .setStyle(ButtonStyle.Success)
          .setCustomId("button_embed_send")

        const button_embed_send_disable = new ButtonBuilder()
          .setEmoji(`${emoji.tick}`)
          .setStyle(ButtonStyle.Success)
          .setCustomId("button_embed_send_disable")
          .setDisabled(true)

        const menu_embed = new ActionRowBuilder()
          .addComponents(button_embed_channel)
          .addComponents(button_embed_send)

        const menu_embed2 = new ActionRowBuilder()
          .addComponents(button_embed_channel)
          .addComponents(button_embed_send_disable)

        const menu_embed1 = new ActionRowBuilder()
          .addComponents(button_embed_title)
          .addComponents(button_embed_description)
          .addComponents(button_embed_footer)
          .addComponents(button_embed_author)
          .addComponents(button_embed_color)


        if ((db.database.get(String(interaction.member.id + '-channel_embed')) === "**Salon:** *`Non défini`*")) {
          interaction.message.edit({ content: db.database.get(String(interaction.member.id + '-channel_embed')), embeds: ([embed]), components: [menu_embed1, menu_embed2] })
        } else {
          interaction.message.edit({ content: '**Salon:** <#' + db.database.get(String(interaction.member.id + '-channel_embed')) + '>', embeds: ([embed]), components: [menu_embed1, menu_embed] })
        }

        interaction.deferUpdate()



      }
    }
  }

  if (interaction.customId === "button_embed_color_blue") {
    if (db.module.get(String('embed')) === "on") {
      if ((interaction.member.permissions.has(PermissionsBitField.Flags.Administrator)) || (interaction.member.id === dev)) {

        db.database.set(String(interaction.member.id + '-color_embed'), '#5865f2')

        var embed = new EmbedBuilder()
          .setColor(db.database.get(String(interaction.member.id + '-color_embed')))
          .setDescription(db.database.get(String(interaction.member.id + '-description_embed')))
          .setTitle(db.database.get(String(interaction.member.id + '-title_embed')))
          .setAuthor({ name: db.database.get(String(interaction.member.id + '-author_embed')) })
          .setFooter({ text: db.database.get(String(interaction.member.id + '-footer_embed')) })

        const button_embed_channel = new ButtonBuilder()
          .setLabel('Salon d\'envoi')
          .setEmoji(`${emoji.chanel}`)
          .setCustomId('button_embed_channel')
          .setStyle(ButtonStyle.Primary)

        const button_embed_title = new ButtonBuilder()
          .setLabel('Titre')
          .setEmoji(`${emoji.list}`)
          .setCustomId('button_embed_title')
          .setStyle(ButtonStyle.Danger)

        const button_embed_description = new ButtonBuilder()
          .setLabel('Description')
          .setEmoji(`${emoji.pen}`)
          .setCustomId('button_embed_description')
          .setStyle(ButtonStyle.Secondary)

        const button_embed_footer = new ButtonBuilder()
          .setLabel('Footer')
          .setEmoji(`${emoji.diamond}`)
          .setCustomId('button_embed_footer')
          .setStyle(ButtonStyle.Success)

        const button_embed_author = new ButtonBuilder()
          .setLabel('Auteur')
          .setEmoji(`${emoji.file}`)
          .setCustomId('button_embed_author')
          .setStyle(ButtonStyle.Success)

        const button_embed_color = new ButtonBuilder()
          .setLabel('Couleur')
          .setEmoji(`${emoji.color}`)
          .setCustomId('button_embed_color')
          .setStyle(ButtonStyle.Success)

        const button_embed_send = new ButtonBuilder()
          .setEmoji(`${emoji.tick}`)
          .setStyle(ButtonStyle.Success)
          .setCustomId("button_embed_send")

        const button_embed_send_disable = new ButtonBuilder()
          .setEmoji(`${emoji.tick}`)
          .setStyle(ButtonStyle.Success)
          .setCustomId("button_embed_send_disable")
          .setDisabled(true)

        const menu_embed = new ActionRowBuilder()
          .addComponents(button_embed_channel)
          .addComponents(button_embed_send)

        const menu_embed2 = new ActionRowBuilder()
          .addComponents(button_embed_channel)
          .addComponents(button_embed_send_disable)

        const menu_embed1 = new ActionRowBuilder()
          .addComponents(button_embed_title)
          .addComponents(button_embed_description)
          .addComponents(button_embed_footer)
          .addComponents(button_embed_author)
          .addComponents(button_embed_color)


        if ((db.database.get(String(interaction.member.id + '-channel_embed')) === "**Salon:** *`Non défini`*")) {
          interaction.message.edit({ content: db.database.get(String(interaction.member.id + '-channel_embed')), embeds: ([embed]), components: [menu_embed1, menu_embed2] })
        } else {
          interaction.message.edit({ content: '**Salon:** <#' + db.database.get(String(interaction.member.id + '-channel_embed')) + '>', embeds: ([embed]), components: [menu_embed1, menu_embed] })
        }

        interaction.deferUpdate()



      }
    }
  }

  if (interaction.customId === "button_embed_color_green") {
    if (db.module.get(String('embed')) === "on") {
      if ((interaction.member.permissions.has(PermissionsBitField.Flags.Administrator)) || (interaction.member.id === dev)) {

        db.database.set(String(interaction.member.id + '-color_embed'), '#2d7d46')

        var embed = new EmbedBuilder()
          .setColor(db.database.get(String(interaction.member.id + '-color_embed')))
          .setDescription(db.database.get(String(interaction.member.id + '-description_embed')))
          .setTitle(db.database.get(String(interaction.member.id + '-title_embed')))
          .setAuthor({ name: db.database.get(String(interaction.member.id + '-author_embed')) })
          .setFooter({ text: db.database.get(String(interaction.member.id + '-footer_embed')) })

        const button_embed_channel = new ButtonBuilder()
          .setLabel('Salon d\'envoi')
          .setEmoji(`${emoji.chanel}`)
          .setCustomId('button_embed_channel')
          .setStyle(ButtonStyle.Primary)

        const button_embed_title = new ButtonBuilder()
          .setLabel('Titre')
          .setEmoji(`${emoji.list}`)
          .setCustomId('button_embed_title')
          .setStyle(ButtonStyle.Danger)

        const button_embed_description = new ButtonBuilder()
          .setLabel('Description')
          .setEmoji(`${emoji.pen}`)
          .setCustomId('button_embed_description')
          .setStyle(ButtonStyle.Secondary)

        const button_embed_footer = new ButtonBuilder()
          .setLabel('Footer')
          .setEmoji(`${emoji.diamond}`)
          .setCustomId('button_embed_footer')
          .setStyle(ButtonStyle.Success)

        const button_embed_author = new ButtonBuilder()
          .setLabel('Auteur')
          .setEmoji(`${emoji.file}`)
          .setCustomId('button_embed_author')
          .setStyle(ButtonStyle.Success)

        const button_embed_color = new ButtonBuilder()
          .setLabel('Couleur')
          .setEmoji(`${emoji.color}`)
          .setCustomId('button_embed_color')
          .setStyle(ButtonStyle.Success)

        const button_embed_send = new ButtonBuilder()
          .setEmoji(`${emoji.tick}`)
          .setStyle(ButtonStyle.Success)
          .setCustomId("button_embed_send")

        const button_embed_send_disable = new ButtonBuilder()
          .setEmoji(`${emoji.tick}`)
          .setStyle(ButtonStyle.Success)
          .setCustomId("button_embed_send_disable")
          .setDisabled(true)

        const menu_embed = new ActionRowBuilder()
          .addComponents(button_embed_channel)
          .addComponents(button_embed_send)

        const menu_embed2 = new ActionRowBuilder()
          .addComponents(button_embed_channel)
          .addComponents(button_embed_send_disable)

        const menu_embed1 = new ActionRowBuilder()
          .addComponents(button_embed_title)
          .addComponents(button_embed_description)
          .addComponents(button_embed_footer)
          .addComponents(button_embed_author)
          .addComponents(button_embed_color)


        if ((db.database.get(String(interaction.member.id + '-channel_embed')) === "**Salon:** *`Non défini`*")) {
          interaction.message.edit({ content: db.database.get(String(interaction.member.id + '-channel_embed')), embeds: ([embed]), components: [menu_embed1, menu_embed2] })
        } else {
          interaction.message.edit({ content: '**Salon:** <#' + db.database.get(String(interaction.member.id + '-channel_embed')) + '>', embeds: ([embed]), components: [menu_embed1, menu_embed] })
        }

        interaction.deferUpdate()



      }
    }
  }

  if (interaction.customId === "button_embed_color_gray") {
    if (db.module.get(String('embed')) === "on") {
      if ((interaction.member.permissions.has(PermissionsBitField.Flags.Administrator)) || (interaction.member.id === dev)) {

        db.database.set(String(interaction.member.id + '-color_embed'), '#2f3136')

        var embed = new EmbedBuilder()
          .setColor(db.database.get(String(interaction.member.id + '-color_embed')))
          .setDescription(db.database.get(String(interaction.member.id + '-description_embed')))
          .setTitle(db.database.get(String(interaction.member.id + '-title_embed')))
          .setAuthor({ name: db.database.get(String(interaction.member.id + '-author_embed')) })
          .setFooter({ text: db.database.get(String(interaction.member.id + '-footer_embed')) })

        const button_embed_channel = new ButtonBuilder()
          .setLabel('Salon d\'envoi')
          .setEmoji(`${emoji.chanel}`)
          .setCustomId('button_embed_channel')
          .setStyle(ButtonStyle.Primary)

        const button_embed_title = new ButtonBuilder()
          .setLabel('Titre')
          .setEmoji(`${emoji.list}`)
          .setCustomId('button_embed_title')
          .setStyle(ButtonStyle.Danger)

        const button_embed_description = new ButtonBuilder()
          .setLabel('Description')
          .setEmoji(`${emoji.pen}`)
          .setCustomId('button_embed_description')
          .setStyle(ButtonStyle.Secondary)

        const button_embed_footer = new ButtonBuilder()
          .setLabel('Footer')
          .setEmoji(`${emoji.diamond}`)
          .setCustomId('button_embed_footer')
          .setStyle(ButtonStyle.Success)

        const button_embed_author = new ButtonBuilder()
          .setLabel('Auteur')
          .setEmoji(`${emoji.file}`)
          .setCustomId('button_embed_author')
          .setStyle(ButtonStyle.Success)

        const button_embed_color = new ButtonBuilder()
          .setLabel('Couleur')
          .setEmoji(`${emoji.color}`)
          .setCustomId('button_embed_color')
          .setStyle(ButtonStyle.Success)

        const button_embed_send = new ButtonBuilder()
          .setEmoji(`${emoji.tick}`)
          .setStyle(ButtonStyle.Success)
          .setCustomId("button_embed_send")

        const button_embed_send_disable = new ButtonBuilder()
          .setEmoji(`${emoji.tick}`)
          .setStyle(ButtonStyle.Success)
          .setCustomId("button_embed_send_disable")
          .setDisabled(true)

        const menu_embed = new ActionRowBuilder()
          .addComponents(button_embed_channel)
          .addComponents(button_embed_send)

        const menu_embed2 = new ActionRowBuilder()
          .addComponents(button_embed_channel)
          .addComponents(button_embed_send_disable)

        const menu_embed1 = new ActionRowBuilder()
          .addComponents(button_embed_title)
          .addComponents(button_embed_description)
          .addComponents(button_embed_footer)
          .addComponents(button_embed_author)
          .addComponents(button_embed_color)


        if ((db.database.get(String(interaction.member.id + '-channel_embed')) === "**Salon:** *`Non défini`*")) {
          interaction.message.edit({ content: db.database.get(String(interaction.member.id + '-channel_embed')), embeds: ([embed]), components: [menu_embed1, menu_embed2] })
        } else {
          interaction.message.edit({ content: '**Salon:** <#' + db.database.get(String(interaction.member.id + '-channel_embed')) + '>', embeds: ([embed]), components: [menu_embed1, menu_embed] })
        }

        interaction.deferUpdate()



      }
    }
  }


  if (interaction.customId === "button_embed_color") {
    if (db.module.get(String('embed')) === "on") {
      if ((interaction.member.permissions.has(PermissionsBitField.Flags.Administrator)) || (interaction.member.id === dev)) {

        var embed = new EmbedBuilder()
          .setColor(db.database.get(String(interaction.member.id + '-color_embed')))
          .setDescription(db.database.get(String(interaction.member.id + '-description_embed')))
          .setTitle(db.database.get(String(interaction.member.id + '-title_embed')))
          .setAuthor({ name: db.database.get(String(interaction.member.id + '-author_embed')) })
          .setFooter({ text: db.database.get(String(interaction.member.id + '-footer_embed')) })

        const button_embed_color_red = new ButtonBuilder()
          .setCustomId('button_embed_color_red')
          .setStyle(ButtonStyle.Danger)
          .setLabel(' ')

        const button_embed_color_blue = new ButtonBuilder()
          .setCustomId('button_embed_color_blue')
          .setStyle(ButtonStyle.Primary)
          .setLabel(' ')

        const button_embed_color_green = new ButtonBuilder()
          .setCustomId('button_embed_color_green')
          .setStyle(ButtonStyle.Success)
          .setLabel(' ')

        const button_embed_color_gray = new ButtonBuilder()
          .setCustomId('button_embed_color_gray')
          .setStyle(ButtonStyle.Secondary)
          .setLabel(' ')

        const menu_color = new ActionRowBuilder()
          .addComponents(button_embed_color_red)
          .addComponents(button_embed_color_blue)
          .addComponents(button_embed_color_green)
          .addComponents(button_embed_color_gray)

        if ((db.database.get(String(interaction.member.id + '-channel_embed')) === "**Salon:** *`Non défini`*")) {
          interaction.message.edit({ content: db.database.get(String(interaction.member.id + '-channel_embed')), embeds: ([embed]), components: [menu_color] })
        } else {
          interaction.message.edit({ content: '**Salon:** <#' + db.database.get(String(interaction.member.id + '-channel_embed')) + '>', embeds: ([embed]), components: [menu_color] })
        }

        interaction.deferUpdate()

      }
    }
  }



  if (interaction.customId === "button_embed_send") {
    if (db.module.get(String('embed')) === "on") {
      if (((interaction.member).permissions.has(PermissionsBitField.Flags.Administrator)) || (interaction.member.id === dev)) {
        if (!((db.database.get(String(interaction.member.id + '-title_embed')) === '**Titre:** *`Non défini`*') && (db.database.get(String(interaction.member.id + '-description_embed')) === '**Description:** *`Non défini`*') && (db.database.get(String(interaction.member.id + '-author_embed')) === 'Auteur: Non défini') && (db.database.get(String(interaction.member.id + '-footer_embed')) === 'Footer: Non défini'))) {

          if (db.database.get(String(interaction.member.id + '-title_embed')) === '**Titre:** *`Non défini`*') {
            db.database.set(String(interaction.member.id + '-title_embed'), ' ')
          }
          if (db.database.get(String(interaction.member.id + '-description_embed')) === '**Description:** *`Non défini`*') {
            db.database.set(String(interaction.member.id + '-description_embed'), ' ')
          }
          if (db.database.get(String(interaction.member.id + '-author_embed')) === 'Auteur: Non défini') {
            db.database.set(String(interaction.member.id + '-author_embed'), ' ')
          }
          if (db.database.get(String(interaction.member.id + '-footer_embed')) === 'Footer: Non défini') {
            db.database.set(String(interaction.member.id + '-footer_embed'), ' ')
          }

          var embed = new EmbedBuilder()
            .setColor(db.database.get(String(interaction.member.id + '-color_embed')))
            .setDescription(db.database.get(String(interaction.member.id + '-description_embed')))
            .setTitle(db.database.get(String(interaction.member.id + '-title_embed')))
            .setAuthor({ name: db.database.get(String(interaction.member.id + '-author_embed')) })
            .setFooter({ text: db.database.get(String(interaction.member.id + '-footer_embed')) })

          const button_embed_confirm = new ButtonBuilder()
            .setCustomId("button_embed_confirm")
            .setEmoji(`${emoji.tick}`)
            .setLabel("Envoyer")
            .setStyle(ButtonStyle.Success)

          const button_embed_denied = new ButtonBuilder()
            .setCustomId("button_embed_denied")
            .setEmoji(`${emoji.wrong}`)
            .setLabel("Supprimer")
            .setStyle(ButtonStyle.Danger)

          const button_embed_edit = new ButtonBuilder()
            .setCustomId("button_embed_edit")
            .setEmoji(`${emoji.recycle}`)
            .setLabel("Modifier")
            .setStyle(ButtonStyle.Primary)

          const menu_embed_config = new ActionRowBuilder()
            .addComponents(button_embed_confirm)
            .addComponents(button_embed_denied)
            .addComponents(button_embed_edit)

          interaction.message.edit({ content: '**Salon:** <#' + db.database.get(String(interaction.member.id + '-channel_embed')) + '>', embeds: ([embed]), components: [menu_embed_config] })

          interaction.deferUpdate()


        } else {

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color_error}`)
            .setDescription(`${emoji.wrong}${embedm.description.text10}`)

          interaction.channel.send({
            embeds: ([embed])
          }).then(async (response) => {
            interaction.deferUpdate()
            await delay(Number(3) * 1000)
            await response.delete()
          })

        }


      }
    }
  }

  if (interaction.customId === "button_embed_confirm") {
    if (db.module.get(String('embed')) === "on") {
      if (((interaction.member).permissions.has(PermissionsBitField.Flags.Administrator)) || (interaction.member.id === dev)) {

        var embed = new EmbedBuilder()
          .setColor(db.database.get(String(interaction.member.id + '-color_embed')))
          .setDescription(db.database.get(String(interaction.member.id + '-description_embed')))
          .setTitle(db.database.get(String(interaction.member.id + '-title_embed')))
          .setAuthor({ name: db.database.get(String(interaction.member.id + '-author_embed')) })
          .setFooter({ text: db.database.get(String(interaction.member.id + '-footer_embed')) })

        client.channels.cache.get(db.database.get(String(interaction.member.id + '-channel_embed'))).send({ embeds: ([embed]) })



        var embed = new EmbedBuilder()
          .setColor(`${config.color.color_good}`)
          .setDescription(`${emoji.tick}${embedm.description.text8}` + (client.channels.cache.get(db.database.get(String(interaction.member.id + '-channel_embed')))).name + `${embedm.description.text9}`)

        const button_embed_link = new ButtonBuilder()
          .setLabel("S'y rendre !")
          .setStyle(ButtonStyle.Link)
          .setURL("https://discord.com/channels/" + interaction.guildId + "/" + db.database.get(String(interaction.member.id + '-channel_embed')))

        const menu_embed_link = new ActionRowBuilder()
          .addComponents(button_embed_link)

        interaction.message.edit({ embeds: ([embed]), components: [menu_embed_link] })

        interaction.deferUpdate()

      }
    }
  }


  if (interaction.customId === "button_embed_denied") {
    if (db.module.get(String('embed')) === "on") {
      if (((interaction.member).permissions.has(PermissionsBitField.Flags.Administrator)) || (interaction.member.id === dev)) {

        interaction.message.delete()

        var embed = new EmbedBuilder()
          .setColor(`${config.color.color_error}`)
          .setDescription(`${emoji.bin}${embedm.description.text7}`)

        interaction.channel.send({ embeds: ([embed]) })

      }
    }
  }

  if (interaction.customId === "button_embed_edit") {
    if (db.module.get(String('embed')) === "on") {
      if (((interaction.member).permissions.has(PermissionsBitField.Flags.Administrator)) || (interaction.member.id === dev)) {

        if (db.database.get(String(interaction.member.id + '-title_embed')) === ' ') {
          db.database.set(String(interaction.member.id + '-title_embed'), '**Titre:** *`Non défini`*')
        }
        if (db.database.get(String(interaction.member.id + '-description_embed')) === ' ') {
          db.database.set(String(interaction.member.id + '-description_embed'), '**Description:** *`Non défini`*')
        }
        if (db.database.get(String(interaction.member.id + '-author_embed')) === ' ') {
          db.database.set(String(interaction.member.id + '-author_embed'), 'Auteur: Non défini')
        }
        if (db.database.get(String(interaction.member.id + '-footer_embed')) === ' ') {
          db.database.set(String(interaction.member.id + '-footer_embed'), 'Footer: Non défini')
        }

        var embed = new EmbedBuilder()
          .setColor(db.database.get(String(interaction.member.id + '-color_embed')))
          .setDescription(db.database.get(String(interaction.member.id + '-description_embed')))
          .setTitle(db.database.get(String(interaction.member.id + '-title_embed')))
          .setAuthor({ name: db.database.get(String(interaction.member.id + '-author_embed')) })
          .setFooter({ text: db.database.get(String(interaction.member.id + '-footer_embed')) })

        const button_embed_channel = new ButtonBuilder()
          .setLabel('Salon d\'envoi')
          .setEmoji(`${emoji.chanel}`)
          .setCustomId('button_embed_channel')
          .setStyle(ButtonStyle.Primary)

        const button_embed_title = new ButtonBuilder()
          .setLabel('Titre')
          .setEmoji(`${emoji.list}`)
          .setCustomId('button_embed_title')
          .setStyle(ButtonStyle.Danger)

        const button_embed_description = new ButtonBuilder()
          .setLabel('Description')
          .setEmoji(`${emoji.pen}`)
          .setCustomId('button_embed_description')
          .setStyle(ButtonStyle.Secondary)

        const button_embed_footer = new ButtonBuilder()
          .setLabel('Footer')
          .setEmoji(`${emoji.diamond}`)
          .setCustomId('button_embed_footer')
          .setStyle(ButtonStyle.Success)

        const button_embed_author = new ButtonBuilder()
          .setLabel('Auteur')
          .setEmoji(`${emoji.file}`)
          .setCustomId('button_embed_author')
          .setStyle(ButtonStyle.Success)

        const button_embed_color = new ButtonBuilder()
          .setLabel('Couleur')
          .setEmoji(`${emoji.color}`)
          .setCustomId('button_embed_color')
          .setStyle(ButtonStyle.Success)

        const button_embed_send = new ButtonBuilder()
          .setEmoji(`${emoji.tick}`)
          .setStyle(ButtonStyle.Success)
          .setCustomId("button_embed_send")

        const button_embed_send_disable = new ButtonBuilder()
          .setEmoji(`${emoji.tick}`)
          .setStyle(ButtonStyle.Success)
          .setCustomId("button_embed_send_disable")
          .setDisabled(true)

        const menu_embed = new ActionRowBuilder()
          .addComponents(button_embed_channel)
          .addComponents(button_embed_send)

        const menu_embed2 = new ActionRowBuilder()
          .addComponents(button_embed_channel)
          .addComponents(button_embed_send_disable)

        const menu_embed1 = new ActionRowBuilder()
          .addComponents(button_embed_title)
          .addComponents(button_embed_description)
          .addComponents(button_embed_footer)
          .addComponents(button_embed_author)
          .addComponents(button_embed_color)

        if ((db.database.get(String(interaction.member.id + '-channel_embed')) === "**Salon:** *`Non défini`*")) {
          interaction.message.edit({ content: db.database.get(String(interaction.member.id + '-channel_embed')), embeds: ([embed]), components: [menu_embed1, menu_embed2] })
        } else {
          interaction.message.edit({ content: '**Salon:** <#' + db.database.get(String(interaction.member.id + '-channel_embed')) + '>', embeds: ([embed]), components: [menu_embed1, menu_embed] })
        }

        interaction.deferUpdate()

      }
    }
  }


  if (interaction.commandName === "embed") {
    if (interaction.guildId === server_id) {
      if (db.module.get(String('embed')) === "on") {
        if (((interaction.member).permissions.has(PermissionsBitField.Flags.Administrator)) || (interaction.member.id === dev)) {


          db.database.set(String(interaction.member.id + '-color_embed'), '#2f3136')
          db.database.set(String(interaction.member.id + '-title_embed'), '**Titre:** *`Non défini`*')
          db.database.set(String(interaction.member.id + '-description_embed'), '**Description:** *`Non défini`*')
          db.database.set(String(interaction.member.id + '-author_embed'), 'Auteur: Non défini')
          db.database.set(String(interaction.member.id + '-footer_embed'), 'Footer: Non défini')
          db.database.set(String(interaction.member.id + '-channel_embed'), "**Salon:** *`Non défini`*")


          var embed = new EmbedBuilder()
            .setColor(db.database.get(String(interaction.member.id + '-color_embed')))
            .setDescription(db.database.get(String(interaction.member.id + '-description_embed')))
            .setTitle(db.database.get(String(interaction.member.id + '-title_embed')))
            .setAuthor({ name: db.database.get(String(interaction.member.id + '-author_embed')) })
            .setFooter({ text: db.database.get(String(interaction.member.id + '-footer_embed')) })

          const button_embed_channel = new ButtonBuilder()
            .setLabel('Salon d\'envoi')
            .setEmoji(`${emoji.chanel}`)
            .setCustomId('button_embed_channel')
            .setStyle(ButtonStyle.Primary)

          const button_embed_title = new ButtonBuilder()
            .setLabel('Titre')
            .setEmoji(`${emoji.list}`)
            .setCustomId('button_embed_title')
            .setStyle(ButtonStyle.Danger)

          const button_embed_description = new ButtonBuilder()
            .setLabel('Description')
            .setEmoji(`${emoji.pen}`)
            .setCustomId('button_embed_description')
            .setStyle(ButtonStyle.Secondary)

          const button_embed_footer = new ButtonBuilder()
            .setLabel('Footer')
            .setEmoji(`${emoji.diamond}`)
            .setCustomId('button_embed_footer')
            .setStyle(ButtonStyle.Success)

          const button_embed_author = new ButtonBuilder()
            .setLabel('Auteur')
            .setEmoji(`${emoji.file}`)
            .setCustomId('button_embed_author')
            .setStyle(ButtonStyle.Success)

          const button_embed_color = new ButtonBuilder()
            .setLabel('Couleur')
            .setEmoji(`${emoji.color}`)
            .setCustomId('button_embed_color')
            .setStyle(ButtonStyle.Success)

          const button_embed_send = new ButtonBuilder()
            .setEmoji(`${emoji.tick}`)
            .setStyle(ButtonStyle.Success)
            .setCustomId("button_embed_send")

          const button_embed_send_disable = new ButtonBuilder()
            .setEmoji(`${emoji.tick}`)
            .setStyle(ButtonStyle.Success)
            .setCustomId("button_embed_send_disable")
            .setDisabled(true)

          const menu_embed = new ActionRowBuilder()
            .addComponents(button_embed_channel)
            .addComponents(button_embed_send)

          const menu_embed2 = new ActionRowBuilder()
            .addComponents(button_embed_channel)
            .addComponents(button_embed_send_disable)

          const menu_embed1 = new ActionRowBuilder()
            .addComponents(button_embed_title)
            .addComponents(button_embed_description)
            .addComponents(button_embed_footer)
            .addComponents(button_embed_author)
            .addComponents(button_embed_color)

          if ((db.database.get(String(interaction.member.id + '-channel_embed')) === "**Salon:** *`Non défini`*")) {
            interaction.reply({ content: db.database.get(String(interaction.member.id + '-channel_embed')), embeds: ([embed]), components: [menu_embed1, menu_embed2] })
          } else {
            interaction.reply({ content: db.database.get(String(interaction.member.id + '-channel_embed')), embeds: ([embed]), components: [menu_embed1, menu_embed] })
          }

        } else {

          ////Erreur Perms Admins\\\\

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color_error}`)
            .setDescription(`${emoji.wrong}${general.error.perms_admin}`)

          interaction.reply({
            embeds: ([embed]), ephemeral: true
          })
        }
      } else {

        ////Erreur Module no actif\\\\

        var embed = new EmbedBuilder()
          .setColor(`${config.color.color_error}`)
          .setDescription(`${emoji.wrong}${general.error.module_activate1}` + ' *`Embed`* ' + `${general.error.module_activate2}`)

        interaction.reply({ embeds: ([embed]), ephemeral: true })
      }

    } else {

      ////Erreur not same serv\\\\
      var embed = new EmbedBuilder()
        .setColor(`${config.color.color_error}`)
        .setDescription(`${emoji.wrong}${general.error.server_follow}`)

      interaction.reply({ embeds: ([embed]), ephemeral: true })

    }
  }


  ////////Modules (Dev)\\\\\\\\\
  if (interaction.commandName === "modules") {
    if (interaction.member.id === dev) {
      ///Set database\\\

      if (!(db.module.has(String('utilitaire')))) {
        db.module.set(String('utilitaire'), 'off')
        db.statut.set(String('utilitaire'), '🔴')
      }
      if (!(db.module.has(String('level')))) {
        db.module.set(String('level'), 'off')
        db.statut.set(String('level'), '🔴')
      }
      if (!(db.module.has(String('ghostping')))) {
        db.module.set(String('ghostping'), 'off')
        db.statut.set(String('ghostping'), '🔴')
      }
      if (!(db.module.has(String('partenariat')))) {
        db.module.set(String('partenariat'), 'off')
        db.statut.set(String('partenariat'), '🔴')
      }
      if (!(db.module.has(String('suggestion')))) {
        db.module.set(String('suggestion'), 'off')
        db.statut.set(String('suggestion'), '🔴')
      }
      if (!(db.module.has(String('welcome')))) {
        db.module.set(String('welcome'), 'off')
        db.statut.set(String('welcome'), '🔴')
      }
      if (!(db.module.has(String('partenariat_mp')))) {
        db.module.set(String('partenariat_mp'), 'off')
        db.statut.set(String('partenariat_mp'), '🔴')
      }
      if (!(db.module.has(String('embed')))) {
        db.module.set(String('embed'), 'off')
        db.statut.set(String('embed'), '🔴')
      }
      if (!(db.module.has(String('verification')))) {
        db.module.set(String('verification'), 'off')
        db.statut.set(String('verification'), '🔴')
      }
      if (!(db.module.has(String('economie')))) {
        db.module.set(String('economie'), 'off')
        db.statut.set(String('economie'), '🔴')
      }
      if (!(db.module.has(String('moderation')))) {
        db.module.set(String('moderation'), 'off')
        db.statut.set(String('moderation'), '🔴')
      }
      if (!(db.module.has(String('partenariat_mp')))) {
        db.module.set(String('partenariat_mp'), 'off')
        db.statut.set(String('partenariat_mp'), '🔴')
      }

      if (!(db.module.has(String('sperso')))) {
        db.module.set(String('sperso'), 'off')
        db.statut.set(String('sperso'), '🔴')
      }

      if (!(db.module.has(String('logs')))) {
        db.module.set(String('logs'), 'off')
        db.statut.set(String('logs'), '🔴')
      }

      if (!(db.module.has(String('game')))) {
        db.module.set(String('game'), 'off')
        db.statut.set(String('game'), '🔴')
      }
      if (!(db.module.has(String('pub')))) {
        db.module.set(String('pub'), 'off')
        db.statut.set(String('pub'), '🔴')
      }
      if (!(db.module.has(String('report')))) {
        db.module.set(String('report'), 'off')
        db.statut.set(String('report'), '🔴')
      }
      if (!(db.module.has(String('invites')))) {
        db.module.set(String('invites'), 'off')
        db.statut.set(String('invites'), '🔴')
      }

      ///Embed\\\

      var embed = new EmbedBuilder()
        .setColor(`${config.color.color}`)
        .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
        .setTitle(`${emoji.settings}${configuration.title.text1}`)
        .setDescription(`${emoji.captcha}${configuration.description.text1}` + ' '
          + '\n> ' + db.statut.get(String('utilitaire')) + ' ' + `${emoji.moderateur}${configuration.description.text2}`
          + '\n> ' + db.statut.get(String('moderation')) + ' ' + `${emoji.banned}${configuration.description.text3}`
          + '\n> ' + db.statut.get(String('level')) + ' ' + `${emoji.level}${configuration.description.text4}`
          + '\n> ' + db.statut.get(String('partenariat')) + ' ' + `${emoji.partner}${configuration.description.text5}`
          + '\n> ' + db.statut.get(String('ghostping')) + ' ' + `${emoji.ping}${configuration.description.text6}`
          + '\n> ' + db.statut.get(String('welcome')) + ' ' + `${emoji.welcome}${configuration.description.text7}`
          + '\n> ' + db.statut.get(String('embed')) + ' ' + `${emoji.file}${configuration.description.text8}`
          + '\n> ' + db.statut.get(String('verification')) + ' ' + `${emoji.verify}${configuration.description.text9}`
          + '\n> ' + db.statut.get(String('economie')) + ' ' + `${emoji.reward}${configuration.description.text10}`
          + '\n> ' + db.statut.get(String('suggestion')) + ' ' + `${emoji.pen}${configuration.description.text11}`
          + '\n> ' + db.statut.get(String('partenariat_mp')) + ' ' + `${emoji.link}${configuration.description.text12}`
          + '\n> ' + db.statut.get(String('sperso')) + ' ' + `${emoji.chanel}${configuration.description.text13}`
          + '\n> ' + db.statut.get(String('logs')) + ' ' + `${emoji.database}${configuration.description.text14}`
          + '\n> ' + db.statut.get(String('game')) + `${emoji.game}${configm.description.text67}`
          + '\n> ' + db.statut.get(String('pub')) + `${emoji.list}${configm.description.text73}`
          + '\n> ' + db.statut.get(String('report')) + `${emoji.warn}${configm.description.text95}`
          + '\n> ' + db.statut.get(String('invites')) + `${emoji.recycle}${configm.description.text98}`
        )

      ///Buttons\\\

      const module_button_utilitaire = new ButtonBuilder()
        .setCustomId('module_button_utilitaire')
        .setEmoji(`${emoji.moderateur}`)
        .setStyle(ButtonStyle.Secondary)

      const module_button_moderation = new ButtonBuilder()
        .setCustomId('module_button_moderation')
        .setEmoji(`${emoji.banned}`)
        .setStyle(ButtonStyle.Secondary)

      const module_button_level = new ButtonBuilder()
        .setCustomId('module_button_level')
        .setEmoji(`${emoji.level}`)
        .setStyle(ButtonStyle.Secondary)

      const module_button_partenariat = new ButtonBuilder()
        .setCustomId('module_button_partenariat')
        .setEmoji(`${emoji.partner}`)
        .setStyle(ButtonStyle.Secondary)

      const module_button_ghostping = new ButtonBuilder()
        .setCustomId('module_button_ghostping')
        .setEmoji(`${emoji.ping}`)
        .setStyle(ButtonStyle.Secondary)

      const module_button_welcome = new ButtonBuilder()
        .setCustomId('module_button_welcome')
        .setEmoji(`${emoji.welcome}`)
        .setStyle(ButtonStyle.Secondary)

      const module_button_embed = new ButtonBuilder()
        .setCustomId('module_button_embed')
        .setEmoji(`${emoji.file}`)
        .setStyle(ButtonStyle.Secondary)

      const module_button_verification = new ButtonBuilder()
        .setCustomId('module_button_verification')
        .setEmoji(`${emoji.verify}`)
        .setStyle(ButtonStyle.Secondary)

      const module_button_economie = new ButtonBuilder()
        .setCustomId('module_button_economie')
        .setEmoji(`${emoji.reward}`)
        .setStyle(ButtonStyle.Secondary)

      const module_button_suggestion = new ButtonBuilder()
        .setCustomId('module_button_suggestion')
        .setEmoji(`${emoji.pen}`)
        .setStyle(ButtonStyle.Secondary)

      const module_button_partenariat_mp = new ButtonBuilder()
        .setCustomId('module_button_partenariat_mp')
        .setEmoji(`${emoji.link}`)
        .setStyle(ButtonStyle.Secondary)

      const module_button_sperso = new ButtonBuilder()
        .setCustomId('module_button_sperso')
        .setEmoji(`${emoji.chanel}`)
        .setStyle(ButtonStyle.Secondary)

      const module_button_logs = new ButtonBuilder()
        .setCustomId('module_button_logs')
        .setEmoji(`${emoji.database}`)
        .setStyle(ButtonStyle.Secondary)

      const module_button_game = new ButtonBuilder()
        .setCustomId('module_button_game')
        .setEmoji(`${emoji.game}`)
        .setStyle(ButtonStyle.Secondary)

      const module_button_pub = new ButtonBuilder()
        .setCustomId('module_button_pub')
        .setEmoji(`${emoji.list}`)
        .setStyle(ButtonStyle.Secondary)

      const module_button_report = new ButtonBuilder()
        .setCustomId('module_button_report')
        .setEmoji(`${emoji.warn}`)
        .setStyle(ButtonStyle.Secondary)

      const module_button_invites = new ButtonBuilder()
        .setCustomId('module_button_invites')
        .setEmoji(`${emoji.recycle}`)
        .setStyle(ButtonStyle.Secondary)

      ///Components\\\

      const module_config_menu1 = new ActionRowBuilder()
        .addComponents(module_button_utilitaire)
        .addComponents(module_button_moderation)
        .addComponents(module_button_level)
        .addComponents(module_button_partenariat)
        .addComponents(module_button_ghostping)

      const module_config_menu2 = new ActionRowBuilder()
        .addComponents(module_button_welcome)
        .addComponents(module_button_embed)
        .addComponents(module_button_verification)
        .addComponents(module_button_economie)
        .addComponents(module_button_suggestion)

      const module_config_menu3 = new ActionRowBuilder()
        .addComponents(module_button_partenariat_mp)
        .addComponents(module_button_sperso)
        .addComponents(module_button_logs)
        .addComponents(module_button_game)
        .addComponents(module_button_pub)

      const module_config_menu4 = new ActionRowBuilder()
        .addComponents(module_button_report)
        .addComponents(module_button_invites)

      ///Send embed / components\\\

      interaction.reply({ embeds: ([embed]), components: [module_config_menu1, module_config_menu2, module_config_menu3, module_config_menu4], ephemeral: false })


    } else {

      ///Error permission dev\\\

      var embed = new EmbedBuilder()
        .setColor(`${config.color.color_error}`)
        .setDescription(`${emoji.wrong}${general.error.perms_dev}`)

      interaction.reply({
        embeds: ([embed]), ephemeral: true
      })
    }
  }

  if (interaction.customId === "button_verif_channel") {
    if (((interaction.member).permissions.has(PermissionsBitField.Flags.Administrator)) || (interaction.member.id === dev)) {
      interaction.deferUpdate()
      interaction.channel.send(`${emoji.pen}${configm.description.text81}`).then(async (question) => {
        (interaction.channel).awaitMessages({
          filter: (m) => m.author.id === interaction.member.id,
          time: (500 * 60 * 100),
          max: 1
        }).then(async (collected) => {
          reply = collected.first().content;
          message = collected.first();
          interaction.channel.bulkDelete(1)
          question.delete()
          await delay(Number(1) * 1000)
          if (!(reply === "cancel")) {
            if ((!(((reply) || '').startsWith('<#' || '')))) {


              try {

                client.channels.cache.get(reply).send({ content: '**`' + interaction.user.tag + '`**' + " a configuré **`" + client.channels.cache.get(reply).name + "`** comme le salon d'arrivé des nouvelles publicités." })

                db.database.set(String('channel_verif'), (reply));
                db.database.set(String('channel_verif_simple'), '<#' + (reply) + '>');

                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color_good}`)
                  .setDescription(`${emoji.tick}${general.response.save_modifications}`)

                interaction.channel.send({
                  embeds: ([embed])
                }).then(async (response_save) => {
                  await delay(Number(3) * 1000)
                  response_save.delete()
                })

                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color}`)
                  .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
                  .setTitle(`${emoji.settings}${configm.title.text1}`)
                  .setDescription(`${emoji.chanel}${configm.description.text76}` + db.database.get(String('channel_verif_simple')) + '\n'
                    + `${emoji.database}${configm.description.text77}` + db.database.get(String('channel_logs_verif_simple')) + '\n'
                    + `${emoji.modo}${configm.description.text79}` + db.database.get(String('rank-accès_verif_simple')) + '\n'
                    + `${emoji.file}${configm.description.text80}\n\n 🔨 **| Sanctions:**\n - 5 Avertissements = Time Out 1 Jour\n - 10 Avertissements ou plus = Time Out 4 jourss`)

                interaction.message.edit({ embeds: ([embed]) })

                console.log(chalk.green("L'utilisateur " + interaction.user.tag + " a configuré le salon d'arrivé des nouvelles publicités " + client.channels.cache.get(reply).name + "."))

              } catch (err) {

                console.log(chalk.red(err + ' (SALON RENSEIGNE INTROUVABLE)'))

                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color_error}`)
                  .setDescription(`${emoji.wrong}${general.error.channel_notfound}`)

                interaction.channel.send({
                  embeds: ([embed])
                }).then(async (response_error) => {
                  await delay(Number(3) * 1000)
                  response_error.delete()

                })



              }

            } else {

              try {

                let change = reply.replace('<', '')
                let change1 = change.replace('#', '')
                let change2 = change1.replace('>', '')

                db.database.set(String('channel_verif'), change2)
                db.database.set(String('channel_verif_simple'), reply);

                client.channels.cache.get(change2).send({ content: '**`' + interaction.user.tag + '`**' + " a configuré **`" + client.channels.cache.get(change2).name + "`** comme le salon d'arrivé des nouvelles publicités." })

                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color_good}`)
                  .setDescription(`${emoji.tick}${general.response.save_modifications}`)

                interaction.channel.send({
                  embeds: ([embed])
                }).then(async (response_save) => {
                  await delay(Number(3) * 1000)
                  response_save.delete()
                })

                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color}`)
                  .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
                  .setTitle(`${emoji.settings}${configm.title.text1}`)
                  .setDescription(`${emoji.chanel}${configm.description.text76}` + db.database.get(String('channel_verif_simple')) + '\n'
                    + `${emoji.database}${configm.description.text77}` + db.database.get(String('channel_logs_verif_simple')) + '\n'
                    + `${emoji.modo}${configm.description.text79}` + db.database.get(String('rank-accès_verif_simple')) + '\n'
                    + `${emoji.file}${configm.description.text80}`)

                interaction.message.edit({ embeds: ([embed]) })

                console.log(chalk.green("L'utilisateur " + interaction.user.tag + " a configuré le salon d'arrivé des nouvelles publicités " + client.channels.cache.get(change2).name + "."))

              } catch (err) {

                console.log(chalk.red(err + ' (SALON RENSEIGNE INTROUVABLE)'))

                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color_error}`)
                  .setDescription(`${emoji.wrong}${general.error.channel_notfound}`)

                interaction.channel.send({
                  embeds: ([embed])
                }).then(async (response_error) => {
                  await delay(Number(3) * 1000)
                  response_error.delete()

                })



              }

            }
          } else {

            var embed = new EmbedBuilder()
              .setColor(`${config.color.color_error}`)
              .setDescription(`${emoji.wrong}${general.response.nosave_modif}`)
            interaction.channel.send({
              embeds: ([embed])
            }).then(async (response_nosave) => {
              await delay(Number(3) * 1000)
              response_nosave.delete()

            })
          }
        })
      })
    }
  }

  if (interaction.customId === "button_verif_channel_logs") {
    if (((interaction.member).permissions.has(PermissionsBitField.Flags.Administrator)) || (interaction.member.id === dev)) {
      interaction.deferUpdate()
      interaction.channel.send(`${emoji.pen}${configm.description.text82}`).then(async (question) => {
        (interaction.channel).awaitMessages({
          filter: (m) => m.author.id === interaction.member.id,
          time: (500 * 60 * 100),
          max: 1
        }).then(async (collected) => {
          reply = collected.first().content;
          message = collected.first();
          interaction.channel.bulkDelete(1)
          question.delete()
          await delay(Number(1) * 1000)
          if (!(reply === "cancel")) {
            if ((!(((reply) || '').startsWith('<#' || '')))) {


              try {

                client.channels.cache.get(reply).send({ content: '**`' + interaction.user.tag + '`**' + " a configuré **`" + client.channels.cache.get(reply).name + "`** comme le salon de logs des vérifications." })

                db.database.set(String('channel_logs_verif'), (reply));
                db.database.set(String('channel_logs_verif_simple'), '<#' + (reply) + '>');

                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color_good}`)
                  .setDescription(`${emoji.tick}${general.response.save_modifications}`)

                interaction.channel.send({
                  embeds: ([embed])
                }).then(async (response_save) => {
                  await delay(Number(3) * 1000)
                  response_save.delete()
                })

                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color}`)
                  .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
                  .setTitle(`${emoji.settings}${configm.title.text1}`)
                  .setDescription(`${emoji.chanel}${configm.description.text76}` + db.database.get(String('channel_verif_simple')) + '\n'
                    + `${emoji.database}${configm.description.text77}` + db.database.get(String('channel_logs_verif_simple')) + '\n'
                    + `${emoji.modo}${configm.description.text79}` + db.database.get(String('rank-accès_verif_simple')) + '\n'
                    + `${emoji.file}${configm.description.text80}\n\n 🔨 **| Sanctions:**\n - 5 Avertissements = Time Out 1 Jour\n - 10 Avertissements ou plus = Time Out 4 jourss`)

                interaction.message.edit({ embeds: ([embed]) })

                console.log(chalk.green("L'utilisateur " + interaction.user.tag + " a configuré comme le salon de logs des vérifications " + client.channels.cache.get(reply).name + "."))

              } catch (err) {

                console.log(chalk.red(err + ' (SALON RENSEIGNE INTROUVABLE)'))

                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color_error}`)
                  .setDescription(`${emoji.wrong}${general.error.channel_notfound}`)

                interaction.channel.send({
                  embeds: ([embed])
                }).then(async (response_error) => {
                  await delay(Number(3) * 1000)
                  response_error.delete()

                })



              }

            } else {

              try {

                let change = reply.replace('<', '')
                let change1 = change.replace('#', '')
                let change2 = change1.replace('>', '')

                db.database.set(String('channel_logs_verif'), change2)
                db.database.set(String('channel_logs_verif_simple'), reply);

                client.channels.cache.get(change2).send({ content: '**`' + interaction.user.tag + '`**' + " a configuré **`" + client.channels.cache.get(change2).name + "`** comme le salon de logs des vérifications." })

                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color_good}`)
                  .setDescription(`${emoji.tick}${general.response.save_modifications}`)

                interaction.channel.send({
                  embeds: ([embed])
                }).then(async (response_save) => {
                  await delay(Number(3) * 1000)
                  response_save.delete()
                })

                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color}`)
                  .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
                  .setTitle(`${emoji.settings}${configm.title.text1}`)
                  .setDescription(`${emoji.chanel}${configm.description.text76}` + db.database.get(String('channel_verif_simple')) + '\n'
                    + `${emoji.database}${configm.description.text77}` + db.database.get(String('channel_logs_verif_simple')) + '\n'
                    + `${emoji.modo}${configm.description.text79}` + db.database.get(String('rank-accès_verif_simple')) + '\n'
                    + `${emoji.file}${configm.description.text80}`)

                interaction.message.edit({ embeds: ([embed]) })

                console.log(chalk.green("L'utilisateur " + interaction.user.tag + " a configuré comme le salon de logs des vérifications " + client.channels.cache.get(change2).name + "."))

              } catch (err) {

                console.log(chalk.red(err + ' (SALON RENSEIGNE INTROUVABLE)'))

                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color_error}`)
                  .setDescription(`${emoji.wrong}${general.error.channel_notfound}`)

                interaction.channel.send({
                  embeds: ([embed])
                }).then(async (response_error) => {
                  await delay(Number(3) * 1000)
                  response_error.delete()

                })



              }

            }
          } else {

            var embed = new EmbedBuilder()
              .setColor(`${config.color.color_error}`)
              .setDescription(`${emoji.wrong}${general.response.nosave_modif}`)
            interaction.channel.send({
              embeds: ([embed])
            }).then(async (response_nosave) => {
              await delay(Number(3) * 1000)
              response_nosave.delete()

            })
          }
        })
      })
    }
  }

  if (interaction.customId === "button_verif_channel_sanction") {
    if (((interaction.member).permissions.has(PermissionsBitField.Flags.Administrator)) || (interaction.member.id === dev)) {
      interaction.deferUpdate()
      interaction.channel.send(`${emoji.pen}${configm.description.text83}`).then(async (question) => {
        (interaction.channel).awaitMessages({
          filter: (m) => m.author.id === interaction.member.id,
          time: (500 * 60 * 100),
          max: 1
        }).then(async (collected) => {
          reply = collected.first().content;
          message = collected.first();
          interaction.channel.bulkDelete(1)
          question.delete()
          await delay(Number(1) * 1000)
          if (!(reply === "cancel")) {
            if ((!(((reply) || '').startsWith('<#' || '')))) {


              try {

                client.channels.cache.get(reply).send({ content: '**`' + interaction.user.tag + '`**' + " a configuré **`" + client.channels.cache.get(reply).name + "`** comme le salon de sanctions." })

                db.database.set(String('channel_sanction_verif'), (reply));
                db.database.set(String('channel_sanction_verif_simple'), '<#' + (reply) + '>');

                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color_good}`)
                  .setDescription(`${emoji.tick}${general.response.save_modifications}`)

                interaction.channel.send({
                  embeds: ([embed])
                }).then(async (response_save) => {
                  await delay(Number(3) * 1000)
                  response_save.delete()
                })

                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color}`)
                  .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
                  .setTitle(`${emoji.settings}${configm.title.text1}`)
                  .setDescription(`${emoji.chanel}${configm.description.text76}` + db.database.get(String('channel_verif_simple')) + '\n'
                    + `${emoji.database}${configm.description.text77}` + db.database.get(String('channel_logs_verif_simple')) + '\n'
                    + `${emoji.modo}${configm.description.text79}` + db.database.get(String('rank-accès_verif_simple')) + '\n'
                    + `${emoji.file}${configm.description.text80}`)

                interaction.message.edit({ embeds: ([embed]) })

                console.log(chalk.green("L'utilisateur " + interaction.user.tag + " a configuré comme le salon de sanctions " + client.channels.cache.get(reply).name + "."))

              } catch (err) {

                console.log(chalk.red(err + ' (SALON RENSEIGNE INTROUVABLE)'))

                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color_error}`)
                  .setDescription(`${emoji.wrong}${general.error.channel_notfound}`)

                interaction.channel.send({
                  embeds: ([embed])
                }).then(async (response_error) => {
                  await delay(Number(3) * 1000)
                  response_error.delete()

                })



              }

            } else {

              try {

                let change = reply.replace('<', '')
                let change1 = change.replace('#', '')
                let change2 = change1.replace('>', '')

                db.database.set(String('channel_sanction_verif'), change2)
                db.database.set(String('channel_sanction_verif_simple'), reply);

                client.channels.cache.get(change2).send({ content: '**`' + interaction.user.tag + '`**' + " a configuré **`" + client.channels.cache.get(change2).name + "`** comme le salon de sanctions." })

                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color_good}`)
                  .setDescription(`${emoji.tick}${general.response.save_modifications}`)

                interaction.channel.send({
                  embeds: ([embed])
                }).then(async (response_save) => {
                  await delay(Number(3) * 1000)
                  response_save.delete()
                })

                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color}`)
                  .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
                  .setTitle(`${emoji.settings}${configm.title.text1}`)
                  .setDescription(`${emoji.chanel}${configm.description.text76}` + db.database.get(String('channel_verif_simple')) + '\n'
                    + `${emoji.database}${configm.description.text77}` + db.database.get(String('channel_logs_verif_simple')) + '\n'
                    + `${emoji.modo}${configm.description.text79}` + db.database.get(String('rank-accès_verif_simple')) + '\n'
                    + `${emoji.file}${configm.description.text80}`)

                interaction.message.edit({ embeds: ([embed]) })

                console.log(chalk.green("L'utilisateur " + interaction.user.tag + " a configuré comme le salon de sanctions " + client.channels.cache.get(change2).name + "."))

              } catch (err) {

                console.log(chalk.red(err + ' (SALON RENSEIGNE INTROUVABLE)'))

                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color_error}`)
                  .setDescription(`${emoji.wrong}${general.error.channel_notfound}`)

                interaction.channel.send({
                  embeds: ([embed])
                }).then(async (response_error) => {
                  await delay(Number(3) * 1000)
                  response_error.delete()

                })



              }

            }
          } else {

            var embed = new EmbedBuilder()
              .setColor(`${config.color.color_error}`)
              .setDescription(`${emoji.wrong}${general.response.nosave_modif}`)
            interaction.channel.send({
              embeds: ([embed])
            }).then(async (response_nosave) => {
              await delay(Number(3) * 1000)
              response_nosave.delete()

            })
          }
        })
      })
    }
  }


  if (interaction.customId === "button_verif_rank") {
    if (((interaction.member).permissions.has(PermissionsBitField.Flags.Administrator)) || (interaction.member.id === dev)) {
      interaction.deferUpdate()
      interaction.channel.send(`${emoji.pen}${configm.description.text84}`).then(async (question) => {
        (interaction.channel).awaitMessages({
          filter: (m) => m.author.id === interaction.member.id,
          time: (500 * 60 * 100),
          max: 1
        }).then(async (collected) => {
          reply = collected.first().content;
          message = collected.first();
          interaction.channel.bulkDelete(1)
          question.delete()
          await delay(Number(1) * 1000)
          if (!(reply === "cancel")) {
            if ((!(((reply) || '').startsWith('<@&' || '')))) {


              try {

                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color_good}`)
                  .setDescription(`${emoji.tick}${configm.description.text55}` + ((interaction.guild).roles.cache.get(reply)).name + `${configm.description.text57}`)

                interaction.channel.send({
                  embeds: ([embed])
                }).then(async (response_save) => {
                  await delay(Number(3) * 1000)
                  response_save.delete()
                })

                await db.database.set(String('rank-accès_verif'), (reply));
                await db.database.set(String('rank-accès_verif_simple'), '<@&' + (reply) + '>');

                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color}`)
                  .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
                  .setTitle(`${emoji.settings}${configm.title.text1}`)
                  .setDescription(`${emoji.chanel}${configm.description.text76}` + db.database.get(String('channel_verif_simple')) + '\n'
                    + `${emoji.database}${configm.description.text77}` + db.database.get(String('channel_logs_verif_simple')) + '\n'
                    + `${emoji.modo}${configm.description.text79}` + db.database.get(String('rank-accès_verif_simple')) + '\n'
                    + `${emoji.file}${configm.description.text80}\n\n 🔨 **| Sanctions:**\n - 5 Avertissements = Time Out 1 Jour\n - 10 Avertissements ou plus = Time Out 4 jourss`)

                await interaction.message.edit({ embeds: ([embed]) })

                console.log(chalk.green("L'utilisateur " + interaction.user.tag + " a configuré le rôle à ajouter aux utilisateur une fois le partenariat terminé " + ((interaction.guild).roles.cache.get(reply)).name + "."))

              } catch (err) {

                console.log(chalk.red(err + ' (SALON RENSEIGNE INTROUVABLE)'))

                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color_error}`)
                  .setDescription(`${emoji.wrong}${general.error.role_notfound}`)

                interaction.channel.send({
                  embeds: ([embed])
                }).then(async (response_error) => {
                  await delay(Number(3) * 1000)
                  response_error.delete()

                })



              }

            } else {

              try {

                let change = reply.replace('<', '')
                let change1 = change.replace('@', '')
                let change3 = change1.replace('&', '')
                let change2 = change3.replace('>', '')

                db.database.set(String('rank-accès_verif_add'), change2)
                db.database.set(String('rank-accès_verif_simple'), reply);

                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color_good}`)
                  .setDescription(`${emoji.tick}${configm.description.text55}` + ((interaction.guild).roles.cache.get(change2)).name + `${configm.description.text57}`)

                interaction.channel.send({
                  embeds: ([embed])
                }).then(async (response_save) => {
                  await delay(Number(3) * 1000)
                  response_save.delete()
                })


                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color}`)
                  .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
                  .setTitle(`${emoji.settings}${configm.title.text1}`)
                  .setDescription(`${emoji.chanel}${configm.description.text76}` + db.database.get(String('channel_verif_simple')) + '\n'
                    + `${emoji.database}${configm.description.text77}` + db.database.get(String('channel_logs_verif_simple')) + '\n'
                    + `${emoji.modo}${configm.description.text79}` + db.database.get(String('rank-accès_verif_simple')) + '\n'
                    + `${emoji.file}${configm.description.text80}`)

                interaction.message.edit({ embeds: ([embed]) })

                console.log(chalk.green("L'utilisateur " + interaction.user.tag + " a configuré le rôle à ajouter aux utilisateur une fois le partenariat terminé " + ((interaction.guild).roles.cache.get(change2)).name + "."))

              } catch (err) {

                console.log(chalk.red(err + ' (SALON RENSEIGNE INTROUVABLE)'))

                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color_error}`)
                  .setDescription(`${emoji.wrong}${general.error.role_notfound}`)

                interaction.channel.send({
                  embeds: ([embed])
                }).then(async (response_error) => {
                  await delay(Number(3) * 1000)
                  response_error.delete()

                })



              }
            }
          } else {

            var embed = new EmbedBuilder()
              .setColor(`${config.color.color_error}`)
              .setDescription(`${emoji.wrong}${general.response.nosave_modif}`)
            interaction.channel.send({
              embeds: ([embed])
            }).then(async (response_nosave) => {
              await delay(Number(3) * 1000)
              response_nosave.delete()

            })
          }
        })
      })
    }
  }

  if (interaction.customId === "button_verif_embed") {
    if (db.module.get(String('verification')) === "on") {
      if (((interaction.member).permissions.has(PermissionsBitField.Flags.Administrator)) || (interaction.member.id === dev)) {

        if ((db.database.get(String("image_embed"))).includes("http")) {

          var embed = new EmbedBuilder()
            .setColor(db.database.get(String("color_embed")))
            .setTitle(db.database.get(String("title_embed")))
            .setDescription(db.database.get(String("description_embed")))
            .setImage(db.database.get(String("image_embed")))

        } else {

          var embed = new EmbedBuilder()
            .setColor(db.database.get(String("color_embed")))
            .setTitle(db.database.get(String("title_embed")))
            .setDescription(db.database.get(String("description_embed")))

        }

        const button_verif_embed_title = new ButtonBuilder()
          .setEmoji(`${emoji.list}`)
          .setLabel("Titre")
          .setStyle(ButtonStyle.Danger)
          .setCustomId("button_verif_embed_title")

        const button_verif_embed_description = new ButtonBuilder()
          .setEmoji(`${emoji.pen}`)
          .setLabel('Description')
          .setStyle(ButtonStyle.Secondary)
          .setCustomId("button_verif_embed_description")

        const button_verif_embed_image = new ButtonBuilder()
          .setEmoji(`${emoji.welcome}`)
          .setLabel("Image")
          .setStyle(ButtonStyle.Primary)
          .setCustomId("button_verif_embed_image")

        const button_verif_embed_color = new ButtonBuilder()
          .setEmoji(`${emoji.color}`)
          .setLabel("Couleur")
          .setStyle(ButtonStyle.Success)
          .setCustomId("button_verif_embed_color")

        const button_verif_embed_return = new ButtonBuilder()
          .setEmoji(`${emoji.return}`)
          .setStyle(ButtonStyle.Primary)
          .setCustomId("button_verif_embed_return")

        const menu_embed_verif = new ActionRowBuilder()
          .addComponents(button_verif_embed_title)
          .addComponents(button_verif_embed_description)
          .addComponents(button_verif_embed_image)
          .addComponents(button_verif_embed_color)

        const menu_embed_verif1 = new ActionRowBuilder()
          .addComponents(button_verif_embed_return)

        interaction.message.edit({ embeds: ([embed]), components: [menu_embed_verif, menu_embed_verif1] })

        interaction.deferUpdate()

      }
    }
  }


  if (interaction.customId === "button_verif_embed_title") {
    if ((interaction.member.permissions.has(PermissionsBitField.Flags.Administrator)) || (interaction.member.id === dev)) {
      interaction.deferUpdate()
      interaction.channel.send(`${emoji.pen}${configm.description.text108}`).then(async (question) => {
        (interaction.channel).awaitMessages({
          filter: (m) => m.author.id === interaction.member.id,
          time: (1500 * 60 * 100),
          max: 1
        }).then(async (collected) => {
          reply = collected.first().content;
          message = collected.first();
          interaction.channel.bulkDelete(1)
          question.delete()
          await delay(Number(1) * 1000)
          if (!(reply === "cancel")) {

            db.database.set(String('title_embed'), reply)

            var embed = new EmbedBuilder()
              .setColor(`${config.color.color_good}`)
              .setDescription(`${emoji.tick}${general.response.save_modifications}`)

            interaction.channel.send({
              embeds: ([embed])
            }).then(async (response_save) => {
              await delay(Number(3) * 1000)
              response_save.delete()
            })


            if ((db.database.get(String("image_embed"))).includes("http")) {

              var embed = new EmbedBuilder()
                .setColor(db.database.get(String("color_embed")))
                .setTitle(db.database.get(String("title_embed")))
                .setDescription(db.database.get(String("description_embed")))
                .setImage(db.database.get(String("image_embed")))

            } else {

              var embed = new EmbedBuilder()
                .setColor(db.database.get(String("color_embed")))
                .setTitle(db.database.get(String("title_embed")))
                .setDescription(db.database.get(String("description_embed")))

            }

            interaction.message.edit({ embeds: ([embed]) })

          }
        })
      })
    }
  }

  if (interaction.customId === "button_verif_color_red") {
    if ((interaction.member.permissions.has(PermissionsBitField.Flags.Administrator)) || (interaction.member.id === dev)) {

      db.database.set(String("color_embed"), "#d83c3e")

      if ((db.database.get(String("image_embed"))).includes("http")) {

        var embed = new EmbedBuilder()
          .setColor(db.database.get(String("color_embed")))
          .setTitle(db.database.get(String("title_embed")))
          .setDescription(db.database.get(String("description_embed")))
          .setImage(db.database.get(String("image_embed")))

      } else {

        var embed = new EmbedBuilder()
          .setColor(db.database.get(String("color_embed")))
          .setTitle(db.database.get(String("title_embed")))
          .setDescription(db.database.get(String("description_embed")))

      }

      const button_verif_embed_title = new ButtonBuilder()
        .setEmoji(`${emoji.list}`)
        .setLabel("Titre")
        .setStyle(ButtonStyle.Danger)
        .setCustomId("button_verif_embed_title")

      const button_verif_embed_description = new ButtonBuilder()
        .setEmoji(`${emoji.pen}`)
        .setLabel('Description')
        .setStyle(ButtonStyle.Secondary)
        .setCustomId("button_verif_embed_description")

      const button_verif_embed_image = new ButtonBuilder()
        .setEmoji(`${emoji.welcome}`)
        .setLabel("Image")
        .setStyle(ButtonStyle.Primary)
        .setCustomId("button_verif_embed_image")

      const button_verif_embed_color = new ButtonBuilder()
        .setEmoji(`${emoji.color}`)
        .setLabel("Couleur")
        .setStyle(ButtonStyle.Success)
        .setCustomId("button_verif_embed_color")

      const button_verif_embed_return = new ButtonBuilder()
        .setEmoji(`${emoji.return}`)
        .setStyle(ButtonStyle.Primary)
        .setCustomId("button_verif_embed_return")

      const menu_embed_verif = new ActionRowBuilder()
        .addComponents(button_verif_embed_title)
        .addComponents(button_verif_embed_description)
        .addComponents(button_verif_embed_image)
        .addComponents(button_verif_embed_color)

      const menu_embed_verif1 = new ActionRowBuilder()
        .addComponents(button_verif_embed_return)

      interaction.message.edit({ embeds: ([embed]), components: [menu_embed_verif, menu_embed_verif1] })

      interaction.deferUpdate()

    }
  }

  if (interaction.customId === "button_verif_color_gray") {
    if ((interaction.member.permissions.has(PermissionsBitField.Flags.Administrator)) || (interaction.member.id === dev)) {

      db.database.set(String("color_embed"), "#2f3136")

      if ((db.database.get(String("image_embed"))).includes("http")) {

        var embed = new EmbedBuilder()
          .setColor(db.database.get(String("color_embed")))
          .setTitle(db.database.get(String("title_embed")))
          .setDescription(db.database.get(String("description_embed")))
          .setImage(db.database.get(String("image_embed")))

      } else {

        var embed = new EmbedBuilder()
          .setColor(db.database.get(String("color_embed")))
          .setTitle(db.database.get(String("title_embed")))
          .setDescription(db.database.get(String("description_embed")))

      }

      const button_verif_embed_title = new ButtonBuilder()
        .setEmoji(`${emoji.list}`)
        .setLabel("Titre")
        .setStyle(ButtonStyle.Danger)
        .setCustomId("button_verif_embed_title")

      const button_verif_embed_description = new ButtonBuilder()
        .setEmoji(`${emoji.pen}`)
        .setLabel('Description')
        .setStyle(ButtonStyle.Secondary)
        .setCustomId("button_verif_embed_description")

      const button_verif_embed_image = new ButtonBuilder()
        .setEmoji(`${emoji.welcome}`)
        .setLabel("Image")
        .setStyle(ButtonStyle.Primary)
        .setCustomId("button_verif_embed_image")

      const button_verif_embed_color = new ButtonBuilder()
        .setEmoji(`${emoji.color}`)
        .setLabel("Couleur")
        .setStyle(ButtonStyle.Success)
        .setCustomId("button_verif_embed_color")

      const button_verif_embed_return = new ButtonBuilder()
        .setEmoji(`${emoji.return}`)
        .setStyle(ButtonStyle.Primary)
        .setCustomId("button_verif_embed_return")

      const menu_embed_verif = new ActionRowBuilder()
        .addComponents(button_verif_embed_title)
        .addComponents(button_verif_embed_description)
        .addComponents(button_verif_embed_image)
        .addComponents(button_verif_embed_color)

      const menu_embed_verif1 = new ActionRowBuilder()
        .addComponents(button_verif_embed_return)

      interaction.message.edit({ embeds: ([embed]), components: [menu_embed_verif, menu_embed_verif1] })

      interaction.deferUpdate()

    }
  }

  if (interaction.customId === "button_verif_color_green") {
    if ((interaction.member.permissions.has(PermissionsBitField.Flags.Administrator)) || (interaction.member.id === dev)) {

      db.database.set(String("color_embed"), "#2d7d46")

      if ((db.database.get(String("image_embed"))).includes("http")) {

        var embed = new EmbedBuilder()
          .setColor(db.database.get(String("color_embed")))
          .setTitle(db.database.get(String("title_embed")))
          .setDescription(db.database.get(String("description_embed")))
          .setImage(db.database.get(String("image_embed")))

      } else {

        var embed = new EmbedBuilder()
          .setColor(db.database.get(String("color_embed")))
          .setTitle(db.database.get(String("title_embed")))
          .setDescription(db.database.get(String("description_embed")))

      }

      const button_verif_embed_title = new ButtonBuilder()
        .setEmoji(`${emoji.list}`)
        .setLabel("Titre")
        .setStyle(ButtonStyle.Danger)
        .setCustomId("button_verif_embed_title")

      const button_verif_embed_description = new ButtonBuilder()
        .setEmoji(`${emoji.pen}`)
        .setLabel('Description')
        .setStyle(ButtonStyle.Secondary)
        .setCustomId("button_verif_embed_description")

      const button_verif_embed_image = new ButtonBuilder()
        .setEmoji(`${emoji.welcome}`)
        .setLabel("Image")
        .setStyle(ButtonStyle.Primary)
        .setCustomId("button_verif_embed_image")

      const button_verif_embed_color = new ButtonBuilder()
        .setEmoji(`${emoji.color}`)
        .setLabel("Couleur")
        .setStyle(ButtonStyle.Success)
        .setCustomId("button_verif_embed_color")

      const button_verif_embed_return = new ButtonBuilder()
        .setEmoji(`${emoji.return}`)
        .setStyle(ButtonStyle.Primary)
        .setCustomId("button_verif_embed_return")

      const menu_embed_verif = new ActionRowBuilder()
        .addComponents(button_verif_embed_title)
        .addComponents(button_verif_embed_description)
        .addComponents(button_verif_embed_image)
        .addComponents(button_verif_embed_color)

      const menu_embed_verif1 = new ActionRowBuilder()
        .addComponents(button_verif_embed_return)

      interaction.message.edit({ embeds: ([embed]), components: [menu_embed_verif, menu_embed_verif1] })

      interaction.deferUpdate()

    }
  }

  if (interaction.customId === "button_verif_color_blue") {
    if ((interaction.member.permissions.has(PermissionsBitField.Flags.Administrator)) || (interaction.member.id === dev)) {

      db.database.set(String("color_embed"), "#5865f2")

      if ((db.database.get(String("image_embed"))).includes("http")) {

        var embed = new EmbedBuilder()
          .setColor(db.database.get(String("color_embed")))
          .setTitle(db.database.get(String("title_embed")))
          .setDescription(db.database.get(String("description_embed")))
          .setImage(db.database.get(String("image_embed")))

      } else {

        var embed = new EmbedBuilder()
          .setColor(db.database.get(String("color_embed")))
          .setTitle(db.database.get(String("title_embed")))
          .setDescription(db.database.get(String("description_embed")))

      }

      const button_verif_embed_title = new ButtonBuilder()
        .setEmoji(`${emoji.list}`)
        .setLabel("Titre")
        .setStyle(ButtonStyle.Danger)
        .setCustomId("button_verif_embed_title")

      const button_verif_embed_description = new ButtonBuilder()
        .setEmoji(`${emoji.pen}`)
        .setLabel('Description')
        .setStyle(ButtonStyle.Secondary)
        .setCustomId("button_verif_embed_description")

      const button_verif_embed_image = new ButtonBuilder()
        .setEmoji(`${emoji.welcome}`)
        .setLabel("Image")
        .setStyle(ButtonStyle.Primary)
        .setCustomId("button_verif_embed_image")

      const button_verif_embed_color = new ButtonBuilder()
        .setEmoji(`${emoji.color}`)
        .setLabel("Couleur")
        .setStyle(ButtonStyle.Success)
        .setCustomId("button_verif_embed_color")

      const button_verif_embed_return = new ButtonBuilder()
        .setEmoji(`${emoji.return}`)
        .setStyle(ButtonStyle.Primary)
        .setCustomId("button_verif_embed_return")

      const menu_embed_verif = new ActionRowBuilder()
        .addComponents(button_verif_embed_title)
        .addComponents(button_verif_embed_description)
        .addComponents(button_verif_embed_image)
        .addComponents(button_verif_embed_color)

      const menu_embed_verif1 = new ActionRowBuilder()
        .addComponents(button_verif_embed_return)

      interaction.message.edit({ embeds: ([embed]), components: [menu_embed_verif, menu_embed_verif1] })

      interaction.deferUpdate()

    }
  }

  if (interaction.customId === "button_verif_embed_color") {
    if ((interaction.member.permissions.has(PermissionsBitField.Flags.Administrator)) || (interaction.member.id === dev)) {

      if ((db.database.get(String("image_embed"))).includes("http")) {

        var embed = new EmbedBuilder()
          .setColor(db.database.get(String("color_embed")))
          .setTitle(db.database.get(String("title_embed")))
          .setDescription(db.database.get(String("description_embed")))
          .setImage(db.database.get(String("image_embed")))

      } else {

        var embed = new EmbedBuilder()
          .setColor(db.database.get(String("color_embed")))
          .setTitle(db.database.get(String("title_embed")))
          .setDescription(db.database.get(String("description_embed")))

      }

      const button_verif_color_red = new ButtonBuilder()
        .setStyle(ButtonStyle.Danger)
        .setLabel(" ")
        .setCustomId("button_verif_color_red")

      const button_verif_color_blue = new ButtonBuilder()
        .setStyle(ButtonStyle.Primary)
        .setLabel(" ")
        .setCustomId("button_verif_color_blue")

      const button_verif_color_green = new ButtonBuilder()
        .setStyle(ButtonStyle.Success)
        .setLabel(" ")
        .setCustomId("button_verif_color_green")

      const button_verif_color_gray = new ButtonBuilder()
        .setStyle(ButtonStyle.Secondary)
        .setLabel(" ")
        .setCustomId("button_verif_color_gray")

      const menu_verif_color = new ActionRowBuilder()
        .addComponents(button_verif_color_red)
        .addComponents(button_verif_color_blue)
        .addComponents(button_verif_color_green)
        .addComponents(button_verif_color_gray)

      interaction.message.edit({ embeds: ([embed]), components: [menu_verif_color] })

      interaction.deferUpdate()

    }
  }

  if (interaction.customId === "button_verif_embed_image") {
    if ((interaction.member.permissions.has(PermissionsBitField.Flags.Administrator)) || (interaction.member.id === dev)) {
      interaction.deferUpdate()
      interaction.channel.send(`${emoji.pen}${configm.description.text110}`).then(async (question) => {
        (interaction.channel).awaitMessages({
          filter: (m) => m.author.id === interaction.member.id,
          time: (1500 * 60 * 100),
          max: 1
        }).then(async (collected) => {
          reply = collected.first().content;
          message = collected.first();
          interaction.channel.bulkDelete(1)
          question.delete()
          await delay(Number(1) * 1000)
          if (!(reply === "cancel")) {

            db.database.set(String('image_embed'), reply)

            var embed = new EmbedBuilder()
              .setColor(`${config.color.color_good}`)
              .setDescription(`${emoji.tick}${general.response.save_modifications}`)

            interaction.channel.send({
              embeds: ([embed])
            }).then(async (response_save) => {
              await delay(Number(3) * 1000)
              response_save.delete()
            })


            if ((db.database.get(String("image_embed"))).includes("http")) {

              var embed = new EmbedBuilder()
                .setColor(db.database.get(String("color_embed")))
                .setTitle(db.database.get(String("title_embed")))
                .setDescription(db.database.get(String("description_embed")))
                .setImage(db.database.get(String("image_embed")))

            } else {

              var embed = new EmbedBuilder()
                .setColor(db.database.get(String("color_embed")))
                .setTitle(db.database.get(String("title_embed")))
                .setDescription(db.database.get(String("description_embed")))

            }

            interaction.message.edit({ embeds: ([embed]) })

          }
        })
      })
    }
  }

  if (interaction.customId === "button_verif_embed_description") {
    if ((interaction.member.permissions.has(PermissionsBitField.Flags.Administrator)) || (interaction.member.id === dev)) {
      interaction.deferUpdate()
      interaction.channel.send(`${emoji.pen}${configm.description.text109}`).then(async (question) => {
        (interaction.channel).awaitMessages({
          filter: (m) => m.author.id === interaction.member.id,
          time: (1500 * 60 * 100),
          max: 1
        }).then(async (collected) => {
          reply = collected.first().content;
          message = collected.first();
          interaction.channel.bulkDelete(1)
          question.delete()
          await delay(Number(1) * 1000)
          if (!(reply === "cancel")) {

            db.database.set(String('description_embed'), reply)

            var embed = new EmbedBuilder()
              .setColor(`${config.color.color_good}`)
              .setDescription(`${emoji.tick}${general.response.save_modifications}`)

            interaction.channel.send({
              embeds: ([embed])
            }).then(async (response_save) => {
              await delay(Number(3) * 1000)
              response_save.delete()
            })


            if ((db.database.get(String("image_embed"))).includes("http")) {

              var embed = new EmbedBuilder()
                .setColor(db.database.get(String("color_embed")))
                .setTitle(db.database.get(String("title_embed")))
                .setDescription(db.database.get(String("description_embed")))
                .setImage(db.database.get(String("image_embed")))

            } else {

              var embed = new EmbedBuilder()
                .setColor(db.database.get(String("color_embed")))
                .setTitle(db.database.get(String("title_embed")))
                .setDescription(db.database.get(String("description_embed")))

            }

            interaction.message.edit({ embeds: ([embed]) })

          }
        })
      })
    }
  }



  if (interaction.customId === "button_verif_embed_return") {
    if (((interaction.member).permissions.has(PermissionsBitField.Flags.Administrator)) || (interaction.member.id === dev)) {

      var embed = new EmbedBuilder()
        .setColor(`${config.color.color}`)
        .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
        .setTitle(`${emoji.settings}${configm.title.text1}`)
        .setDescription(`${emoji.chanel}${configm.description.text76}` + db.database.get(String('channel_verif_simple')) + '\n'
          + `${emoji.database}${configm.description.text77}` + db.database.get(String('channel_logs_verif_simple')) + '\n'
          + `${emoji.modo}${configm.description.text79}` + db.database.get(String('rank-accès_verif_simple')) + '\n'
          + `${emoji.file}${configm.description.text80}\n\n 🔨 **| Sanctions:**\n - 5 Avertissements = Time Out 1 Jour\n - 10 Avertissements ou plus = Time Out 4 jourss`)

      const button_verif_channel = new ButtonBuilder()
        .setStyle(ButtonStyle.Secondary)
        .setEmoji(`${emoji.chanel}`)
        .setCustomId("button_verif_channel")

      const button_verif_channel_logs = new ButtonBuilder()
        .setStyle(ButtonStyle.Secondary)
        .setEmoji(`${emoji.database}`)
        .setCustomId("button_verif_channel_logs")

      const button_verif_channel_sanction = new ButtonBuilder()
        .setStyle(ButtonStyle.Secondary)
        .setEmoji(`${emoji.banned}`)
        .setCustomId("button_verif_channel_sanction")

      const button_verif_rank = new ButtonBuilder()
        .setStyle(ButtonStyle.Secondary)
        .setEmoji(`${emoji.modo}`)
        .setCustomId("button_verif_rank")

      const button_verif_embed = new ButtonBuilder()
        .setStyle(ButtonStyle.Secondary)
        .setEmoji(`${emoji.file}`)
        .setCustomId("button_verif_embed")

      const button_config_retour = new ButtonBuilder()
        .setCustomId('buton_config_retour')
        .setStyle(ButtonStyle.Primary)
        .setEmoji(`${emoji.return}`)

      const menu_config_verif = new ActionRowBuilder()
        .addComponents(button_verif_channel)
        .addComponents(button_verif_channel_logs)
        .addComponents(button_verif_channel_sanction)
        .addComponents(button_verif_rank)
        .addComponents(button_verif_embed)

      const menu_config_verif2 = new ActionRowBuilder()
        .addComponents(button_config_retour)

      interaction.message.edit({ embeds: ([embed]), components: [menu_config_verif, menu_config_verif2] })

      interaction.deferUpdate()

    }
  }

  if (interaction.customId === "button_gp_1") {
    if (((interaction.member).permissions.has(PermissionsBitField.Flags.Administrator)) || (interaction.member.id === dev)) {
      if ((db.database.get(String('channel_gp1'))) === "*`Non défini`*") {
        interaction.deferUpdate()
        interaction.channel.send(`${emoji.pen}${configm.description.text121}`).then(async (question) => {
          (interaction.channel).awaitMessages({
            filter: (m) => m.author.id === interaction.member.id,
            time: (500 * 60 * 100),
            max: 1
          }).then(async (collected) => {
            reply = collected.first().content;
            message = collected.first();
            interaction.channel.bulkDelete(1)
            question.delete()
            await delay(Number(1) * 1000)
            if (!(reply === "cancel")) {
              if ((!(((reply) || '').startsWith('<#' || '')))) {


                try {

                  client.channels.cache.get(reply).send({ content: '**`' + interaction.user.tag + '`**' + " a configuré **`" + client.channels.cache.get(reply).name + "`** comme le salon de ghostping numéro 1." })

                  db.database.set(String('channel_gp1'), (reply));
                  db.database.set(String('channel_gp1_simple'), '<#' + (reply) + '>');

                  var embed = new EmbedBuilder()
                    .setColor(`${config.color.color_good}`)
                    .setDescription(`${emoji.tick}${general.response.save_modifications}`)

                  interaction.channel.send({
                    embeds: ([embed])
                  }).then(async (response_save) => {
                    await delay(Number(3) * 1000)
                    response_save.delete()
                  })

                  var embed = new EmbedBuilder()
                    .setColor(`${config.color.color}`)
                    .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
                    .setTitle(`${emoji.settings}${configm.title.text1}`)
                    .setDescription(`${emoji.chanel}${configm.description.text111}` + db.database.get(String('channel_gp1_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text112}` + db.database.get(String('channel_gp2_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text113}` + db.database.get(String('channel_gp3_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text114}` + db.database.get(String('channel_gp4_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text115}` + db.database.get(String('channel_gp5_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text116}` + db.database.get(String('channel_gp6_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text117}` + db.database.get(String('channel_gp7_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text118}` + db.database.get(String('channel_gp8_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text119}` + db.database.get(String('channel_gp9_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text120}` + db.database.get(String('channel_gp10_simple')) + '\n'
                    )

                  interaction.message.edit({ embeds: ([embed]) })

                  console.log(chalk.green("L'utilisateur " + interaction.user.tag + " a configuré le salon de ghostping 1 sur le salon " + client.channels.cache.get(reply).name + "."))

                } catch (err) {

                  console.log(chalk.red(err + ' (SALON RENSEIGNE INTROUVABLE)'))

                  var embed = new EmbedBuilder()
                    .setColor(`${config.color.color_error}`)
                    .setDescription(`${emoji.wrong}${general.error.channel_notfound}`)

                  interaction.channel.send({
                    embeds: ([embed])
                  }).then(async (response_error) => {
                    await delay(Number(3) * 1000)
                    response_error.delete()

                  })



                }

              } else {

                try {

                  let change = reply.replace('<', '')
                  let change1 = change.replace('#', '')
                  let change2 = change1.replace('>', '')

                  db.database.set(String('channel_gp1'), change2)
                  db.database.set(String('channel_gp1_simple'), reply);

                  client.channels.cache.get(change2).send({ content: '**`' + interaction.user.tag + '`**' + " a configuré **`" + client.channels.cache.get(change2).name + "`** comme le salon de ghostping numéro 1." })

                  var embed = new EmbedBuilder()
                    .setColor(`${config.color.color_good}`)
                    .setDescription(`${emoji.tick}${general.response.save_modifications}`)

                  interaction.channel.send({
                    embeds: ([embed])
                  }).then(async (response_save) => {
                    await delay(Number(3) * 1000)
                    response_save.delete()
                  })

                  var embed = new EmbedBuilder()
                    .setColor(`${config.color.color}`)
                    .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
                    .setTitle(`${emoji.settings}${configm.title.text1}`)
                    .setDescription(`${emoji.chanel}${configm.description.text111}` + db.database.get(String('channel_gp1_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text112}` + db.database.get(String('channel_gp2_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text113}` + db.database.get(String('channel_gp3_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text114}` + db.database.get(String('channel_gp4_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text115}` + db.database.get(String('channel_gp5_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text116}` + db.database.get(String('channel_gp6_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text117}` + db.database.get(String('channel_gp7_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text118}` + db.database.get(String('channel_gp8_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text119}` + db.database.get(String('channel_gp9_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text120}` + db.database.get(String('channel_gp10_simple')) + '\n'
                    )

                  interaction.message.edit({ embeds: ([embed]) })

                  console.log(chalk.green("L'utilisateur " + interaction.user.tag + " a configuré le salon de ghostping 1 sur le salon " + client.channels.cache.get(change2).name + "."))

                } catch (err) {

                  console.log(chalk.red(err + ' (SALON RENSEIGNE INTROUVABLE)'))

                  var embed = new EmbedBuilder()
                    .setColor(`${config.color.color_error}`)
                    .setDescription(`${emoji.wrong}${general.error.channel_notfound}`)

                  interaction.channel.send({
                    embeds: ([embed])
                  }).then(async (response_error) => {
                    await delay(Number(3) * 1000)
                    response_error.delete()

                  })



                }

              }
            } else {

              var embed = new EmbedBuilder()
                .setColor(`${config.color.color_error}`)
                .setDescription(`${emoji.wrong}${general.response.nosave_modif}`)
              interaction.channel.send({
                embeds: ([embed])
              }).then(async (response_nosave) => {
                await delay(Number(3) * 1000)
                response_nosave.delete()

              })
            }
          })
        })
      } else {

        db.database.set(String('channel_gp1'), "*`Non défini`*")
        db.database.set(String('channel_gp1_simple'), "*`Non défini`*")

        var embed = new EmbedBuilder()
          .setColor(`${config.color.color}`)
          .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
          .setTitle(`${emoji.settings}${configm.title.text1}`)
          .setDescription(`${emoji.chanel}${configm.description.text111}` + db.database.get(String('channel_gp1_simple')) + '\n'
            + `${emoji.chanel}${configm.description.text112}` + db.database.get(String('channel_gp2_simple')) + '\n'
            + `${emoji.chanel}${configm.description.text113}` + db.database.get(String('channel_gp3_simple')) + '\n'
            + `${emoji.chanel}${configm.description.text114}` + db.database.get(String('channel_gp4_simple')) + '\n'
            + `${emoji.chanel}${configm.description.text115}` + db.database.get(String('channel_gp5_simple')) + '\n'
            + `${emoji.chanel}${configm.description.text116}` + db.database.get(String('channel_gp6_simple')) + '\n'
            + `${emoji.chanel}${configm.description.text117}` + db.database.get(String('channel_gp7_simple')) + '\n'
            + `${emoji.chanel}${configm.description.text118}` + db.database.get(String('channel_gp8_simple')) + '\n'
            + `${emoji.chanel}${configm.description.text119}` + db.database.get(String('channel_gp9_simple')) + '\n'
            + `${emoji.chanel}${configm.description.text120}` + db.database.get(String('channel_gp10_simple')) + '\n'
          )

        interaction.message.edit({ embeds: ([embed]) })

        await interaction.deferUpdate()
      }
    }
  }

  if (interaction.customId === "button_gp_2") {
    if (((interaction.member).permissions.has(PermissionsBitField.Flags.Administrator)) || (interaction.member.id === dev)) {
      if ((db.database.get(String('channel_gp2'))) === "*`Non défini`*") {
        interaction.deferUpdate()
        interaction.channel.send(`${emoji.pen}${configm.description.text121}`).then(async (question) => {
          (interaction.channel).awaitMessages({
            filter: (m) => m.author.id === interaction.member.id,
            time: (500 * 60 * 100),
            max: 1
          }).then(async (collected) => {
            reply = collected.first().content;
            message = collected.first();
            interaction.channel.bulkDelete(1)
            question.delete()
            await delay(Number(1) * 1000)
            if (!(reply === "cancel")) {
              if ((!(((reply) || '').startsWith('<#' || '')))) {


                try {

                  client.channels.cache.get(reply).send({ content: '**`' + interaction.user.tag + '`**' + " a configuré **`" + client.channels.cache.get(reply).name + "`** comme le salon de ghostping numéro 2." })

                  db.database.set(String('channel_gp2'), (reply));
                  db.database.set(String('channel_gp2_simple'), '<#' + (reply) + '>');

                  var embed = new EmbedBuilder()
                    .setColor(`${config.color.color_good}`)
                    .setDescription(`${emoji.tick}${general.response.save_modifications}`)

                  interaction.channel.send({
                    embeds: ([embed])
                  }).then(async (response_save) => {
                    await delay(Number(3) * 1000)
                    response_save.delete()
                  })

                  var embed = new EmbedBuilder()
                    .setColor(`${config.color.color}`)
                    .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
                    .setTitle(`${emoji.settings}${configm.title.text1}`)
                    .setDescription(`${emoji.chanel}${configm.description.text111}` + db.database.get(String('channel_gp1_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text112}` + db.database.get(String('channel_gp2_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text113}` + db.database.get(String('channel_gp3_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text114}` + db.database.get(String('channel_gp4_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text115}` + db.database.get(String('channel_gp5_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text116}` + db.database.get(String('channel_gp6_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text117}` + db.database.get(String('channel_gp7_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text118}` + db.database.get(String('channel_gp8_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text119}` + db.database.get(String('channel_gp9_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text120}` + db.database.get(String('channel_gp10_simple')) + '\n'
                    )

                  interaction.message.edit({ embeds: ([embed]) })

                  console.log(chalk.green("L'utilisateur " + interaction.user.tag + " a configuré le salon de ghostping 2 sur le salon " + client.channels.cache.get(reply).name + "."))

                } catch (err) {

                  console.log(chalk.red(err + ' (SALON RENSEIGNE INTROUVABLE)'))

                  var embed = new EmbedBuilder()
                    .setColor(`${config.color.color_error}`)
                    .setDescription(`${emoji.wrong}${general.error.channel_notfound}`)

                  interaction.channel.send({
                    embeds: ([embed])
                  }).then(async (response_error) => {
                    await delay(Number(3) * 1000)
                    response_error.delete()

                  })



                }

              } else {

                try {

                  let change = reply.replace('<', '')
                  let change1 = change.replace('#', '')
                  let change2 = change1.replace('>', '')

                  db.database.set(String('channel_gp2'), change2)
                  db.database.set(String('channel_gp2_simple'), reply);

                  client.channels.cache.get(change2).send({ content: '**`' + interaction.user.tag + '`**' + " a configuré **`" + client.channels.cache.get(change2).name + "`** comme le salon de ghostping numéro 2." })

                  var embed = new EmbedBuilder()
                    .setColor(`${config.color.color_good}`)
                    .setDescription(`${emoji.tick}${general.response.save_modifications}`)

                  interaction.channel.send({
                    embeds: ([embed])
                  }).then(async (response_save) => {
                    await delay(Number(3) * 1000)
                    response_save.delete()
                  })

                  var embed = new EmbedBuilder()
                    .setColor(`${config.color.color}`)
                    .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
                    .setTitle(`${emoji.settings}${configm.title.text1}`)
                    .setDescription(`${emoji.chanel}${configm.description.text111}` + db.database.get(String('channel_gp1_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text112}` + db.database.get(String('channel_gp2_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text113}` + db.database.get(String('channel_gp3_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text114}` + db.database.get(String('channel_gp4_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text115}` + db.database.get(String('channel_gp5_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text116}` + db.database.get(String('channel_gp6_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text117}` + db.database.get(String('channel_gp7_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text118}` + db.database.get(String('channel_gp8_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text119}` + db.database.get(String('channel_gp9_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text120}` + db.database.get(String('channel_gp10_simple')) + '\n'
                    )

                  interaction.message.edit({ embeds: ([embed]) })

                  console.log(chalk.green("L'utilisateur " + interaction.user.tag + " a configuré le salon de ghostping 1 sur le salon " + client.channels.cache.get(change2).name + "."))

                } catch (err) {

                  console.log(chalk.red(err + ' (SALON RENSEIGNE INTROUVABLE)'))

                  var embed = new EmbedBuilder()
                    .setColor(`${config.color.color_error}`)
                    .setDescription(`${emoji.wrong}${general.error.channel_notfound}`)

                  interaction.channel.send({
                    embeds: ([embed])
                  }).then(async (response_error) => {
                    await delay(Number(3) * 1000)
                    response_error.delete()

                  })



                }

              }
            } else {

              var embed = new EmbedBuilder()
                .setColor(`${config.color.color_error}`)
                .setDescription(`${emoji.wrong}${general.response.nosave_modif}`)
              interaction.channel.send({
                embeds: ([embed])
              }).then(async (response_nosave) => {
                await delay(Number(3) * 1000)
                response_nosave.delete()

              })
            }
          })
        })
      } else {

        db.database.set(String('channel_gp2'), "*`Non défini`*")
        db.database.set(String('channel_gp2_simple'), "*`Non défini`*")

        var embed = new EmbedBuilder()
          .setColor(`${config.color.color}`)
          .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
          .setTitle(`${emoji.settings}${configm.title.text1}`)
          .setDescription(`${emoji.chanel}${configm.description.text111}` + db.database.get(String('channel_gp1_simple')) + '\n'
            + `${emoji.chanel}${configm.description.text112}` + db.database.get(String('channel_gp2_simple')) + '\n'
            + `${emoji.chanel}${configm.description.text113}` + db.database.get(String('channel_gp3_simple')) + '\n'
            + `${emoji.chanel}${configm.description.text114}` + db.database.get(String('channel_gp4_simple')) + '\n'
            + `${emoji.chanel}${configm.description.text115}` + db.database.get(String('channel_gp5_simple')) + '\n'
            + `${emoji.chanel}${configm.description.text116}` + db.database.get(String('channel_gp6_simple')) + '\n'
            + `${emoji.chanel}${configm.description.text117}` + db.database.get(String('channel_gp7_simple')) + '\n'
            + `${emoji.chanel}${configm.description.text118}` + db.database.get(String('channel_gp8_simple')) + '\n'
            + `${emoji.chanel}${configm.description.text119}` + db.database.get(String('channel_gp9_simple')) + '\n'
            + `${emoji.chanel}${configm.description.text120}` + db.database.get(String('channel_gp10_simple')) + '\n'
          )

        interaction.message.edit({ embeds: ([embed]) })

        await interaction.deferUpdate()
      }
    }
  }

  if (interaction.customId === "button_gp_3") {
    if (((interaction.member).permissions.has(PermissionsBitField.Flags.Administrator)) || (interaction.member.id === dev)) {
      if ((db.database.get(String('channel_gp3'))) === "*`Non défini`*") {
        interaction.deferUpdate()
        interaction.channel.send(`${emoji.pen}${configm.description.text121}`).then(async (question) => {
          (interaction.channel).awaitMessages({
            filter: (m) => m.author.id === interaction.member.id,
            time: (500 * 60 * 100),
            max: 1
          }).then(async (collected) => {
            reply = collected.first().content;
            message = collected.first();
            interaction.channel.bulkDelete(1)
            question.delete()
            await delay(Number(1) * 1000)
            if (!(reply === "cancel")) {
              if ((!(((reply) || '').startsWith('<#' || '')))) {


                try {

                  client.channels.cache.get(reply).send({ content: '**`' + interaction.user.tag + '`**' + " a configuré **`" + client.channels.cache.get(reply).name + "`** comme le salon de ghostping numéro 3." })

                  db.database.set(String('channel_gp3'), (reply));
                  db.database.set(String('channel_gp3_simple'), '<#' + (reply) + '>');

                  var embed = new EmbedBuilder()
                    .setColor(`${config.color.color_good}`)
                    .setDescription(`${emoji.tick}${general.response.save_modifications}`)

                  interaction.channel.send({
                    embeds: ([embed])
                  }).then(async (response_save) => {
                    await delay(Number(3) * 1000)
                    response_save.delete()
                  })

                  var embed = new EmbedBuilder()
                    .setColor(`${config.color.color}`)
                    .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
                    .setTitle(`${emoji.settings}${configm.title.text1}`)
                    .setDescription(`${emoji.chanel}${configm.description.text111}` + db.database.get(String('channel_gp1_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text112}` + db.database.get(String('channel_gp2_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text113}` + db.database.get(String('channel_gp3_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text114}` + db.database.get(String('channel_gp4_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text115}` + db.database.get(String('channel_gp5_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text116}` + db.database.get(String('channel_gp6_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text117}` + db.database.get(String('channel_gp7_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text118}` + db.database.get(String('channel_gp8_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text119}` + db.database.get(String('channel_gp9_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text120}` + db.database.get(String('channel_gp10_simple')) + '\n'
                    )

                  interaction.message.edit({ embeds: ([embed]) })

                  console.log(chalk.green("L'utilisateur " + interaction.user.tag + " a configuré le salon de ghostping 3 sur le salon " + client.channels.cache.get(reply).name + "."))

                } catch (err) {

                  console.log(chalk.red(err + ' (SALON RENSEIGNE INTROUVABLE)'))

                  var embed = new EmbedBuilder()
                    .setColor(`${config.color.color_error}`)
                    .setDescription(`${emoji.wrong}${general.error.channel_notfound}`)

                  interaction.channel.send({
                    embeds: ([embed])
                  }).then(async (response_error) => {
                    await delay(Number(3) * 1000)
                    response_error.delete()

                  })



                }

              } else {

                try {

                  let change = reply.replace('<', '')
                  let change1 = change.replace('#', '')
                  let change2 = change1.replace('>', '')

                  db.database.set(String('channel_gp3'), change2)
                  db.database.set(String('channel_gp3_simple'), reply);

                  client.channels.cache.get(change2).send({ content: '**`' + interaction.user.tag + '`**' + " a configuré **`" + client.channels.cache.get(change2).name + "`** comme le salon de ghostping numéro 3." })

                  var embed = new EmbedBuilder()
                    .setColor(`${config.color.color_good}`)
                    .setDescription(`${emoji.tick}${general.response.save_modifications}`)

                  interaction.channel.send({
                    embeds: ([embed])
                  }).then(async (response_save) => {
                    await delay(Number(3) * 1000)
                    response_save.delete()
                  })

                  var embed = new EmbedBuilder()
                    .setColor(`${config.color.color}`)
                    .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
                    .setTitle(`${emoji.settings}${configm.title.text1}`)
                    .setDescription(`${emoji.chanel}${configm.description.text111}` + db.database.get(String('channel_gp1_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text112}` + db.database.get(String('channel_gp2_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text113}` + db.database.get(String('channel_gp3_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text114}` + db.database.get(String('channel_gp4_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text115}` + db.database.get(String('channel_gp5_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text116}` + db.database.get(String('channel_gp6_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text117}` + db.database.get(String('channel_gp7_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text118}` + db.database.get(String('channel_gp8_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text119}` + db.database.get(String('channel_gp9_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text120}` + db.database.get(String('channel_gp10_simple')) + '\n'
                    )

                  interaction.message.edit({ embeds: ([embed]) })

                  console.log(chalk.green("L'utilisateur " + interaction.user.tag + " a configuré le salon de ghostping 3 sur le salon " + client.channels.cache.get(change2).name + "."))

                } catch (err) {

                  console.log(chalk.red(err + ' (SALON RENSEIGNE INTROUVABLE)'))

                  var embed = new EmbedBuilder()
                    .setColor(`${config.color.color_error}`)
                    .setDescription(`${emoji.wrong}${general.error.channel_notfound}`)

                  interaction.channel.send({
                    embeds: ([embed])
                  }).then(async (response_error) => {
                    await delay(Number(3) * 1000)
                    response_error.delete()

                  })



                }

              }
            } else {

              var embed = new EmbedBuilder()
                .setColor(`${config.color.color_error}`)
                .setDescription(`${emoji.wrong}${general.response.nosave_modif}`)
              interaction.channel.send({
                embeds: ([embed])
              }).then(async (response_nosave) => {
                await delay(Number(3) * 1000)
                response_nosave.delete()

              })
            }
          })
        })
      } else {

        db.database.set(String('channel_gp3'), "*`Non défini`*")
        db.database.set(String('channel_gp3_simple'), "*`Non défini`*")

        var embed = new EmbedBuilder()
          .setColor(`${config.color.color}`)
          .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
          .setTitle(`${emoji.settings}${configm.title.text1}`)
          .setDescription(`${emoji.chanel}${configm.description.text111}` + db.database.get(String('channel_gp1_simple')) + '\n'
            + `${emoji.chanel}${configm.description.text112}` + db.database.get(String('channel_gp2_simple')) + '\n'
            + `${emoji.chanel}${configm.description.text113}` + db.database.get(String('channel_gp3_simple')) + '\n'
            + `${emoji.chanel}${configm.description.text114}` + db.database.get(String('channel_gp4_simple')) + '\n'
            + `${emoji.chanel}${configm.description.text115}` + db.database.get(String('channel_gp5_simple')) + '\n'
            + `${emoji.chanel}${configm.description.text116}` + db.database.get(String('channel_gp6_simple')) + '\n'
            + `${emoji.chanel}${configm.description.text117}` + db.database.get(String('channel_gp7_simple')) + '\n'
            + `${emoji.chanel}${configm.description.text118}` + db.database.get(String('channel_gp8_simple')) + '\n'
            + `${emoji.chanel}${configm.description.text119}` + db.database.get(String('channel_gp9_simple')) + '\n'
            + `${emoji.chanel}${configm.description.text120}` + db.database.get(String('channel_gp10_simple')) + '\n'
          )

        interaction.message.edit({ embeds: ([embed]) })

        await interaction.deferUpdate()
      }
    }
  }

  if (interaction.customId === "button_gp_4") {
    if (((interaction.member).permissions.has(PermissionsBitField.Flags.Administrator)) || (interaction.member.id === dev)) {
      if ((db.database.get(String('channel_gp4'))) === "*`Non défini`*") {
        interaction.deferUpdate()
        interaction.channel.send(`${emoji.pen}${configm.description.text121}`).then(async (question) => {
          (interaction.channel).awaitMessages({
            filter: (m) => m.author.id === interaction.member.id,
            time: (500 * 60 * 100),
            max: 1
          }).then(async (collected) => {
            reply = collected.first().content;
            message = collected.first();
            interaction.channel.bulkDelete(1)
            question.delete()
            await delay(Number(1) * 1000)
            if (!(reply === "cancel")) {
              if ((!(((reply) || '').startsWith('<#' || '')))) {


                try {

                  client.channels.cache.get(reply).send({ content: '**`' + interaction.user.tag + '`**' + " a configuré **`" + client.channels.cache.get(reply).name + "`** comme le salon de ghostping numéro 4." })

                  db.database.set(String('channel_gp4'), (reply));
                  db.database.set(String('channel_gp4_simple'), '<#' + (reply) + '>');

                  var embed = new EmbedBuilder()
                    .setColor(`${config.color.color_good}`)
                    .setDescription(`${emoji.tick}${general.response.save_modifications}`)

                  interaction.channel.send({
                    embeds: ([embed])
                  }).then(async (response_save) => {
                    await delay(Number(3) * 1000)
                    response_save.delete()
                  })

                  var embed = new EmbedBuilder()
                    .setColor(`${config.color.color}`)
                    .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
                    .setTitle(`${emoji.settings}${configm.title.text1}`)
                    .setDescription(`${emoji.chanel}${configm.description.text111}` + db.database.get(String('channel_gp1_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text112}` + db.database.get(String('channel_gp2_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text113}` + db.database.get(String('channel_gp3_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text114}` + db.database.get(String('channel_gp4_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text115}` + db.database.get(String('channel_gp5_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text116}` + db.database.get(String('channel_gp6_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text117}` + db.database.get(String('channel_gp7_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text118}` + db.database.get(String('channel_gp8_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text119}` + db.database.get(String('channel_gp9_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text120}` + db.database.get(String('channel_gp10_simple')) + '\n'
                    )

                  interaction.message.edit({ embeds: ([embed]) })

                  console.log(chalk.green("L'utilisateur " + interaction.user.tag + " a configuré le salon de ghostping 4 sur le salon " + client.channels.cache.get(reply).name + "."))

                } catch (err) {

                  console.log(chalk.red(err + ' (SALON RENSEIGNE INTROUVABLE)'))

                  var embed = new EmbedBuilder()
                    .setColor(`${config.color.color_error}`)
                    .setDescription(`${emoji.wrong}${general.error.channel_notfound}`)

                  interaction.channel.send({
                    embeds: ([embed])
                  }).then(async (response_error) => {
                    await delay(Number(3) * 1000)
                    response_error.delete()

                  })



                }

              } else {

                try {

                  let change = reply.replace('<', '')
                  let change1 = change.replace('#', '')
                  let change2 = change1.replace('>', '')

                  db.database.set(String('channel_gp4'), change2)
                  db.database.set(String('channel_gp4_simple'), reply);

                  client.channels.cache.get(change2).send({ content: '**`' + interaction.user.tag + '`**' + " a configuré **`" + client.channels.cache.get(change2).name + "`** comme le salon de ghostping numéro 4." })

                  var embed = new EmbedBuilder()
                    .setColor(`${config.color.color_good}`)
                    .setDescription(`${emoji.tick}${general.response.save_modifications}`)

                  interaction.channel.send({
                    embeds: ([embed])
                  }).then(async (response_save) => {
                    await delay(Number(3) * 1000)
                    response_save.delete()
                  })

                  var embed = new EmbedBuilder()
                    .setColor(`${config.color.color}`)
                    .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
                    .setTitle(`${emoji.settings}${configm.title.text1}`)
                    .setDescription(`${emoji.chanel}${configm.description.text111}` + db.database.get(String('channel_gp1_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text112}` + db.database.get(String('channel_gp2_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text113}` + db.database.get(String('channel_gp3_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text114}` + db.database.get(String('channel_gp4_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text115}` + db.database.get(String('channel_gp5_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text116}` + db.database.get(String('channel_gp6_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text117}` + db.database.get(String('channel_gp7_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text118}` + db.database.get(String('channel_gp8_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text119}` + db.database.get(String('channel_gp9_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text120}` + db.database.get(String('channel_gp10_simple')) + '\n'
                    )

                  interaction.message.edit({ embeds: ([embed]) })

                  console.log(chalk.green("L'utilisateur " + interaction.user.tag + " a configuré le salon de ghostping 4 sur le salon " + client.channels.cache.get(change2).name + "."))

                } catch (err) {

                  console.log(chalk.red(err + ' (SALON RENSEIGNE INTROUVABLE)'))

                  var embed = new EmbedBuilder()
                    .setColor(`${config.color.color_error}`)
                    .setDescription(`${emoji.wrong}${general.error.channel_notfound}`)

                  interaction.channel.send({
                    embeds: ([embed])
                  }).then(async (response_error) => {
                    await delay(Number(3) * 1000)
                    response_error.delete()

                  })



                }

              }
            } else {

              var embed = new EmbedBuilder()
                .setColor(`${config.color.color_error}`)
                .setDescription(`${emoji.wrong}${general.response.nosave_modif}`)
              interaction.channel.send({
                embeds: ([embed])
              }).then(async (response_nosave) => {
                await delay(Number(3) * 1000)
                response_nosave.delete()

              })
            }
          })
        })
      } else {

        db.database.set(String('channel_gp4'), "*`Non défini`*")
        db.database.set(String('channel_gp4_simple'), "*`Non défini`*")

        var embed = new EmbedBuilder()
          .setColor(`${config.color.color}`)
          .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
          .setTitle(`${emoji.settings}${configm.title.text1}`)
          .setDescription(`${emoji.chanel}${configm.description.text111}` + db.database.get(String('channel_gp1_simple')) + '\n'
            + `${emoji.chanel}${configm.description.text112}` + db.database.get(String('channel_gp2_simple')) + '\n'
            + `${emoji.chanel}${configm.description.text113}` + db.database.get(String('channel_gp3_simple')) + '\n'
            + `${emoji.chanel}${configm.description.text114}` + db.database.get(String('channel_gp4_simple')) + '\n'
            + `${emoji.chanel}${configm.description.text115}` + db.database.get(String('channel_gp5_simple')) + '\n'
            + `${emoji.chanel}${configm.description.text116}` + db.database.get(String('channel_gp6_simple')) + '\n'
            + `${emoji.chanel}${configm.description.text117}` + db.database.get(String('channel_gp7_simple')) + '\n'
            + `${emoji.chanel}${configm.description.text118}` + db.database.get(String('channel_gp8_simple')) + '\n'
            + `${emoji.chanel}${configm.description.text119}` + db.database.get(String('channel_gp9_simple')) + '\n'
            + `${emoji.chanel}${configm.description.text120}` + db.database.get(String('channel_gp10_simple')) + '\n'
          )

        interaction.message.edit({ embeds: ([embed]) })

        await interaction.deferUpdate()
      }
    }
  }

  if (interaction.customId === "button_gp_5") {
    if (((interaction.member).permissions.has(PermissionsBitField.Flags.Administrator)) || (interaction.member.id === dev)) {
      if ((db.database.get(String('channel_gp5'))) === "*`Non défini`*") {
        interaction.deferUpdate()
        interaction.channel.send(`${emoji.pen}${configm.description.text121}`).then(async (question) => {
          (interaction.channel).awaitMessages({
            filter: (m) => m.author.id === interaction.member.id,
            time: (500 * 60 * 100),
            max: 1
          }).then(async (collected) => {
            reply = collected.first().content;
            message = collected.first();
            interaction.channel.bulkDelete(1)
            question.delete()
            await delay(Number(1) * 1000)
            if (!(reply === "cancel")) {
              if ((!(((reply) || '').startsWith('<#' || '')))) {


                try {

                  client.channels.cache.get(reply).send({ content: '**`' + interaction.user.tag + '`**' + " a configuré **`" + client.channels.cache.get(reply).name + "`** comme le salon de ghostping numéro 5." })

                  db.database.set(String('channel_gp5'), (reply));
                  db.database.set(String('channel_gp5_simple'), '<#' + (reply) + '>');

                  var embed = new EmbedBuilder()
                    .setColor(`${config.color.color_good}`)
                    .setDescription(`${emoji.tick}${general.response.save_modifications}`)

                  interaction.channel.send({
                    embeds: ([embed])
                  }).then(async (response_save) => {
                    await delay(Number(3) * 1000)
                    response_save.delete()
                  })

                  var embed = new EmbedBuilder()
                    .setColor(`${config.color.color}`)
                    .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
                    .setTitle(`${emoji.settings}${configm.title.text1}`)
                    .setDescription(`${emoji.chanel}${configm.description.text111}` + db.database.get(String('channel_gp1_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text112}` + db.database.get(String('channel_gp2_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text113}` + db.database.get(String('channel_gp3_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text114}` + db.database.get(String('channel_gp4_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text115}` + db.database.get(String('channel_gp5_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text116}` + db.database.get(String('channel_gp6_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text117}` + db.database.get(String('channel_gp7_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text118}` + db.database.get(String('channel_gp8_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text119}` + db.database.get(String('channel_gp9_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text120}` + db.database.get(String('channel_gp10_simple')) + '\n'
                    )

                  interaction.message.edit({ embeds: ([embed]) })

                  console.log(chalk.green("L'utilisateur " + interaction.user.tag + " a configuré le salon de ghostping 5 sur le salon " + client.channels.cache.get(reply).name + "."))

                } catch (err) {

                  console.log(chalk.red(err + ' (SALON RENSEIGNE INTROUVABLE)'))

                  var embed = new EmbedBuilder()
                    .setColor(`${config.color.color_error}`)
                    .setDescription(`${emoji.wrong}${general.error.channel_notfound}`)

                  interaction.channel.send({
                    embeds: ([embed])
                  }).then(async (response_error) => {
                    await delay(Number(3) * 1000)
                    response_error.delete()

                  })



                }

              } else {

                try {

                  let change = reply.replace('<', '')
                  let change1 = change.replace('#', '')
                  let change2 = change1.replace('>', '')

                  db.database.set(String('channel_gp5'), change2)
                  db.database.set(String('channel_gp5_simple'), reply);

                  client.channels.cache.get(change2).send({ content: '**`' + interaction.user.tag + '`**' + " a configuré **`" + client.channels.cache.get(change2).name + "`** comme le salon de ghostping numéro 5." })

                  var embed = new EmbedBuilder()
                    .setColor(`${config.color.color_good}`)
                    .setDescription(`${emoji.tick}${general.response.save_modifications}`)

                  interaction.channel.send({
                    embeds: ([embed])
                  }).then(async (response_save) => {
                    await delay(Number(3) * 1000)
                    response_save.delete()
                  })

                  var embed = new EmbedBuilder()
                    .setColor(`${config.color.color}`)
                    .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
                    .setTitle(`${emoji.settings}${configm.title.text1}`)
                    .setDescription(`${emoji.chanel}${configm.description.text111}` + db.database.get(String('channel_gp1_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text112}` + db.database.get(String('channel_gp2_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text113}` + db.database.get(String('channel_gp3_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text114}` + db.database.get(String('channel_gp4_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text115}` + db.database.get(String('channel_gp5_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text116}` + db.database.get(String('channel_gp6_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text117}` + db.database.get(String('channel_gp7_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text118}` + db.database.get(String('channel_gp8_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text119}` + db.database.get(String('channel_gp9_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text120}` + db.database.get(String('channel_gp10_simple')) + '\n'
                    )

                  interaction.message.edit({ embeds: ([embed]) })

                  console.log(chalk.green("L'utilisateur " + interaction.user.tag + " a configuré le salon de ghostping 5 sur le salon " + client.channels.cache.get(change2).name + "."))

                } catch (err) {

                  console.log(chalk.red(err + ' (SALON RENSEIGNE INTROUVABLE)'))

                  var embed = new EmbedBuilder()
                    .setColor(`${config.color.color_error}`)
                    .setDescription(`${emoji.wrong}${general.error.channel_notfound}`)

                  interaction.channel.send({
                    embeds: ([embed])
                  }).then(async (response_error) => {
                    await delay(Number(3) * 1000)
                    response_error.delete()

                  })



                }

              }
            } else {

              var embed = new EmbedBuilder()
                .setColor(`${config.color.color_error}`)
                .setDescription(`${emoji.wrong}${general.response.nosave_modif}`)
              interaction.channel.send({
                embeds: ([embed])
              }).then(async (response_nosave) => {
                await delay(Number(3) * 1000)
                response_nosave.delete()

              })
            }
          })
        })
      } else {

        db.database.set(String('channel_gp5'), "*`Non défini`*")
        db.database.set(String('channel_gp5_simple'), "*`Non défini`*")

        var embed = new EmbedBuilder()
          .setColor(`${config.color.color}`)
          .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
          .setTitle(`${emoji.settings}${configm.title.text1}`)
          .setDescription(`${emoji.chanel}${configm.description.text111}` + db.database.get(String('channel_gp1_simple')) + '\n'
            + `${emoji.chanel}${configm.description.text112}` + db.database.get(String('channel_gp2_simple')) + '\n'
            + `${emoji.chanel}${configm.description.text113}` + db.database.get(String('channel_gp3_simple')) + '\n'
            + `${emoji.chanel}${configm.description.text114}` + db.database.get(String('channel_gp4_simple')) + '\n'
            + `${emoji.chanel}${configm.description.text115}` + db.database.get(String('channel_gp5_simple')) + '\n'
            + `${emoji.chanel}${configm.description.text116}` + db.database.get(String('channel_gp6_simple')) + '\n'
            + `${emoji.chanel}${configm.description.text117}` + db.database.get(String('channel_gp7_simple')) + '\n'
            + `${emoji.chanel}${configm.description.text118}` + db.database.get(String('channel_gp8_simple')) + '\n'
            + `${emoji.chanel}${configm.description.text119}` + db.database.get(String('channel_gp9_simple')) + '\n'
            + `${emoji.chanel}${configm.description.text120}` + db.database.get(String('channel_gp10_simple')) + '\n'
          )

        interaction.message.edit({ embeds: ([embed]) })

        await interaction.deferUpdate()
      }
    }
  }

  if (interaction.customId === "button_gp_6") {
    if (((interaction.member).permissions.has(PermissionsBitField.Flags.Administrator)) || (interaction.member.id === dev)) {
      if ((db.database.get(String('channel_gp6'))) === "*`Non défini`*") {
        interaction.deferUpdate()
        interaction.channel.send(`${emoji.pen}${configm.description.text121}`).then(async (question) => {
          (interaction.channel).awaitMessages({
            filter: (m) => m.author.id === interaction.member.id,
            time: (500 * 60 * 100),
            max: 1
          }).then(async (collected) => {
            reply = collected.first().content;
            message = collected.first();
            interaction.channel.bulkDelete(1)
            question.delete()
            await delay(Number(1) * 1000)
            if (!(reply === "cancel")) {
              if ((!(((reply) || '').startsWith('<#' || '')))) {


                try {

                  client.channels.cache.get(reply).send({ content: '**`' + interaction.user.tag + '`**' + " a configuré **`" + client.channels.cache.get(reply).name + "`** comme le salon de ghostping numéro 6." })

                  db.database.set(String('channel_gp6'), (reply));
                  db.database.set(String('channel_gp6_simple'), '<#' + (reply) + '>');

                  var embed = new EmbedBuilder()
                    .setColor(`${config.color.color_good}`)
                    .setDescription(`${emoji.tick}${general.response.save_modifications}`)

                  interaction.channel.send({
                    embeds: ([embed])
                  }).then(async (response_save) => {
                    await delay(Number(3) * 1000)
                    response_save.delete()
                  })

                  var embed = new EmbedBuilder()
                    .setColor(`${config.color.color}`)
                    .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
                    .setTitle(`${emoji.settings}${configm.title.text1}`)
                    .setDescription(`${emoji.chanel}${configm.description.text111}` + db.database.get(String('channel_gp1_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text112}` + db.database.get(String('channel_gp2_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text113}` + db.database.get(String('channel_gp3_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text114}` + db.database.get(String('channel_gp4_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text115}` + db.database.get(String('channel_gp5_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text116}` + db.database.get(String('channel_gp6_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text117}` + db.database.get(String('channel_gp7_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text118}` + db.database.get(String('channel_gp8_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text119}` + db.database.get(String('channel_gp9_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text120}` + db.database.get(String('channel_gp10_simple')) + '\n'
                    )

                  interaction.message.edit({ embeds: ([embed]) })

                  console.log(chalk.green("L'utilisateur " + interaction.user.tag + " a configuré le salon de ghostping 6 sur le salon " + client.channels.cache.get(reply).name + "."))

                } catch (err) {

                  console.log(chalk.red(err + ' (SALON RENSEIGNE INTROUVABLE)'))

                  var embed = new EmbedBuilder()
                    .setColor(`${config.color.color_error}`)
                    .setDescription(`${emoji.wrong}${general.error.channel_notfound}`)

                  interaction.channel.send({
                    embeds: ([embed])
                  }).then(async (response_error) => {
                    await delay(Number(3) * 1000)
                    response_error.delete()

                  })



                }

              } else {

                try {

                  let change = reply.replace('<', '')
                  let change1 = change.replace('#', '')
                  let change2 = change1.replace('>', '')

                  db.database.set(String('channel_gp6'), change2)
                  db.database.set(String('channel_gp6_simple'), reply);

                  client.channels.cache.get(change2).send({ content: '**`' + interaction.user.tag + '`**' + " a configuré **`" + client.channels.cache.get(change2).name + "`** comme le salon de ghostping numéro 6." })

                  var embed = new EmbedBuilder()
                    .setColor(`${config.color.color_good}`)
                    .setDescription(`${emoji.tick}${general.response.save_modifications}`)

                  interaction.channel.send({
                    embeds: ([embed])
                  }).then(async (response_save) => {
                    await delay(Number(3) * 1000)
                    response_save.delete()
                  })

                  var embed = new EmbedBuilder()
                    .setColor(`${config.color.color}`)
                    .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
                    .setTitle(`${emoji.settings}${configm.title.text1}`)
                    .setDescription(`${emoji.chanel}${configm.description.text111}` + db.database.get(String('channel_gp1_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text112}` + db.database.get(String('channel_gp2_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text113}` + db.database.get(String('channel_gp3_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text114}` + db.database.get(String('channel_gp4_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text115}` + db.database.get(String('channel_gp5_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text116}` + db.database.get(String('channel_gp6_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text117}` + db.database.get(String('channel_gp7_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text118}` + db.database.get(String('channel_gp8_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text119}` + db.database.get(String('channel_gp9_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text120}` + db.database.get(String('channel_gp10_simple')) + '\n'
                    )

                  interaction.message.edit({ embeds: ([embed]) })

                  console.log(chalk.green("L'utilisateur " + interaction.user.tag + " a configuré le salon de ghostping 6 sur le salon " + client.channels.cache.get(change2).name + "."))

                } catch (err) {

                  console.log(chalk.red(err + ' (SALON RENSEIGNE INTROUVABLE)'))

                  var embed = new EmbedBuilder()
                    .setColor(`${config.color.color_error}`)
                    .setDescription(`${emoji.wrong}${general.error.channel_notfound}`)

                  interaction.channel.send({
                    embeds: ([embed])
                  }).then(async (response_error) => {
                    await delay(Number(3) * 1000)
                    response_error.delete()

                  })



                }

              }
            } else {

              var embed = new EmbedBuilder()
                .setColor(`${config.color.color_error}`)
                .setDescription(`${emoji.wrong}${general.response.nosave_modif}`)
              interaction.channel.send({
                embeds: ([embed])
              }).then(async (response_nosave) => {
                await delay(Number(3) * 1000)
                response_nosave.delete()

              })
            }
          })
        })
      } else {

        db.database.set(String('channel_gp6'), "*`Non défini`*")
        db.database.set(String('channel_gp6_simple'), "*`Non défini`*")

        var embed = new EmbedBuilder()
          .setColor(`${config.color.color}`)
          .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
          .setTitle(`${emoji.settings}${configm.title.text1}`)
          .setDescription(`${emoji.chanel}${configm.description.text111}` + db.database.get(String('channel_gp1_simple')) + '\n'
            + `${emoji.chanel}${configm.description.text112}` + db.database.get(String('channel_gp2_simple')) + '\n'
            + `${emoji.chanel}${configm.description.text113}` + db.database.get(String('channel_gp3_simple')) + '\n'
            + `${emoji.chanel}${configm.description.text114}` + db.database.get(String('channel_gp4_simple')) + '\n'
            + `${emoji.chanel}${configm.description.text115}` + db.database.get(String('channel_gp5_simple')) + '\n'
            + `${emoji.chanel}${configm.description.text116}` + db.database.get(String('channel_gp6_simple')) + '\n'
            + `${emoji.chanel}${configm.description.text117}` + db.database.get(String('channel_gp7_simple')) + '\n'
            + `${emoji.chanel}${configm.description.text118}` + db.database.get(String('channel_gp8_simple')) + '\n'
            + `${emoji.chanel}${configm.description.text119}` + db.database.get(String('channel_gp9_simple')) + '\n'
            + `${emoji.chanel}${configm.description.text120}` + db.database.get(String('channel_gp10_simple')) + '\n'
          )

        interaction.message.edit({ embeds: ([embed]) })

        await interaction.deferUpdate()
      }
    }
  }


  if (interaction.customId === "button_gp_7") {
    if (((interaction.member).permissions.has(PermissionsBitField.Flags.Administrator)) || (interaction.member.id === dev)) {
      if ((db.database.get(String('channel_gp7'))) === "*`Non défini`*") {
        interaction.deferUpdate()
        interaction.channel.send(`${emoji.pen}${configm.description.text121}`).then(async (question) => {
          (interaction.channel).awaitMessages({
            filter: (m) => m.author.id === interaction.member.id,
            time: (500 * 60 * 100),
            max: 1
          }).then(async (collected) => {
            reply = collected.first().content;
            message = collected.first();
            interaction.channel.bulkDelete(1)
            question.delete()
            await delay(Number(1) * 1000)
            if (!(reply === "cancel")) {
              if ((!(((reply) || '').startsWith('<#' || '')))) {


                try {

                  client.channels.cache.get(reply).send({ content: '**`' + interaction.user.tag + '`**' + " a configuré **`" + client.channels.cache.get(reply).name + "`** comme le salon de ghostping numéro 7." })

                  db.database.set(String('channel_gp7'), (reply));
                  db.database.set(String('channel_gp7_simple'), '<#' + (reply) + '>');

                  var embed = new EmbedBuilder()
                    .setColor(`${config.color.color_good}`)
                    .setDescription(`${emoji.tick}${general.response.save_modifications}`)

                  interaction.channel.send({
                    embeds: ([embed])
                  }).then(async (response_save) => {
                    await delay(Number(3) * 1000)
                    response_save.delete()
                  })

                  var embed = new EmbedBuilder()
                    .setColor(`${config.color.color}`)
                    .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
                    .setTitle(`${emoji.settings}${configm.title.text1}`)
                    .setDescription(`${emoji.chanel}${configm.description.text111}` + db.database.get(String('channel_gp1_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text112}` + db.database.get(String('channel_gp2_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text113}` + db.database.get(String('channel_gp3_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text114}` + db.database.get(String('channel_gp4_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text115}` + db.database.get(String('channel_gp5_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text116}` + db.database.get(String('channel_gp6_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text117}` + db.database.get(String('channel_gp7_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text118}` + db.database.get(String('channel_gp8_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text119}` + db.database.get(String('channel_gp9_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text120}` + db.database.get(String('channel_gp10_simple')) + '\n'
                    )

                  interaction.message.edit({ embeds: ([embed]) })

                  console.log(chalk.green("L'utilisateur " + interaction.user.tag + " a configuré le salon de ghostping 7 sur le salon " + client.channels.cache.get(reply).name + "."))

                } catch (err) {

                  console.log(chalk.red(err + ' (SALON RENSEIGNE INTROUVABLE)'))

                  var embed = new EmbedBuilder()
                    .setColor(`${config.color.color_error}`)
                    .setDescription(`${emoji.wrong}${general.error.channel_notfound}`)

                  interaction.channel.send({
                    embeds: ([embed])
                  }).then(async (response_error) => {
                    await delay(Number(3) * 1000)
                    response_error.delete()

                  })



                }

              } else {

                try {

                  let change = reply.replace('<', '')
                  let change1 = change.replace('#', '')
                  let change2 = change1.replace('>', '')

                  db.database.set(String('channel_gp7'), change2)
                  db.database.set(String('channel_gp7_simple'), reply);

                  client.channels.cache.get(change2).send({ content: '**`' + interaction.user.tag + '`**' + " a configuré **`" + client.channels.cache.get(change2).name + "`** comme le salon de ghostping numéro 7." })

                  var embed = new EmbedBuilder()
                    .setColor(`${config.color.color_good}`)
                    .setDescription(`${emoji.tick}${general.response.save_modifications}`)

                  interaction.channel.send({
                    embeds: ([embed])
                  }).then(async (response_save) => {
                    await delay(Number(3) * 1000)
                    response_save.delete()
                  })

                  var embed = new EmbedBuilder()
                    .setColor(`${config.color.color}`)
                    .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
                    .setTitle(`${emoji.settings}${configm.title.text1}`)
                    .setDescription(`${emoji.chanel}${configm.description.text111}` + db.database.get(String('channel_gp1_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text112}` + db.database.get(String('channel_gp2_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text113}` + db.database.get(String('channel_gp3_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text114}` + db.database.get(String('channel_gp4_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text115}` + db.database.get(String('channel_gp5_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text116}` + db.database.get(String('channel_gp6_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text117}` + db.database.get(String('channel_gp7_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text118}` + db.database.get(String('channel_gp8_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text119}` + db.database.get(String('channel_gp9_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text120}` + db.database.get(String('channel_gp10_simple')) + '\n'
                    )

                  interaction.message.edit({ embeds: ([embed]) })

                  console.log(chalk.green("L'utilisateur " + interaction.user.tag + " a configuré le salon de ghostping 7 sur le salon " + client.channels.cache.get(change2).name + "."))

                } catch (err) {

                  console.log(chalk.red(err + ' (SALON RENSEIGNE INTROUVABLE)'))

                  var embed = new EmbedBuilder()
                    .setColor(`${config.color.color_error}`)
                    .setDescription(`${emoji.wrong}${general.error.channel_notfound}`)

                  interaction.channel.send({
                    embeds: ([embed])
                  }).then(async (response_error) => {
                    await delay(Number(3) * 1000)
                    response_error.delete()

                  })



                }

              }
            } else {

              var embed = new EmbedBuilder()
                .setColor(`${config.color.color_error}`)
                .setDescription(`${emoji.wrong}${general.response.nosave_modif}`)
              interaction.channel.send({
                embeds: ([embed])
              }).then(async (response_nosave) => {
                await delay(Number(3) * 1000)
                response_nosave.delete()

              })
            }
          })
        })
      } else {

        db.database.set(String('channel_gp7'), "*`Non défini`*")
        db.database.set(String('channel_gp7_simple'), "*`Non défini`*")

        var embed = new EmbedBuilder()
          .setColor(`${config.color.color}`)
          .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
          .setTitle(`${emoji.settings}${configm.title.text1}`)
          .setDescription(`${emoji.chanel}${configm.description.text111}` + db.database.get(String('channel_gp1_simple')) + '\n'
            + `${emoji.chanel}${configm.description.text112}` + db.database.get(String('channel_gp2_simple')) + '\n'
            + `${emoji.chanel}${configm.description.text113}` + db.database.get(String('channel_gp3_simple')) + '\n'
            + `${emoji.chanel}${configm.description.text114}` + db.database.get(String('channel_gp4_simple')) + '\n'
            + `${emoji.chanel}${configm.description.text115}` + db.database.get(String('channel_gp5_simple')) + '\n'
            + `${emoji.chanel}${configm.description.text116}` + db.database.get(String('channel_gp6_simple')) + '\n'
            + `${emoji.chanel}${configm.description.text117}` + db.database.get(String('channel_gp7_simple')) + '\n'
            + `${emoji.chanel}${configm.description.text118}` + db.database.get(String('channel_gp8_simple')) + '\n'
            + `${emoji.chanel}${configm.description.text119}` + db.database.get(String('channel_gp9_simple')) + '\n'
            + `${emoji.chanel}${configm.description.text120}` + db.database.get(String('channel_gp10_simple')) + '\n'
          )

        interaction.message.edit({ embeds: ([embed]) })

        await interaction.deferUpdate()
      }
    }
  }

  if (interaction.customId === "button_gp_8") {
    if (((interaction.member).permissions.has(PermissionsBitField.Flags.Administrator)) || (interaction.member.id === dev)) {
      if ((db.database.get(String('channel_gp8'))) === "*`Non défini`*") {
        interaction.deferUpdate()
        interaction.channel.send(`${emoji.pen}${configm.description.text121}`).then(async (question) => {
          (interaction.channel).awaitMessages({
            filter: (m) => m.author.id === interaction.member.id,
            time: (500 * 60 * 100),
            max: 1
          }).then(async (collected) => {
            reply = collected.first().content;
            message = collected.first();
            interaction.channel.bulkDelete(1)
            question.delete()
            await delay(Number(1) * 1000)
            if (!(reply === "cancel")) {
              if ((!(((reply) || '').startsWith('<#' || '')))) {


                try {

                  client.channels.cache.get(reply).send({ content: '**`' + interaction.user.tag + '`**' + " a configuré **`" + client.channels.cache.get(reply).name + "`** comme le salon de ghostping numéro 8." })

                  db.database.set(String('channel_gp8'), (reply));
                  db.database.set(String('channel_gp8_simple'), '<#' + (reply) + '>');

                  var embed = new EmbedBuilder()
                    .setColor(`${config.color.color_good}`)
                    .setDescription(`${emoji.tick}${general.response.save_modifications}`)

                  interaction.channel.send({
                    embeds: ([embed])
                  }).then(async (response_save) => {
                    await delay(Number(3) * 1000)
                    response_save.delete()
                  })

                  var embed = new EmbedBuilder()
                    .setColor(`${config.color.color}`)
                    .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
                    .setTitle(`${emoji.settings}${configm.title.text1}`)
                    .setDescription(`${emoji.chanel}${configm.description.text111}` + db.database.get(String('channel_gp1_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text112}` + db.database.get(String('channel_gp2_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text113}` + db.database.get(String('channel_gp3_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text114}` + db.database.get(String('channel_gp4_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text115}` + db.database.get(String('channel_gp5_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text116}` + db.database.get(String('channel_gp6_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text117}` + db.database.get(String('channel_gp7_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text118}` + db.database.get(String('channel_gp8_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text119}` + db.database.get(String('channel_gp9_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text120}` + db.database.get(String('channel_gp10_simple')) + '\n'
                    )

                  interaction.message.edit({ embeds: ([embed]) })

                  console.log(chalk.green("L'utilisateur " + interaction.user.tag + " a configuré le salon de ghostping 8 sur le salon " + client.channels.cache.get(reply).name + "."))

                } catch (err) {

                  console.log(chalk.red(err + ' (SALON RENSEIGNE INTROUVABLE)'))

                  var embed = new EmbedBuilder()
                    .setColor(`${config.color.color_error}`)
                    .setDescription(`${emoji.wrong}${general.error.channel_notfound}`)

                  interaction.channel.send({
                    embeds: ([embed])
                  }).then(async (response_error) => {
                    await delay(Number(3) * 1000)
                    response_error.delete()

                  })



                }

              } else {

                try {

                  let change = reply.replace('<', '')
                  let change1 = change.replace('#', '')
                  let change2 = change1.replace('>', '')

                  db.database.set(String('channel_gp8'), change2)
                  db.database.set(String('channel_gp8_simple'), reply);

                  client.channels.cache.get(change2).send({ content: '**`' + interaction.user.tag + '`**' + " a configuré **`" + client.channels.cache.get(change2).name + "`** comme le salon de ghostping numéro 8." })

                  var embed = new EmbedBuilder()
                    .setColor(`${config.color.color_good}`)
                    .setDescription(`${emoji.tick}${general.response.save_modifications}`)

                  interaction.channel.send({
                    embeds: ([embed])
                  }).then(async (response_save) => {
                    await delay(Number(3) * 1000)
                    response_save.delete()
                  })

                  var embed = new EmbedBuilder()
                    .setColor(`${config.color.color}`)
                    .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
                    .setTitle(`${emoji.settings}${configm.title.text1}`)
                    .setDescription(`${emoji.chanel}${configm.description.text111}` + db.database.get(String('channel_gp1_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text112}` + db.database.get(String('channel_gp2_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text113}` + db.database.get(String('channel_gp3_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text114}` + db.database.get(String('channel_gp4_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text115}` + db.database.get(String('channel_gp5_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text116}` + db.database.get(String('channel_gp6_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text117}` + db.database.get(String('channel_gp7_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text118}` + db.database.get(String('channel_gp8_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text119}` + db.database.get(String('channel_gp9_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text120}` + db.database.get(String('channel_gp10_simple')) + '\n'
                    )

                  interaction.message.edit({ embeds: ([embed]) })

                  console.log(chalk.green("L'utilisateur " + interaction.user.tag + " a configuré le salon de ghostping 8 sur le salon " + client.channels.cache.get(change2).name + "."))

                } catch (err) {

                  console.log(chalk.red(err + ' (SALON RENSEIGNE INTROUVABLE)'))

                  var embed = new EmbedBuilder()
                    .setColor(`${config.color.color_error}`)
                    .setDescription(`${emoji.wrong}${general.error.channel_notfound}`)

                  interaction.channel.send({
                    embeds: ([embed])
                  }).then(async (response_error) => {
                    await delay(Number(3) * 1000)
                    response_error.delete()

                  })



                }

              }
            } else {

              var embed = new EmbedBuilder()
                .setColor(`${config.color.color_error}`)
                .setDescription(`${emoji.wrong}${general.response.nosave_modif}`)
              interaction.channel.send({
                embeds: ([embed])
              }).then(async (response_nosave) => {
                await delay(Number(3) * 1000)
                response_nosave.delete()

              })
            }
          })
        })
      } else {

        db.database.set(String('channel_gp8'), "*`Non défini`*")
        db.database.set(String('channel_gp8_simple'), "*`Non défini`*")

        var embed = new EmbedBuilder()
          .setColor(`${config.color.color}`)
          .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
          .setTitle(`${emoji.settings}${configm.title.text1}`)
          .setDescription(`${emoji.chanel}${configm.description.text111}` + db.database.get(String('channel_gp1_simple')) + '\n'
            + `${emoji.chanel}${configm.description.text112}` + db.database.get(String('channel_gp2_simple')) + '\n'
            + `${emoji.chanel}${configm.description.text113}` + db.database.get(String('channel_gp3_simple')) + '\n'
            + `${emoji.chanel}${configm.description.text114}` + db.database.get(String('channel_gp4_simple')) + '\n'
            + `${emoji.chanel}${configm.description.text115}` + db.database.get(String('channel_gp5_simple')) + '\n'
            + `${emoji.chanel}${configm.description.text116}` + db.database.get(String('channel_gp6_simple')) + '\n'
            + `${emoji.chanel}${configm.description.text117}` + db.database.get(String('channel_gp7_simple')) + '\n'
            + `${emoji.chanel}${configm.description.text118}` + db.database.get(String('channel_gp8_simple')) + '\n'
            + `${emoji.chanel}${configm.description.text119}` + db.database.get(String('channel_gp9_simple')) + '\n'
            + `${emoji.chanel}${configm.description.text120}` + db.database.get(String('channel_gp10_simple')) + '\n'
          )

        interaction.message.edit({ embeds: ([embed]) })

        await interaction.deferUpdate()
      }
    }
  }

  if (interaction.customId === "button_gp_9") {
    if (((interaction.member).permissions.has(PermissionsBitField.Flags.Administrator)) || (interaction.member.id === dev)) {
      if ((db.database.get(String('channel_gp9'))) === "*`Non défini`*") {
        interaction.deferUpdate()
        interaction.channel.send(`${emoji.pen}${configm.description.text121}`).then(async (question) => {
          (interaction.channel).awaitMessages({
            filter: (m) => m.author.id === interaction.member.id,
            time: (500 * 60 * 100),
            max: 1
          }).then(async (collected) => {
            reply = collected.first().content;
            message = collected.first();
            interaction.channel.bulkDelete(1)
            question.delete()
            await delay(Number(1) * 1000)
            if (!(reply === "cancel")) {
              if ((!(((reply) || '').startsWith('<#' || '')))) {


                try {

                  client.channels.cache.get(reply).send({ content: '**`' + interaction.user.tag + '`**' + " a configuré **`" + client.channels.cache.get(reply).name + "`** comme le salon de ghostping numéro 9." })

                  db.database.set(String('channel_gp9'), (reply));
                  db.database.set(String('channel_gp9_simple'), '<#' + (reply) + '>');

                  var embed = new EmbedBuilder()
                    .setColor(`${config.color.color_good}`)
                    .setDescription(`${emoji.tick}${general.response.save_modifications}`)

                  interaction.channel.send({
                    embeds: ([embed])
                  }).then(async (response_save) => {
                    await delay(Number(3) * 1000)
                    response_save.delete()
                  })

                  var embed = new EmbedBuilder()
                    .setColor(`${config.color.color}`)
                    .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
                    .setTitle(`${emoji.settings}${configm.title.text1}`)
                    .setDescription(`${emoji.chanel}${configm.description.text111}` + db.database.get(String('channel_gp1_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text112}` + db.database.get(String('channel_gp2_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text113}` + db.database.get(String('channel_gp3_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text114}` + db.database.get(String('channel_gp4_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text115}` + db.database.get(String('channel_gp5_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text116}` + db.database.get(String('channel_gp6_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text117}` + db.database.get(String('channel_gp7_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text118}` + db.database.get(String('channel_gp8_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text119}` + db.database.get(String('channel_gp9_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text120}` + db.database.get(String('channel_gp10_simple')) + '\n'
                    )

                  interaction.message.edit({ embeds: ([embed]) })

                  console.log(chalk.green("L'utilisateur " + interaction.user.tag + " a configuré le salon de ghostping 9 sur le salon " + client.channels.cache.get(reply).name + "."))

                } catch (err) {

                  console.log(chalk.red(err + ' (SALON RENSEIGNE INTROUVABLE)'))

                  var embed = new EmbedBuilder()
                    .setColor(`${config.color.color_error}`)
                    .setDescription(`${emoji.wrong}${general.error.channel_notfound}`)

                  interaction.channel.send({
                    embeds: ([embed])
                  }).then(async (response_error) => {
                    await delay(Number(3) * 1000)
                    response_error.delete()

                  })



                }

              } else {

                try {

                  let change = reply.replace('<', '')
                  let change1 = change.replace('#', '')
                  let change2 = change1.replace('>', '')

                  db.database.set(String('channel_gp9'), change2)
                  db.database.set(String('channel_gp9_simple'), reply);

                  client.channels.cache.get(change2).send({ content: '**`' + interaction.user.tag + '`**' + " a configuré **`" + client.channels.cache.get(change2).name + "`** comme le salon de ghostping numéro 9." })

                  var embed = new EmbedBuilder()
                    .setColor(`${config.color.color_good}`)
                    .setDescription(`${emoji.tick}${general.response.save_modifications}`)

                  interaction.channel.send({
                    embeds: ([embed])
                  }).then(async (response_save) => {
                    await delay(Number(3) * 1000)
                    response_save.delete()
                  })

                  var embed = new EmbedBuilder()
                    .setColor(`${config.color.color}`)
                    .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
                    .setTitle(`${emoji.settings}${configm.title.text1}`)
                    .setDescription(`${emoji.chanel}${configm.description.text111}` + db.database.get(String('channel_gp1_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text112}` + db.database.get(String('channel_gp2_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text113}` + db.database.get(String('channel_gp3_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text114}` + db.database.get(String('channel_gp4_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text115}` + db.database.get(String('channel_gp5_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text116}` + db.database.get(String('channel_gp6_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text117}` + db.database.get(String('channel_gp7_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text118}` + db.database.get(String('channel_gp8_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text119}` + db.database.get(String('channel_gp9_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text120}` + db.database.get(String('channel_gp10_simple')) + '\n'
                    )

                  interaction.message.edit({ embeds: ([embed]) })

                  console.log(chalk.green("L'utilisateur " + interaction.user.tag + " a configuré le salon de ghostping 9 sur le salon " + client.channels.cache.get(change2).name + "."))

                } catch (err) {

                  console.log(chalk.red(err + ' (SALON RENSEIGNE INTROUVABLE)'))

                  var embed = new EmbedBuilder()
                    .setColor(`${config.color.color_error}`)
                    .setDescription(`${emoji.wrong}${general.error.channel_notfound}`)

                  interaction.channel.send({
                    embeds: ([embed])
                  }).then(async (response_error) => {
                    await delay(Number(3) * 1000)
                    response_error.delete()

                  })



                }

              }
            } else {

              var embed = new EmbedBuilder()
                .setColor(`${config.color.color_error}`)
                .setDescription(`${emoji.wrong}${general.response.nosave_modif}`)
              interaction.channel.send({
                embeds: ([embed])
              }).then(async (response_nosave) => {
                await delay(Number(3) * 1000)
                response_nosave.delete()

              })
            }
          })
        })
      } else {

        db.database.set(String('channel_gp9'), "*`Non défini`*")
        db.database.set(String('channel_gp9_simple'), "*`Non défini`*")

        var embed = new EmbedBuilder()
          .setColor(`${config.color.color}`)
          .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
          .setTitle(`${emoji.settings}${configm.title.text1}`)
          .setDescription(`${emoji.chanel}${configm.description.text111}` + db.database.get(String('channel_gp1_simple')) + '\n'
            + `${emoji.chanel}${configm.description.text112}` + db.database.get(String('channel_gp2_simple')) + '\n'
            + `${emoji.chanel}${configm.description.text113}` + db.database.get(String('channel_gp3_simple')) + '\n'
            + `${emoji.chanel}${configm.description.text114}` + db.database.get(String('channel_gp4_simple')) + '\n'
            + `${emoji.chanel}${configm.description.text115}` + db.database.get(String('channel_gp5_simple')) + '\n'
            + `${emoji.chanel}${configm.description.text116}` + db.database.get(String('channel_gp6_simple')) + '\n'
            + `${emoji.chanel}${configm.description.text117}` + db.database.get(String('channel_gp7_simple')) + '\n'
            + `${emoji.chanel}${configm.description.text118}` + db.database.get(String('channel_gp8_simple')) + '\n'
            + `${emoji.chanel}${configm.description.text119}` + db.database.get(String('channel_gp9_simple')) + '\n'
            + `${emoji.chanel}${configm.description.text120}` + db.database.get(String('channel_gp10_simple')) + '\n'
          )

        interaction.message.edit({ embeds: ([embed]) })

        await interaction.deferUpdate()
      }
    }
  }

  if (interaction.customId === "button_gp_10") {
    if (((interaction.member).permissions.has(PermissionsBitField.Flags.Administrator)) || (interaction.member.id === dev)) {
      if ((db.database.get(String('channel_gp10'))) === "*`Non défini`*") {
        interaction.deferUpdate()
        interaction.channel.send(`${emoji.pen}${configm.description.text121}`).then(async (question) => {
          (interaction.channel).awaitMessages({
            filter: (m) => m.author.id === interaction.member.id,
            time: (500 * 60 * 100),
            max: 1
          }).then(async (collected) => {
            reply = collected.first().content;
            message = collected.first();
            interaction.channel.bulkDelete(1)
            question.delete()
            await delay(Number(1) * 1000)
            if (!(reply === "cancel")) {
              if ((!(((reply) || '').startsWith('<#' || '')))) {


                try {

                  client.channels.cache.get(reply).send({ content: '**`' + interaction.user.tag + '`**' + " a configuré **`" + client.channels.cache.get(reply).name + "`** comme le salon de ghostping numéro 10." })

                  db.database.set(String('channel_gp10'), (reply));
                  db.database.set(String('channel_gp10_simple'), '<#' + (reply) + '>');

                  var embed = new EmbedBuilder()
                    .setColor(`${config.color.color_good}`)
                    .setDescription(`${emoji.tick}${general.response.save_modifications}`)

                  interaction.channel.send({
                    embeds: ([embed])
                  }).then(async (response_save) => {
                    await delay(Number(3) * 1000)
                    response_save.delete()
                  })

                  var embed = new EmbedBuilder()
                    .setColor(`${config.color.color}`)
                    .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
                    .setTitle(`${emoji.settings}${configm.title.text1}`)
                    .setDescription(`${emoji.chanel}${configm.description.text111}` + db.database.get(String('channel_gp1_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text112}` + db.database.get(String('channel_gp2_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text113}` + db.database.get(String('channel_gp3_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text114}` + db.database.get(String('channel_gp4_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text115}` + db.database.get(String('channel_gp5_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text116}` + db.database.get(String('channel_gp6_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text117}` + db.database.get(String('channel_gp7_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text118}` + db.database.get(String('channel_gp8_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text119}` + db.database.get(String('channel_gp9_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text120}` + db.database.get(String('channel_gp10_simple')) + '\n'
                    )

                  interaction.message.edit({ embeds: ([embed]) })

                  console.log(chalk.green("L'utilisateur " + interaction.user.tag + " a configuré le salon de ghostping 10 sur le salon " + client.channels.cache.get(reply).name + "."))

                } catch (err) {

                  console.log(chalk.red(err + ' (SALON RENSEIGNE INTROUVABLE)'))

                  var embed = new EmbedBuilder()
                    .setColor(`${config.color.color_error}`)
                    .setDescription(`${emoji.wrong}${general.error.channel_notfound}`)

                  interaction.channel.send({
                    embeds: ([embed])
                  }).then(async (response_error) => {
                    await delay(Number(3) * 1000)
                    response_error.delete()

                  })



                }

              } else {

                try {

                  let change = reply.replace('<', '')
                  let change1 = change.replace('#', '')
                  let change2 = change1.replace('>', '')

                  db.database.set(String('channel_gp10'), change2)
                  db.database.set(String('channel_gp10_simple'), reply);

                  client.channels.cache.get(change2).send({ content: '**`' + interaction.user.tag + '`**' + " a configuré **`" + client.channels.cache.get(change2).name + "`** comme le salon de ghostping numéro 10." })

                  var embed = new EmbedBuilder()
                    .setColor(`${config.color.color_good}`)
                    .setDescription(`${emoji.tick}${general.response.save_modifications}`)

                  interaction.channel.send({
                    embeds: ([embed])
                  }).then(async (response_save) => {
                    await delay(Number(3) * 1000)
                    response_save.delete()
                  })

                  var embed = new EmbedBuilder()
                    .setColor(`${config.color.color}`)
                    .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
                    .setTitle(`${emoji.settings}${configm.title.text1}`)
                    .setDescription(`${emoji.chanel}${configm.description.text111}` + db.database.get(String('channel_gp1_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text112}` + db.database.get(String('channel_gp2_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text113}` + db.database.get(String('channel_gp3_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text114}` + db.database.get(String('channel_gp4_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text115}` + db.database.get(String('channel_gp5_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text116}` + db.database.get(String('channel_gp6_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text117}` + db.database.get(String('channel_gp7_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text118}` + db.database.get(String('channel_gp8_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text119}` + db.database.get(String('channel_gp9_simple')) + '\n'
                      + `${emoji.chanel}${configm.description.text120}` + db.database.get(String('channel_gp10_simple')) + '\n'
                    )

                  interaction.message.edit({ embeds: ([embed]) })

                  console.log(chalk.green("L'utilisateur " + interaction.user.tag + " a configuré le salon de ghostping 10 sur le salon " + client.channels.cache.get(change2).name + "."))

                } catch (err) {

                  console.log(chalk.red(err + ' (SALON RENSEIGNE INTROUVABLE)'))

                  var embed = new EmbedBuilder()
                    .setColor(`${config.color.color_error}`)
                    .setDescription(`${emoji.wrong}${general.error.channel_notfound}`)

                  interaction.channel.send({
                    embeds: ([embed])
                  }).then(async (response_error) => {
                    await delay(Number(3) * 1000)
                    response_error.delete()

                  })



                }

              }
            } else {

              var embed = new EmbedBuilder()
                .setColor(`${config.color.color_error}`)
                .setDescription(`${emoji.wrong}${general.response.nosave_modif}`)
              interaction.channel.send({
                embeds: ([embed])
              }).then(async (response_nosave) => {
                await delay(Number(3) * 1000)
                response_nosave.delete()

              })
            }
          })
        })
      } else {

        db.database.set(String('channel_gp10'), "*`Non défini`*")
        db.database.set(String('channel_gp10_simple'), "*`Non défini`*")

        var embed = new EmbedBuilder()
          .setColor(`${config.color.color}`)
          .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
          .setTitle(`${emoji.settings}${configm.title.text1}`)
          .setDescription(`${emoji.chanel}${configm.description.text111}` + db.database.get(String('channel_gp1_simple')) + '\n'
            + `${emoji.chanel}${configm.description.text112}` + db.database.get(String('channel_gp2_simple')) + '\n'
            + `${emoji.chanel}${configm.description.text113}` + db.database.get(String('channel_gp3_simple')) + '\n'
            + `${emoji.chanel}${configm.description.text114}` + db.database.get(String('channel_gp4_simple')) + '\n'
            + `${emoji.chanel}${configm.description.text115}` + db.database.get(String('channel_gp5_simple')) + '\n'
            + `${emoji.chanel}${configm.description.text116}` + db.database.get(String('channel_gp6_simple')) + '\n'
            + `${emoji.chanel}${configm.description.text117}` + db.database.get(String('channel_gp7_simple')) + '\n'
            + `${emoji.chanel}${configm.description.text118}` + db.database.get(String('channel_gp8_simple')) + '\n'
            + `${emoji.chanel}${configm.description.text119}` + db.database.get(String('channel_gp9_simple')) + '\n'
            + `${emoji.chanel}${configm.description.text120}` + db.database.get(String('channel_gp10_simple')) + '\n'
          )

        interaction.message.edit({ embeds: ([embed]) })

        await interaction.deferUpdate()
      }
    }
  }

  if (interaction.customId === "config_button_ghostping") {
    if (db.module.get(String('ghostping')) === "on") {
      if (((interaction.member).permissions.has(PermissionsBitField.Flags.Administrator)) || (interaction.member.id === dev)) {

        if (!(db.database.has(String('channel_gp1')))) {
          db.database.set(String('channel_gp1'), '*`Non défini`*')
        }
        if (!(db.database.has(String('channel_gp1_simple')))) {
          db.database.set(String('channel_gp1_simple'), '*`Non défini`*')
        }
        if (!(db.database.has(String('channel_gp2')))) {
          db.database.set(String('channel_gp2'), '*`Non défini`*')
        }
        if (!(db.database.has(String('channel_gp2_simple')))) {
          db.database.set(String('channel_gp2_simple'), '*`Non défini`*')
        }
        if (!(db.database.has(String('channel_gp3')))) {
          db.database.set(String('channel_gp3'), '*`Non défini`*')
        }
        if (!(db.database.has(String('channel_gp3_simple')))) {
          db.database.set(String('channel_gp3_simple'), '*`Non défini`*')
        }
        if (!(db.database.has(String('channel_gp4')))) {
          db.database.set(String('channel_gp4'), '*`Non défini`*')
        }
        if (!(db.database.has(String('channel_gp4_simple')))) {
          db.database.set(String('channel_gp4_simple'), '*`Non défini`*')
        }
        if (!(db.database.has(String('channel_gp5')))) {
          db.database.set(String('channel_gp5'), '*`Non défini`*')
        }
        if (!(db.database.has(String('channel_gp5_simple')))) {
          db.database.set(String('channel_gp5_simple'), '*`Non défini`*')
        }
        if (!(db.database.has(String('channel_gp6')))) {
          db.database.set(String('channel_gp6'), '*`Non défini`*')
        }
        if (!(db.database.has(String('channel_gp6_simple')))) {
          db.database.set(String('channel_gp6_simple'), '*`Non défini`*')
        }
        if (!(db.database.has(String('channel_gp7')))) {
          db.database.set(String('channel_gp7'), '*`Non défini`*')
        }
        if (!(db.database.has(String('channel_gp7_simple')))) {
          db.database.set(String('channel_gp7_simple'), '*`Non défini`*')
        }
        if (!(db.database.has(String('channel_gp8')))) {
          db.database.set(String('channel_gp8'), '*`Non défini`*')
        }
        if (!(db.database.has(String('channel_gp8_simple')))) {
          db.database.set(String('channel_gp8_simple'), '*`Non défini`*')
        }
        if (!(db.database.has(String('channel_gp9')))) {
          db.database.set(String('channel_gp9'), '*`Non défini`*')
        }
        if (!(db.database.has(String('channel_gp9_simple')))) {
          db.database.set(String('channel_gp9_simple'), '*`Non défini`*')
        }
        if (!(db.database.has(String('channel_gp10')))) {
          db.database.set(String('channel_gp10'), '*`Non défini`*')
        }
        if (!(db.database.has(String('channel_gp10_simple')))) {
          db.database.set(String('channel_gp10_simple'), '*`Non défini`*')
        }

        var embed = new EmbedBuilder()
          .setColor(`${config.color.color}`)
          .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
          .setTitle(`${emoji.settings}${configm.title.text1}`)
          .setDescription(`${emoji.chanel}${configm.description.text111}` + db.database.get(String('channel_gp1_simple')) + '\n'
            + `${emoji.chanel}${configm.description.text112}` + db.database.get(String('channel_gp2_simple')) + '\n'
            + `${emoji.chanel}${configm.description.text113}` + db.database.get(String('channel_gp3_simple')) + '\n'
            + `${emoji.chanel}${configm.description.text114}` + db.database.get(String('channel_gp4_simple')) + '\n'
            + `${emoji.chanel}${configm.description.text115}` + db.database.get(String('channel_gp5_simple')) + '\n'
            + `${emoji.chanel}${configm.description.text116}` + db.database.get(String('channel_gp6_simple')) + '\n'
            + `${emoji.chanel}${configm.description.text117}` + db.database.get(String('channel_gp7_simple')) + '\n'
            + `${emoji.chanel}${configm.description.text118}` + db.database.get(String('channel_gp8_simple')) + '\n'
            + `${emoji.chanel}${configm.description.text119}` + db.database.get(String('channel_gp9_simple')) + '\n'
            + `${emoji.chanel}${configm.description.text120}` + db.database.get(String('channel_gp10_simple')) + '\n'
          )

        const button_gp_1 = new ButtonBuilder()
          .setLabel("1")
          .setStyle(ButtonStyle.Secondary)
          .setCustomId("button_gp_1")

        const button_gp_2 = new ButtonBuilder()
          .setLabel("2")
          .setStyle(ButtonStyle.Secondary)
          .setCustomId("button_gp_2")

        const button_gp_3 = new ButtonBuilder()
          .setLabel("3")
          .setStyle(ButtonStyle.Secondary)
          .setCustomId("button_gp_3")

        const button_gp_4 = new ButtonBuilder()
          .setLabel("4")
          .setStyle(ButtonStyle.Secondary)
          .setCustomId("button_gp_4")

        const button_gp_5 = new ButtonBuilder()
          .setLabel("5")
          .setStyle(ButtonStyle.Secondary)
          .setCustomId("button_gp_5")

        const button_gp_6 = new ButtonBuilder()
          .setLabel("6")
          .setStyle(ButtonStyle.Secondary)
          .setCustomId("button_gp_6")

        const button_gp_7 = new ButtonBuilder()
          .setLabel("7")
          .setStyle(ButtonStyle.Secondary)
          .setCustomId("button_gp_7")

        const button_gp_8 = new ButtonBuilder()
          .setLabel("8")
          .setStyle(ButtonStyle.Secondary)
          .setCustomId("button_gp_8")

        const button_gp_9 = new ButtonBuilder()
          .setLabel("9")
          .setStyle(ButtonStyle.Secondary)
          .setCustomId("button_gp_9")

        const button_gp_10 = new ButtonBuilder()
          .setLabel("10")
          .setStyle(ButtonStyle.Secondary)
          .setCustomId("button_gp_10")

        const button_ghostping_return = new ButtonBuilder()
          .setEmoji(`${emoji.return}`)
          .setStyle(ButtonStyle.Primary)
          .setCustomId("buton_config_retour")

        const menu_ghostping_config = new ActionRowBuilder()
          .addComponents(button_gp_1)
          .addComponents(button_gp_2)
          .addComponents(button_gp_3)
          .addComponents(button_gp_4)
          .addComponents(button_gp_5)

        const menu_ghostping_config1 = new ActionRowBuilder()
          .addComponents(button_gp_6)
          .addComponents(button_gp_7)
          .addComponents(button_gp_8)
          .addComponents(button_gp_9)
          .addComponents(button_gp_10)

        const menu_ghostping_config2 = new ActionRowBuilder()
          .addComponents(button_ghostping_return)


        interaction.message.edit({ embeds: ([embed]), components: [menu_ghostping_config, menu_ghostping_config1, menu_ghostping_config2] })

        interaction.deferUpdate()



      }
    } else {
      var embed = new EmbedBuilder()
        .setColor(`${config.color.color_error}`)
        .setDescription(`${emoji.wrong}${general.error.module_activate1}` + ' *`Ghostping`* ' + `${general.error.module_activate2}`)

      interaction.reply({ embeds: ([embed]), ephemeral: true })
    }
  }

  if (interaction.customId === "button_modo_channellogs") {
    if (((interaction.member).permissions.has(PermissionsBitField.Flags.Administrator)) || (interaction.member.id === dev)) {
      interaction.deferUpdate()
      interaction.channel.send(`${emoji.pen}${configm.description.text124}`).then(async (question) => {
        (interaction.channel).awaitMessages({
          filter: (m) => m.author.id === interaction.member.id,
          time: (500 * 60 * 100),
          max: 1
        }).then(async (collected) => {
          reply = collected.first().content;
          message = collected.first();
          interaction.channel.bulkDelete(1)
          question.delete()
          await delay(Number(1) * 1000)
          if (!(reply === "cancel")) {
            if ((!(((reply) || '').startsWith('<#' || '')))) {


              try {

                client.channels.cache.get(reply).send({ content: '**`' + interaction.user.tag + '`**' + " a configuré **`" + client.channels.cache.get(reply).name + "`** comme le salon de logs des sanctions." })

                db.database.set(String('modo_logs_channel'), (reply));
                db.database.set(String('modo_logs_channel_simple'), '<#' + (reply) + '>');

                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color_good}`)
                  .setDescription(`${emoji.tick}${general.response.save_modifications}`)

                interaction.channel.send({
                  embeds: ([embed])
                }).then(async (response_save) => {
                  await delay(Number(3) * 1000)
                  response_save.delete()
                })

                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color}`)
                  .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
                  .setTitle(`${emoji.settings}${configm.title.text1}`)
                  .setDescription(`${emoji.chanel}${configm.description.text122}` + db.database.get(String("modo_logs_channel_simple")) + "\n" +
                    `${emoji.warn}${configm.description.text123}` + db.database.get(String("modo_admin_blame_simple")))

                interaction.message.edit({ embeds: ([embed]) })

                console.log(chalk.green("L'utilisateur " + interaction.user.tag + " a configuré le salon de logs des sanctions sur le salon " + client.channels.cache.get(reply).name + "."))

              } catch (err) {

                console.log(chalk.red(err + ' (SALON RENSEIGNE INTROUVABLE)'))

                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color_error}`)
                  .setDescription(`${emoji.wrong}${general.error.channel_notfound}`)

                interaction.channel.send({
                  embeds: ([embed])
                }).then(async (response_error) => {
                  await delay(Number(3) * 1000)
                  response_error.delete()

                })



              }

            } else {

              try {

                let change = reply.replace('<', '')
                let change1 = change.replace('#', '')
                let change2 = change1.replace('>', '')

                db.database.set(String('modo_logs_channel'), change2)
                db.database.set(String('modo_logs_channel_simple'), reply);

                client.channels.cache.get(change2).send({ content: '**`' + interaction.user.tag + '`**' + " a configuré **`" + client.channels.cache.get(change2).name + "`** comme le salon de logs des sanctions." })

                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color_good}`)
                  .setDescription(`${emoji.tick}${general.response.save_modifications}`)

                interaction.channel.send({
                  embeds: ([embed])
                }).then(async (response_save) => {
                  await delay(Number(3) * 1000)
                  response_save.delete()
                })

                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color}`)
                  .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
                  .setTitle(`${emoji.settings}${configm.title.text1}`)
                  .setDescription(`${emoji.chanel}${configm.description.text122}` + db.database.get(String("modo_logs_channel_simple")) + "\n" +
                    `${emoji.warn}${configm.description.text123}` + db.database.get(String("modo_admin_blame_simple")))

                interaction.message.edit({ embeds: ([embed]) })

                console.log(chalk.green("L'utilisateur " + interaction.user.tag + " a configuré le salon de logs des sanctions sur le salon " + client.channels.cache.get(change2).name + "."))

              } catch (err) {

                console.log(chalk.red(err + ' (SALON RENSEIGNE INTROUVABLE)'))

                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color_error}`)
                  .setDescription(`${emoji.wrong}${general.error.channel_notfound}`)

                interaction.channel.send({
                  embeds: ([embed])
                }).then(async (response_error) => {
                  await delay(Number(3) * 1000)
                  response_error.delete()

                })



              }

            }
          } else {

            var embed = new EmbedBuilder()
              .setColor(`${config.color.color_error}`)
              .setDescription(`${emoji.wrong}${general.response.nosave_modif}`)
            interaction.channel.send({
              embeds: ([embed])
            }).then(async (response_nosave) => {
              await delay(Number(3) * 1000)
              response_nosave.delete()

            })
          }
        })
      })
    }
  }

  if (interaction.customId === "button_modo_blame") {
    if (db.module.get(String('moderation')) === "on") {
      if (((interaction.member).permissions.has(PermissionsBitField.Flags.Administrator)) || (interaction.member.id === dev)) {

        if ((db.database.get(String("modo_admin_blame"))) === "Interdites") {

          db.database.set(String("modo_admin_blame"), "Autorisées")
          db.database.set(String("modo_admin_blame_simple"), "*`Autorisées`*")

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color}`)
            .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
            .setTitle(`${emoji.settings}${configm.title.text1}`)
            .setDescription(`${emoji.chanel}${configm.description.text122}` + db.database.get(String("modo_logs_channel_simple")) + "\n" +
              `${emoji.warn}${configm.description.text123}` + db.database.get(String("modo_admin_blame_simple")))

          interaction.message.edit({ embeds: ([embed]) })

          await interaction.deferUpdate()

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color_good}`)
            .setDescription(`${emoji.tick}${general.response.save_modifications}`)

          interaction.channel.send({
            embeds: ([embed])
          }).then(async (response_save) => {
            await delay(Number(3) * 1000)
            response_save.delete()
          })

        } else {

          db.database.set(String("modo_admin_blame"), "Interdites")
          db.database.set(String("modo_admin_blame_simple"), "*`Interdites`*")

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color}`)
            .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
            .setTitle(`${emoji.settings}${configm.title.text1}`)
            .setDescription(`${emoji.chanel}${configm.description.text122}` + db.database.get(String("modo_logs_channel_simple")) + "\n" +
              `${emoji.warn}${configm.description.text123}` + db.database.get(String("modo_admin_blame_simple")))

          interaction.message.edit({ embeds: ([embed]) })

          await interaction.deferUpdate()

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color_good}`)
            .setDescription(`${emoji.tick}${general.response.save_modifications}`)

          interaction.channel.send({
            embeds: ([embed])
          }).then(async (response_save) => {
            await delay(Number(3) * 1000)
            response_save.delete()
          })

        }


      }
    }
  }

  if (interaction.customId === "config_button_moderation") {
    if (db.module.get(String('moderation')) === "on") {
      if (((interaction.member).permissions.has(PermissionsBitField.Flags.Administrator)) || (interaction.member.id === dev)) {

        if (!(db.database.has(String("modo_logs_channel")))) {
          db.database.set(String("modo_logs_channel"), "*`Non défini`*")
        }
        if (!(db.database.has(String("modo_logs_channel_simple")))) {
          db.database.set(String("modo_logs_channel_simple"), "*`Non défini`*")
        }
        if (!(db.database.has(String("modo_admin_blame")))) {
          db.database.set(String("modo_admin_blame"), "Interdites")
        }
        if (!(db.database.has(String("modo_admin_blame_simple")))) {
          db.database.set(String("modo_admin_blame_simple"), "*`Interdites`*")
        }

        var embed = new EmbedBuilder()
          .setColor(`${config.color.color}`)
          .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
          .setTitle(`${emoji.settings}${configm.title.text1}`)
          .setDescription(`${emoji.chanel}${configm.description.text122}` + db.database.get(String("modo_logs_channel_simple")) + "\n" +
            `${emoji.warn}${configm.description.text123}` + db.database.get(String("modo_admin_blame_simple")))

        const button_modo_channellogs = new ButtonBuilder()
          .setStyle(ButtonStyle.Secondary)
          .setEmoji(`${emoji.chanel}`)
          .setCustomId("button_modo_channellogs")

        const button_modo_blame = new ButtonBuilder()
          .setStyle(ButtonStyle.Secondary)
          .setCustomId("button_modo_blame")
          .setEmoji(`${emoji.warn}`)

        const button_return = new ButtonBuilder()
          .setStyle(ButtonStyle.Primary)
          .setEmoji(`${emoji.return}`)
          .setCustomId("buton_config_retour")

        const menu_modo_config = new ActionRowBuilder()
          .addComponents(button_modo_channellogs)
          .addComponents(button_modo_blame)
          .addComponents(button_return)

        interaction.message.edit({ embeds: ([embed]), components: [menu_modo_config] })

        interaction.deferUpdate()

      }
    } else {
      var embed = new EmbedBuilder()
        .setColor(`${config.color.color_error}`)
        .setDescription(`${emoji.wrong}${general.error.module_activate1}` + ' *`Modération`* ' + `${general.error.module_activate2}`)

      interaction.reply({ embeds: ([embed]), ephemeral: true })
    }
  }

  if (interaction.customId === "config_button_verification") {
    if (db.module.get(String('verification')) === "on") {
      if (((interaction.member).permissions.has(PermissionsBitField.Flags.Administrator)) || (interaction.member.id === dev)) {

        if (!(db.database.has(String('channel_verif')))) {
          db.database.set(String('channel_verif'), '*`Non défini`*')
        }
        if (!(db.database.has(String('channel_logs_verif')))) {
          db.database.set(String('channel_logs_verif'), '*`Non défini`*')
        }
        if (!(db.database.has(String('channel_sanction_verif')))) {
          db.database.set(String('channel_sanction_verif'), '*`Non défini`*')
        }
        if (!(db.database.has(String('rank-accès_verif')))) {
          db.database.set(String('rank-accès_verif'), '*`Non défini`*')
        }
        if (!(db.database.has(String('channel_verif_simple')))) {
          db.database.set(String('channel_verif_simple'), '*`Non défini`*')
        }
        if (!(db.database.has(String('channel_logs_verif_simple')))) {
          db.database.set(String('channel_logs_verif_simple'), '*`Non défini`*')
        }
        if (!(db.database.has(String('channel_sanction_verif_simple')))) {
          db.database.set(String('channel_sanction_verif_simple'), '*`Non défini`*')
        }
        if (!(db.database.has(String('rank-accès_verif_simple')))) {
          db.database.set(String('rank-accès_verif_simple'), '*`Non défini`*')
        }
        if (!(db.database.has(String('title_embed')))) {
          db.database.set(String('title_embed'), interaction.guild.name)
        }
        if (!(db.database.has(String('description_embed')))) {
          db.database.set(String('description_embed'), "🔖 **»** Votre publicité doit **respecter le règlement du serveur ainsi que les ** [\"Therms Of Discord\"](https://discord.com/terms) !\n\n 🔞 **»** **Serveur NSFW interdit**\n\n🗑️ **»** Si vous **quittez le serveur** vos **publicités** seront **supprimées automatiquement** !")
        }
        if (!(db.database.has(String('image_embed')))) {
          db.database.set(String('image_embed'), "")
        }
        if (!(db.database.has(String('color_embed')))) {
          db.database.set(String('color_embed'), "#2f3136")
        }

        var embed = new EmbedBuilder()
          .setColor(`${config.color.color}`)
          .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
          .setTitle(`${emoji.settings}${configm.title.text1}`)
          .setDescription(`${emoji.chanel}${configm.description.text76}` + db.database.get(String('channel_verif_simple')) + '\n'
            + `${emoji.database}${configm.description.text77}` + db.database.get(String('channel_logs_verif_simple')) + '\n'
            + `${emoji.modo}${configm.description.text79}` + db.database.get(String('rank-accès_verif_simple')) + '\n'
            + `${emoji.file}${configm.description.text80}\n\n 🔨 **| Sanctions:**\n - 5 Avertissements = Time Out 1 Jour\n - 10 Avertissements ou plus = Time Out 4 jourss`)

        const button_verif_channel = new ButtonBuilder()
          .setStyle(ButtonStyle.Secondary)
          .setEmoji(`${emoji.chanel}`)
          .setCustomId("button_verif_channel")

        const button_verif_channel_logs = new ButtonBuilder()
          .setStyle(ButtonStyle.Secondary)
          .setEmoji(`${emoji.database}`)
          .setCustomId("button_verif_channel_logs")

        const button_verif_rank = new ButtonBuilder()
          .setStyle(ButtonStyle.Secondary)
          .setEmoji(`${emoji.modo}`)
          .setCustomId("button_verif_rank")

        const button_verif_embed = new ButtonBuilder()
          .setStyle(ButtonStyle.Secondary)
          .setEmoji(`${emoji.file}`)
          .setCustomId("button_verif_embed")

        const button_config_retour = new ButtonBuilder()
          .setCustomId('buton_config_retour')
          .setStyle(ButtonStyle.Primary)
          .setEmoji(`${emoji.return}`)

        const menu_config_verif = new ActionRowBuilder()
          .addComponents(button_verif_channel)
          .addComponents(button_verif_channel_logs)
          .addComponents(button_verif_rank)
          .addComponents(button_verif_embed)

        const menu_config_verif2 = new ActionRowBuilder()
          .addComponents(button_config_retour)

        interaction.message.edit({ embeds: ([embed]), components: [menu_config_verif, menu_config_verif2] })

        interaction.deferUpdate()

      }
    } else {
      var embed = new EmbedBuilder()
        .setColor(`${config.color.color_error}`)
        .setDescription(`${emoji.wrong}${general.error.module_activate1}` + ' *`Vérification`* ' + `${general.error.module_activate2}`)

      interaction.reply({ embeds: ([embed]), ephemeral: true })
    }
  }



  ///////Configuration\\\\\\\\
  if (interaction.commandName === "configuration") {
    if (interaction.guildId === server_id) {
      if (((interaction.member).permissions.has(PermissionsBitField.Flags.Administrator)) || (interaction.member.id === dev)) {

        ///Embed\\\

        var embed = new EmbedBuilder()
          .setColor(`${config.color.color}`)
          .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
          .setTitle(`${emoji.settings}${configm.title.text1}`)
          .setDescription(`${emoji.captcha}${configm.description.text1}` + ' '
            + '\n> ' + `${emoji.moderateur}${configm.description.text2}`
            + '\n> ' + `${emoji.banned}${configm.description.text3}`
            + '\n> ' + `${emoji.level}${configm.description.text4}`
            + '\n> ' + `${emoji.partner}${configm.description.text5}`
            + '\n> ' + `${emoji.ping}${configm.description.text6}`
            + '\n> ' + `${emoji.welcome}${configm.description.text7}`
            + '\n> ' + `${emoji.file}${configm.description.text8}`
            + '\n> ' + `${emoji.verify}${configm.description.text9}`
            + '\n> ' + `${emoji.reward}${configm.description.text10}`
            + '\n> ' + `${emoji.pen}${configm.description.text11}`
            + '\n> ' + `${emoji.link}${configm.description.text12}`
            + '\n> ' + `${emoji.chanel}${configm.description.text13}`
            + '\n> ' + `${emoji.database}${configm.description.text14}`
            + '\n> ' + `${emoji.game}${configm.description.text67}`
            + '\n> ' + `${emoji.list}${configm.description.text73}`
            + '\n> ' + `${emoji.warn}${configm.description.text95}`
            + '\n> ' + `${emoji.recycle}${configm.description.text98}`
          )

        ///Buttons\\\

        const config_button_utilitaire = new ButtonBuilder()
          .setCustomId('config_button_utilitaire')
          .setEmoji(`${emoji.moderateur}`)
          .setStyle(ButtonStyle.Secondary)

        const config_button_moderation = new ButtonBuilder()
          .setCustomId('config_button_moderation')
          .setEmoji(`${emoji.banned}`)
          .setStyle(ButtonStyle.Secondary)

        const config_button_level = new ButtonBuilder()
          .setCustomId('config_button_level')
          .setEmoji(`${emoji.level}`)
          .setStyle(ButtonStyle.Secondary)

        const config_button_partenariat = new ButtonBuilder()
          .setCustomId('config_button_partenariat')
          .setEmoji(`${emoji.partner}`)
          .setStyle(ButtonStyle.Secondary)

        const config_button_ghostping = new ButtonBuilder()
          .setCustomId('config_button_ghostping')
          .setEmoji(`${emoji.ping}`)
          .setStyle(ButtonStyle.Secondary)

        const config_button_welcome = new ButtonBuilder()
          .setCustomId('config_button_welcome')
          .setEmoji(`${emoji.welcome}`)
          .setStyle(ButtonStyle.Secondary)

        const config_button_embed = new ButtonBuilder()
          .setCustomId('config_button_embed')
          .setEmoji(`${emoji.file}`)
          .setStyle(ButtonStyle.Secondary)

        const config_button_verification = new ButtonBuilder()
          .setCustomId('config_button_verification')
          .setEmoji(`${emoji.verify}`)
          .setStyle(ButtonStyle.Secondary)

        const config_button_economie = new ButtonBuilder()
          .setCustomId('config_button_economie')
          .setEmoji(`${emoji.reward}`)
          .setStyle(ButtonStyle.Secondary)

        const config_button_suggestion = new ButtonBuilder()
          .setCustomId('config_button_suggestion')
          .setEmoji(`${emoji.pen}`)
          .setStyle(ButtonStyle.Secondary)

        const config_button_partenariat_mp = new ButtonBuilder()
          .setCustomId('config_button_partenariat_mp')
          .setEmoji(`${emoji.link}`)
          .setStyle(ButtonStyle.Secondary)

        const config_button_sperso = new ButtonBuilder()
          .setCustomId('config_button_sperso')
          .setEmoji(`${emoji.chanel}`)
          .setStyle(ButtonStyle.Secondary)

        const config_button_logs = new ButtonBuilder()
          .setCustomId('config_button_logs')
          .setEmoji(`${emoji.database}`)
          .setStyle(ButtonStyle.Secondary)

        const config_button_game = new ButtonBuilder()
          .setCustomId('config_button_game')
          .setEmoji(`${emoji.game}`)
          .setStyle(ButtonStyle.Secondary)

        const config_button_pub = new ButtonBuilder()
          .setCustomId('config_button_pub')
          .setEmoji(`${emoji.list}`)
          .setStyle(ButtonStyle.Secondary)

        const config_button_report = new ButtonBuilder()
          .setCustomId('config_button_report')
          .setEmoji(`${emoji.warn}`)
          .setStyle(ButtonStyle.Secondary)

        const config_button_invites = new ButtonBuilder()
          .setCustomId('config_button_invites')
          .setEmoji(`${emoji.recycle}`)
          .setStyle(ButtonStyle.Secondary)

        ///Components\\\

        const config_config_menu1 = new ActionRowBuilder()
          .addComponents(config_button_utilitaire)
          .addComponents(config_button_moderation)
          .addComponents(config_button_level)
          .addComponents(config_button_partenariat)
          .addComponents(config_button_ghostping)

        const config_config_menu2 = new ActionRowBuilder()
          .addComponents(config_button_welcome)
          .addComponents(config_button_embed)
          .addComponents(config_button_verification)
          .addComponents(config_button_economie)
          .addComponents(config_button_suggestion)

        const config_config_menu3 = new ActionRowBuilder()
          .addComponents(config_button_partenariat_mp)
          .addComponents(config_button_sperso)
          .addComponents(config_button_logs)
          .addComponents(config_button_game)
          .addComponents(config_button_pub)

        const config_config_menu4 = new ActionRowBuilder()
          .addComponents(config_button_report)
          .addComponents(config_button_invites)

        ///Send embed / components\\\

        interaction.reply({ embeds: ([embed]), components: [config_config_menu1, config_config_menu2, config_config_menu3, config_config_menu4], ephemeral: false })


      } else {

        ////Erreur Perms Admins\\\\

        var embed = new EmbedBuilder()
          .setColor(`${config.color.color_error}`)
          .setDescription(`${emoji.wrong}${general.error.perms_admin}`)

        interaction.reply({
          embeds: ([embed]), ephemeral: true
        })
      }

    } else {

      ////Erreur not same serv\\\\
      var embed = new EmbedBuilder()
        .setColor(`${config.color.color_error}`)
        .setDescription(`${emoji.wrong}${general.error.server_follow}`)

      interaction.reply({ embeds: ([embed]), ephemeral: true })

    }
  }

  //Boutons\\

  if (interaction.customId === "button_config_partenariat_restart") {
    if (((interaction.member).permissions.has(PermissionsBitField.Flags.Administrator)) || (interaction.member.id === dev)) {


      db.database.set(String('partenariat_channel'), 'Non défini')
      db.database.set(String('partenariat_channel_logs'), 'Non défini')
      db.database.set(String('partenariat_notif-part'), 'Non défini')
      db.database.set(String('partenariat_rank-accès'), 'Non défini')
      db.database.set(String('partenariat_rank_add'), 'Non défini')
      db.database.set(String('partenariat_ping'), 'Désactivées')
      db.database.set(String('partenariat_limite'), (String('0')))

      var embed = new EmbedBuilder()
        .setColor(`${config.color.color}`)
        .setTitle(`${emoji.settings}${configm.title.text1}`)
        .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
        .setDescription(`${emoji.chanel}${configm.description.text40}` + db.database.get(String('partenariat_channel_simple')) + '\n'
          + `${emoji.file}${configm.description.text51}` + db.database.get(String('partenariat_channel_logs_simple')) + '\n'
          + `${emoji.captcha}${configm.description.text48}` + db.database.get(String('partenariat_rank-accès_simple')) + '\n'
          + `${emoji.infos}${configm.description.text58}` + db.database.get(String('partenariat_notif-part_simple')) + '\n'
          + `${emoji.diamond}${configm.description.text49}` + db.database.get(String('partenariat_rank_add_simple')) + '\n'
          + `${emoji.ping}${configm.description.text50}` + db.database.get(String('partenariat_ping')) + '`*\n'
          + `${emoji.time}${configm.description.text63}` + db.database.get(String('partenariat_limite')) + '/jour(s)`*')

      interaction.message.edit({ embeds: ([embed]) })

      interaction.deferUpdate()

      var embed = new EmbedBuilder()
        .setColor(`${config.color.color}`)
        .setDescription(`${emoji.bin}${general.response.restart}`)

      await interaction.channel.send({
        embeds: ([embed])
      }).then(async (del) => {
        await delay(Number(3) * 1000)
        del.delete()
      })


    }
  }

  if (interaction.customId === "button_config_partenariat_channel_logs") {
    if (((interaction.member).permissions.has(PermissionsBitField.Flags.Administrator)) || (interaction.member.id === dev)) {
      interaction.deferUpdate()
      interaction.channel.send(`${emoji.pen}${configm.description.text53}`).then(async (question) => {
        (interaction.channel).awaitMessages({
          filter: (m) => m.author.id === interaction.member.id,
          time: (500 * 60 * 100),
          max: 1
        }).then(async (collected) => {
          reply = collected.first().content;
          message = collected.first();
          interaction.channel.bulkDelete(1)
          question.delete()
          await delay(Number(1) * 1000)
          if (!(reply === "cancel")) {
            if ((!(((reply) || '').startsWith('<#' || '')))) {


              try {

                client.channels.cache.get(reply).send({ content: '**`' + interaction.user.tag + '`**' + " a configuré **`" + client.channels.cache.get(reply).name + "`** comme le salon de logs des partenariats." })

                db.database.set(String('partenariat_channel_logs'), (reply));
                db.database.set(String('partenariat_channel_logs_simple'), '<#' + (reply) + '>');

                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color_good}`)
                  .setDescription(`${emoji.tick}${general.response.save_modifications}`)

                interaction.channel.send({
                  embeds: ([embed])
                }).then(async (response_save) => {
                  await delay(Number(3) * 1000)
                  response_save.delete()
                })

                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color}`)
                  .setTitle(`${emoji.settings}${configm.title.text1}`)
                  .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
                  .setDescription(`${emoji.chanel}${configm.description.text40}` + db.database.get(String('partenariat_channel_simple')) + '\n'
                    + `${emoji.file}${configm.description.text51}` + db.database.get(String('partenariat_channel_logs_simple')) + '\n'
                    + `${emoji.captcha}${configm.description.text48}` + db.database.get(String('partenariat_rank-accès_simple')) + '\n'
                    + `${emoji.infos}${configm.description.text58}` + db.database.get(String('partenariat_notif-part_simple')) + '\n'
                    + `${emoji.diamond}${configm.description.text49}` + db.database.get(String('partenariat_rank_add_simple')) + '\n'
                    + `${emoji.ping}${configm.description.text50}` + db.database.get(String('partenariat_ping')) + '`*\n'
                    + `${emoji.time}${configm.description.text63}` + db.database.get(String('partenariat_limite')) + '/jour(s)`*')

                interaction.message.edit({ embeds: ([embed]) })

                console.log(chalk.green("L'utilisateur " + interaction.user.tag + " a configuré le salon de logs des partenariats sur le salon " + client.channels.cache.get(reply).name + "."))

              } catch (err) {

                console.log(chalk.red(err + ' (SALON RENSEIGNE INTROUVABLE)'))

                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color_error}`)
                  .setDescription(`${emoji.wrong}${general.error.channel_notfound}`)

                interaction.channel.send({
                  embeds: ([embed])
                }).then(async (response_error) => {
                  await delay(Number(3) * 1000)
                  response_error.delete()

                })



              }

            } else {

              try {

                let change = reply.replace('<', '')
                let change1 = change.replace('#', '')
                let change2 = change1.replace('>', '')

                db.database.set(String('partenariat_channel_logs'), change2)
                db.database.set(String('partenariat_channel_logs_simple'), reply);

                client.channels.cache.get(change2).send({ content: '**`' + interaction.user.tag + '`**' + " a configuré **`" + client.channels.cache.get(change2).name + "`** comme le salon de logs des partenariats." })

                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color_good}`)
                  .setDescription(`${emoji.tick}${general.response.save_modifications}`)

                interaction.channel.send({
                  embeds: ([embed])
                }).then(async (response_save) => {
                  await delay(Number(3) * 1000)
                  response_save.delete()
                })

                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color}`)
                  .setTitle(`${emoji.settings}${configm.title.text1}`)
                  .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
                  .setDescription(`${emoji.chanel}${configm.description.text40}` + db.database.get(String('partenariat_channel_simple')) + '\n'
                    + `${emoji.file}${configm.description.text51}` + db.database.get(String('partenariat_channel_logs_simple')) + '\n'
                    + `${emoji.captcha}${configm.description.text48}` + db.database.get(String('partenariat_rank-accès_simple')) + '\n'
                    + `${emoji.infos}${configm.description.text58}` + db.database.get(String('partenariat_notif-part_simple')) + '\n'
                    + `${emoji.diamond}${configm.description.text49}` + db.database.get(String('partenariat_rank_add_simple')) + '\n'
                    + `${emoji.ping}${configm.description.text50}` + db.database.get(String('partenariat_ping')) + '`*\n'
                    + `${emoji.time}${configm.description.text63}` + db.database.get(String('partenariat_limite')) + '/jour(s)`*')

                interaction.message.edit({ embeds: ([embed]) })

                console.log(chalk.green("L'utilisateur " + interaction.user.tag + " a configuré le salon de logs des partenariats sur le salon " + client.channels.cache.get(change2).name + "."))

              } catch (err) {

                console.log(chalk.red(err + ' (SALON RENSEIGNE INTROUVABLE)'))

                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color_error}`)
                  .setDescription(`${emoji.wrong}${general.error.channel_notfound}`)

                interaction.channel.send({
                  embeds: ([embed])
                }).then(async (response_error) => {
                  await delay(Number(3) * 1000)
                  response_error.delete()

                })



              }

            }
          } else {

            var embed = new EmbedBuilder()
              .setColor(`${config.color.color_error}`)
              .setDescription(`${emoji.wrong}${general.response.nosave_modif}`)
            interaction.channel.send({
              embeds: ([embed])
            }).then(async (response_nosave) => {
              await delay(Number(3) * 1000)
              response_nosave.delete()

            })
          }
        })
      })
    }
  }

  if (interaction.customId === "button_config_partenariat_rank_add") {
    if (((interaction.member).permissions.has(PermissionsBitField.Flags.Administrator)) || (interaction.member.id === dev)) {
      interaction.deferUpdate()
      interaction.channel.send(`${emoji.pen}${configm.description.text66}`).then(async (question) => {
        (interaction.channel).awaitMessages({
          filter: (m) => m.author.id === interaction.member.id,
          time: (500 * 60 * 100),
          max: 1
        }).then(async (collected) => {
          reply = collected.first().content;
          message = collected.first();
          interaction.channel.bulkDelete(1)
          question.delete()
          await delay(Number(1) * 1000)
          if (!(reply === "cancel")) {
            if ((!(((reply) || '').startsWith('<@' || '')))) {


              try {

                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color_good}`)
                  .setDescription(`${emoji.tick}${configm.description.text55}` + ((interaction.guild).roles.cache.get(reply)).name + `${configm.description.text57}`)

                interaction.channel.send({
                  embeds: ([embed])
                }).then(async (response_save) => {
                  await delay(Number(3) * 1000)
                  response_save.delete()
                })

                await db.database.set(String('partenariat_rank_add'), (reply));
                await db.database.set(String('partenariat_rank_add_simple'), '<@' + (reply) + '>');

                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color}`)
                  .setTitle(`${emoji.settings}${configm.title.text1}`)
                  .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
                  .setDescription(`${emoji.chanel}${configm.description.text40}` + db.database.get(String('partenariat_channel_simple')) + '\n'
                    + `${emoji.file}${configm.description.text51}` + db.database.get(String('partenariat_channel_logs_simple')) + '\n'
                    + `${emoji.captcha}${configm.description.text48}` + db.database.get(String('partenariat_rank-accès_simple')) + '\n'
                    + `${emoji.infos}${configm.description.text58}` + db.database.get(String('partenariat_notif-part_simple')) + '\n'
                    + `${emoji.diamond}${configm.description.text49}` + db.database.get(String('partenariat_rank_add_simple')) + '\n'
                    + `${emoji.ping}${configm.description.text50}` + db.database.get(String('partenariat_ping')) + '`*\n'
                    + `${emoji.time}${configm.description.text63}` + db.database.get(String('partenariat_limite')) + '/jour(s)`*')

                await interaction.message.edit({ embeds: ([embed]) })

                console.log(chalk.green("L'utilisateur " + interaction.user.tag + " a configuré le rôle à ajouter aux utilisateur une fois le partenariat terminé " + ((interaction.guild).roles.cache.get(reply)).name + "."))

              } catch (err) {

                console.log(chalk.red(err + ' (SALON RENSEIGNE INTROUVABLE)'))

                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color_error}`)
                  .setDescription(`${emoji.wrong}${general.error.role_notfound}`)

                interaction.channel.send({
                  embeds: ([embed])
                }).then(async (response_error) => {
                  await delay(Number(3) * 1000)
                  response_error.delete()

                })



              }

            } else {

              try {

                let change = reply.replace('<', '')
                let change1 = change.replace('@', '')
                let change3 = change1.replace('&', '')
                let change2 = change3.replace('>', '')

                db.database.set(String('partenariat_rank_add'), change2)
                db.database.set(String('partenariat_rank_add_simple'), reply);

                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color_good}`)
                  .setDescription(`${emoji.tick}${configm.description.text55}` + ((interaction.guild).roles.cache.get(change2)).name + `${configm.description.text57}`)

                interaction.channel.send({
                  embeds: ([embed])
                }).then(async (response_save) => {
                  await delay(Number(3) * 1000)
                  response_save.delete()
                })


                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color}`)
                  .setTitle(`${emoji.settings}${configm.title.text1}`)
                  .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
                  .setDescription(`${emoji.chanel}${configm.description.text40}` + db.database.get(String('partenariat_channel_simple')) + '\n'
                    + `${emoji.file}${configm.description.text51}` + db.database.get(String('partenariat_channel_logs_simple')) + '\n'
                    + `${emoji.captcha}${configm.description.text48}` + db.database.get(String('partenariat_rank-accès_simple')) + '\n'
                    + `${emoji.infos}${configm.description.text58}` + db.database.get(String('partenariat_notif-part_simple')) + '\n'
                    + `${emoji.diamond}${configm.description.text49}` + db.database.get(String('partenariat_rank_add_simple')) + '\n'
                    + `${emoji.ping}${configm.description.text50}` + db.database.get(String('partenariat_ping')) + '`*\n'
                    + `${emoji.time}${configm.description.text63}` + db.database.get(String('partenariat_limite')) + '/jour(s)`*')

                interaction.message.edit({ embeds: ([embed]) })

                console.log(chalk.green("L'utilisateur " + interaction.user.tag + " a configuré le rôle à ajouter aux utilisateur une fois le partenariat terminé " + ((interaction.guild).roles.cache.get(change2)).name + "."))

              } catch (err) {

                console.log(chalk.red(err + ' (SALON RENSEIGNE INTROUVABLE)'))

                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color_error}`)
                  .setDescription(`${emoji.wrong}${general.error.role_notfound}`)

                interaction.channel.send({
                  embeds: ([embed])
                }).then(async (response_error) => {
                  await delay(Number(3) * 1000)
                  response_error.delete()

                })



              }
            }
          } else {

            var embed = new EmbedBuilder()
              .setColor(`${config.color.color_error}`)
              .setDescription(`${emoji.wrong}${general.response.nosave_modif}`)
            interaction.channel.send({
              embeds: ([embed])
            }).then(async (response_nosave) => {
              await delay(Number(3) * 1000)
              response_nosave.delete()

            })
          }
        })
      })
    }
  }

  if (interaction.customId === "button_config_partenariat_rank_perm") {
    if (((interaction.member).permissions.has(PermissionsBitField.Flags.Administrator)) || (interaction.member.id === dev)) {
      interaction.deferUpdate()
      interaction.channel.send(`${emoji.pen}${configm.description.text54}`).then(async (question) => {
        (interaction.channel).awaitMessages({
          filter: (m) => m.author.id === interaction.member.id,
          time: (500 * 60 * 1000),
          max: 1
        }).then(async (collected) => {
          reply = collected.first().content;
          message = collected.first();
          interaction.channel.bulkDelete(1)
          question.delete()
          await delay(Number(1) * 1000)
          if (!(reply === "cancel")) {
            if ((!(((reply) || '').startsWith('<@' || '')))) {


              try {

                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color_good}`)
                  .setDescription(`${emoji.tick}${configm.description.text55}` + ((interaction.guild).roles.cache.get(reply)).name + `${configm.description.text56}`)

                interaction.channel.send({
                  embeds: ([embed])
                }).then(async (response_save) => {
                  await delay(Number(3) * 1000)
                  response_save.delete()
                })

                await db.database.set(String('partenariat_rank-accès'), (reply));
                await db.database.set(String('partenariat_rank-accès_simple'), '<@' + (reply) + '>');

                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color}`)
                  .setTitle(`${emoji.settings}${configm.title.text1}`)
                  .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
                  .setDescription(`${emoji.chanel}${configm.description.text40}` + db.database.get(String('partenariat_channel_simple')) + '\n'
                    + `${emoji.file}${configm.description.text51}` + db.database.get(String('partenariat_channel_logs_simple')) + '\n'
                    + `${emoji.captcha}${configm.description.text48}` + db.database.get(String('partenariat_rank-accès_simple')) + '\n'
                    + `${emoji.infos}${configm.description.text58}` + db.database.get(String('partenariat_notif-part_simple')) + '\n'
                    + `${emoji.diamond}${configm.description.text49}` + db.database.get(String('partenariat_rank_add_simple')) + '\n'
                    + `${emoji.ping}${configm.description.text50}` + db.database.get(String('partenariat_ping')) + '`*\n'
                    + `${emoji.time}${configm.description.text63}` + db.database.get(String('partenariat_limite')) + '/jour(s)`*')

                await interaction.message.edit({ embeds: ([embed]) })

                console.log(chalk.green("L'utilisateur " + interaction.user.tag + " a configuré le rôle d'accès aux partenariats sur le rôle " + ((interaction.guild).roles.cache.get(reply)).name + "."))

              } catch (err) {

                console.log(chalk.red(err + ' (SALON RENSEIGNE INTROUVABLE)'))

                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color_error}`)
                  .setDescription(`${emoji.wrong}${general.error.role_notfound}`)

                interaction.channel.send({
                  embeds: ([embed])
                }).then(async (response_error) => {
                  await delay(Number(3) * 1000)
                  response_error.delete()

                })



              }

            } else {

              try {

                let change = reply.replace('<', '')
                let change1 = change.replace('@', '')
                let change3 = change1.replace('&', '')
                let change2 = change3.replace('>', '')

                db.database.set(String('partenariat_rank-accès'), change2)
                db.database.set(String('partenariat_rank-accès_simple'), reply);

                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color_good}`)
                  .setDescription(`${emoji.tick}${configm.description.text55}` + ((interaction.guild).roles.cache.get(change2)).name + `${configm.description.text56}`)

                interaction.channel.send({
                  embeds: ([embed])
                }).then(async (response_save) => {
                  await delay(Number(3) * 1000)
                  response_save.delete()
                })

                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color}`)
                  .setTitle(`${emoji.settings}${configm.title.text1}`)
                  .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
                  .setDescription(`${emoji.chanel}${configm.description.text40}` + db.database.get(String('partenariat_channel_simple')) + '\n'
                    + `${emoji.file}${configm.description.text51}` + db.database.get(String('partenariat_channel_logs_simple')) + '\n'
                    + `${emoji.captcha}${configm.description.text48}` + db.database.get(String('partenariat_rank-accès_simple')) + '\n'
                    + `${emoji.infos}${configm.description.text58}` + db.database.get(String('partenariat_notif-part_simple')) + '\n'
                    + `${emoji.diamond}${configm.description.text49}` + db.database.get(String('partenariat_rank_add_simple')) + '\n'
                    + `${emoji.ping}${configm.description.text50}` + db.database.get(String('partenariat_ping')) + '`*\n'
                    + `${emoji.time}${configm.description.text63}` + db.database.get(String('partenariat_limite')) + '/jour(s)`*')

                interaction.message.edit({ embeds: ([embed]) })

                console.log(chalk.green("L'utilisateur " + interaction.user.tag + " a configuré le rôle d'accès aux partenariats sur le rôle " + ((interaction.guild).roles.cache.get(change2)).name + "."))

              } catch (err) {

                console.log(chalk.red(err + ' (SALON RENSEIGNE INTROUVABLE)'))

                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color_error}`)
                  .setDescription(`${emoji.wrong}${general.error.channel_notfound}`)

                interaction.channel.send({
                  embeds: ([embed])
                }).then(async (response_error) => {
                  await delay(Number(3) * 1000)
                  response_error.delete()

                })



              }
            }
          } else {

            var embed = new EmbedBuilder()
              .setColor(`${config.color.color_error}`)
              .setDescription(`${emoji.wrong}${general.response.nosave_modif}`)
            interaction.channel.send({
              embeds: ([embed])
            }).then(async (response_nosave) => {
              await delay(Number(3) * 1000)
              response_nosave.delete()

            })
          }
        })

      })
    }
  }

  if (interaction.customId === "button_config_partenariat_notif-part") {
    if (((interaction.member).permissions.has(PermissionsBitField.Flags.Administrator)) || (interaction.member.id === dev)) {
      interaction.deferUpdate()
      interaction.channel.send(`${emoji.pen}${configm.description.text60}`).then(async (question) => {
        (interaction.channel).awaitMessages({
          filter: (m) => m.author.id === interaction.member.id,
          time: (500 * 60 * 100),
          max: 1
        }).then(async (collected) => {
          reply = collected.first().content;
          message = collected.first();
          interaction.channel.bulkDelete(1)
          question.delete()
          await delay(Number(1) * 1000)
          if (!(reply === "cancel")) {
            if ((!(((reply) || '').startsWith('<@' || '')))) {


              try {

                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color_good}`)
                  .setDescription(`${emoji.tick}${configm.description.text55}` + ((interaction.guild).roles.cache.get(reply)).name + `${configm.description.text59}`)

                interaction.channel.send({
                  embeds: ([embed])
                }).then(async (response_save) => {
                  await delay(Number(3) * 1000)
                  response_save.delete()
                })

                await db.database.set(String('partenariat_notif-part'), (reply));
                await db.database.set(String('partenariat_notif-part_simple'), '<@' + (reply) + '>');

                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color}`)
                  .setTitle(`${emoji.settings}${configm.title.text1}`)
                  .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
                  .setDescription(`${emoji.chanel}${configm.description.text40}` + db.database.get(String('partenariat_channel_simple')) + '\n'
                    + `${emoji.file}${configm.description.text51}` + db.database.get(String('partenariat_channel_logs_simple')) + '\n'
                    + `${emoji.captcha}${configm.description.text48}` + db.database.get(String('partenariat_rank-accès_simple')) + '\n'
                    + `${emoji.infos}${configm.description.text58}` + db.database.get(String('partenariat_notif-part_simple')) + '\n'
                    + `${emoji.diamond}${configm.description.text49}` + db.database.get(String('partenariat_rank_add_simple')) + '\n'
                    + `${emoji.ping}${configm.description.text50}` + db.database.get(String('partenariat_ping')) + '`*\n'
                    + `${emoji.time}${configm.description.text63}` + db.database.get(String('partenariat_limite')) + '/jour(s)`*')

                await interaction.message.edit({ embeds: ([embed]) })

                console.log(chalk.green("L'utilisateur " + interaction.user.tag + " a configuré le rôle de notification partenariat sur le rôle " + ((interaction.guild).roles.cache.get(reply)).name + "."))

              } catch (err) {

                console.log(chalk.red(err + ' (SALON RENSEIGNE INTROUVABLE)'))

                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color_error}`)
                  .setDescription(`${emoji.wrong}${general.error.role_notfound}`)

                interaction.channel.send({
                  embeds: ([embed])
                }).then(async (response_error) => {
                  await delay(Number(3) * 1000)
                  response_error.delete()

                })



              }

            } else {

              try {

                let change = reply.replace('<', '')
                let change1 = change.replace('@', '')
                let change3 = change1.replace('&', '')
                let change2 = change3.replace('>', '')

                db.database.set(String('partenariat_notif-part'), change2)
                db.database.set(String('partenariat_notif-part_simple'), reply);

                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color_good}`)
                  .setDescription(`${emoji.tick}${configm.description.text55}` + ((interaction.guild).roles.cache.get(change2)).name + `${configm.description.text59}`)

                interaction.channel.send({
                  embeds: ([embed])
                }).then(async (response_save) => {
                  await delay(Number(3) * 1000)
                  response_save.delete()
                })

                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color}`)
                  .setTitle(`${emoji.settings}${configm.title.text1}`)
                  .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
                  .setDescription(`${emoji.chanel}${configm.description.text40}` + db.database.get(String('partenariat_channel_simple')) + '\n'
                    + `${emoji.file}${configm.description.text51}` + db.database.get(String('partenariat_channel_logs_simple')) + '\n'
                    + `${emoji.captcha}${configm.description.text48}` + db.database.get(String('partenariat_rank-accès_simple')) + '\n'
                    + `${emoji.infos}${configm.description.text58}` + db.database.get(String('partenariat_notif-part_simple')) + '\n'
                    + `${emoji.diamond}${configm.description.text49}` + db.database.get(String('partenariat_rank_add_simple')) + '\n'
                    + `${emoji.ping}${configm.description.text50}` + db.database.get(String('partenariat_ping')) + '`*\n'
                    + `${emoji.time}${configm.description.text63}` + db.database.get(String('partenariat_limite')) + '/jour(s)`*')

                interaction.message.edit({ embeds: ([embed]) })

                console.log(chalk.green("L'utilisateur " + interaction.user.tag + " a configuré le rôle de notification partenariat sur le rôle " + ((interaction.guild).roles.cache.get(change2)).name + "."))

              } catch (err) {

                console.log(chalk.red(err + ' (SALON RENSEIGNE INTROUVABLE)'))

                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color_error}`)
                  .setDescription(`${emoji.wrong}${general.error.channel_notfound}`)

                interaction.channel.send({
                  embeds: ([embed])
                }).then(async (response_error) => {
                  await delay(Number(3) * 1000)
                  response_error.delete()

                })



              }
            }
          } else {

            var embed = new EmbedBuilder()
              .setColor(`${config.color.color_error}`)
              .setDescription(`${emoji.wrong}${general.response.nosave_modif}`)
            interaction.channel.send({
              embeds: ([embed])
            }).then(async (response_nosave) => {
              await delay(Number(3) * 1000)
              response_nosave.delete()

            })
          }
        })
      })
    }
  }

  if (interaction.customId === "button_config_partenariat_ping") {
    if (((interaction.member).permissions.has(PermissionsBitField.Flags.Administrator)) || (interaction.member.id === dev)) {
      if (db.database.get(String('partenariat_ping')) === "Désactivées") {

        db.database.set(String('partenariat_ping'), 'Activées')

        var embed = new EmbedBuilder()
          .setColor(`${config.color.color}`)
          .setTitle(`${emoji.settings}${configm.title.text1}`)
          .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
          .setDescription(`${emoji.chanel}${configm.description.text40}` + db.database.get(String('partenariat_channel_simple')) + '\n'
            + `${emoji.file}${configm.description.text51}` + db.database.get(String('partenariat_channel_logs_simple')) + '\n'
            + `${emoji.captcha}${configm.description.text48}` + db.database.get(String('partenariat_rank-accès_simple')) + '\n'
            + `${emoji.infos}${configm.description.text58}` + db.database.get(String('partenariat_notif-part_simple')) + '\n'
            + `${emoji.diamond}${configm.description.text49}` + db.database.get(String('partenariat_rank_add_simple')) + '\n'
            + `${emoji.ping}${configm.description.text50}` + db.database.get(String('partenariat_ping')) + '`*\n'
            + `${emoji.time}${configm.description.text63}` + db.database.get(String('partenariat_limite')) + '/jour(s)`*')

        interaction.message.edit({ embeds: ([embed]) })

        var embed = new EmbedBuilder()
          .setColor(`${config.color.color_good}`)
          .setDescription(`${emoji.tick}${configm.description.text61}`)

        interaction.channel.send({
          embeds: ([embed]), ephemeral: true
        }).then(async (message_delete) => {

          await delay(Number(3) * 1000)
          message_delete.delete()

        })

        await interaction.deferUpdate()

      } else {

        db.database.set(String('partenariat_ping'), "Désactivées")

        var embed = new EmbedBuilder()
          .setColor(`${config.color.color}`)
          .setTitle(`${emoji.settings}${configm.title.text1}`)
          .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
          .setDescription(`${emoji.chanel}${configm.description.text40}` + db.database.get(String('partenariat_channel_simple')) + '\n'
            + `${emoji.file}${configm.description.text51}` + db.database.get(String('partenariat_channel_logs_simple')) + '\n'
            + `${emoji.captcha}${configm.description.text48}` + db.database.get(String('partenariat_rank-accès_simple')) + '\n'
            + `${emoji.infos}${configm.description.text58}` + db.database.get(String('partenariat_notif-part_simple')) + '\n'
            + `${emoji.diamond}${configm.description.text49}` + db.database.get(String('partenariat_rank_add_simple')) + '\n'
            + `${emoji.ping}${configm.description.text50}` + db.database.get(String('partenariat_ping')) + '`*\n'
            + `${emoji.time}${configm.description.text63}` + db.database.get(String('partenariat_limite')) + '/jour(s)`*')

        interaction.message.edit({ embeds: ([embed]) })

        var embed = new EmbedBuilder()
          .setColor(`${config.color.color_error}`)
          .setDescription(`${emoji.wrong}${configm.description.text62}`)

        interaction.channel.send({
          embeds: ([embed]), ephemeral: true
        }).then(async (message_delete) => {

          await delay(Number(3) * 1000)
          message_delete.delete()

        })

        await interaction.deferUpdate()

      }

    }

  }

  if (interaction.customId === "button_config_partenariat_channel") {
    if (((interaction.member).permissions.has(PermissionsBitField.Flags.Administrator)) || (interaction.member.id === dev)) {
      interaction.deferUpdate()
      interaction.channel.send(`${emoji.pen}${configm.description.text52}`).then(async (question) => {
        (interaction.channel).awaitMessages({
          filter: (m) => m.author.id === interaction.member.id,
          time: (500 * 60 * 1000),
          max: 1
        }).then(async (collected) => {
          reply = collected.first().content;
          message = collected.first();
          interaction.channel.bulkDelete(1)
          question.delete()
          await delay(Number(1) * 1000)
          if (!(reply === "cancel")) {
            if ((!(((reply) || '').startsWith('<#' || '')))) {


              try {

                client.channels.cache.get(reply).send({ content: '**`' + interaction.user.tag + '`**' + " a configuré **`" + client.channels.cache.get(reply).name + "`** comme le salon de partenariat." })

                db.database.set(String('partenariat_channel'), (reply));
                db.database.set(String('partenariat_channel_simple'), '<#' + (reply) + '>');

                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color_good}`)
                  .setDescription(`${emoji.tick}${general.response.save_modifications}`)

                interaction.channel.send({
                  embeds: ([embed])
                }).then(async (response_save) => {
                  await delay(Number(3) * 1000)
                  response_save.delete()
                })

                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color}`)
                  .setTitle(`${emoji.settings}${configm.title.text1}`)
                  .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
                  .setDescription(`${emoji.chanel}${configm.description.text40}` + db.database.get(String('partenariat_channel_simple')) + '\n'
                    + `${emoji.file}${configm.description.text51}` + db.database.get(String('partenariat_channel_logs_simple')) + '\n'
                    + `${emoji.captcha}${configm.description.text48}` + db.database.get(String('partenariat_rank-accès_simple')) + '\n'
                    + `${emoji.infos}${configm.description.text58}` + db.database.get(String('partenariat_notif-part_simple')) + '\n'
                    + `${emoji.diamond}${configm.description.text49}` + db.database.get(String('partenariat_rank_add_simple')) + '\n'
                    + `${emoji.ping}${configm.description.text50}` + db.database.get(String('partenariat_ping')) + '`*\n'
                    + `${emoji.time}${configm.description.text63}` + db.database.get(String('partenariat_limite')) + '/jour(s)`*')

                interaction.message.edit({ embeds: ([embed]) })

                console.log(chalk.green("L'utilisateur " + interaction.user.tag + " a configuré le salon de partenariat sur le salon " + client.channels.cache.get(reply).name + "."))

              } catch (err) {

                console.log(chalk.red(err + ' (SALON RENSEIGNE INTROUVABLE)'))

                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color_error}`)
                  .setDescription(`${emoji.wrong}${general.error.channel_notfound}`)

                interaction.channel.send({
                  embeds: ([embed])
                }).then(async (response_error) => {
                  await delay(Number(3) * 1000)
                  response_error.delete()

                })



              }

            } else {

              try {

                let change = reply.replace('<', '')
                let change1 = change.replace('#', '')
                let change2 = change1.replace('>', '')

                db.database.set(String('partenariat_channel'), change2)
                db.database.set(String('partenariat_channel_simple'), (reply));

                client.channels.cache.get(change2).send({ content: '**`' + interaction.user.tag + '`**' + " a configuré **`" + client.channels.cache.get(change2).name + "`** comme le salon de partenariat." })

                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color_good}`)
                  .setDescription(`${emoji.tick}${general.response.save_modifications}`)

                interaction.channel.send({
                  embeds: ([embed])
                }).then(async (response_save) => {
                  await delay(Number(3) * 1000)
                  response_save.delete()
                })

                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color}`)
                  .setTitle(`${emoji.settings}${configm.title.text1}`)
                  .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
                  .setDescription(`${emoji.chanel}${configm.description.text40}` + db.database.get(String('partenariat_channel_simple')) + '\n'
                    + `${emoji.file}${configm.description.text51}` + db.database.get(String('partenariat_channel_logs_simple')) + '\n'
                    + `${emoji.captcha}${configm.description.text48}` + db.database.get(String('partenariat_rank-accès_simple')) + '\n'
                    + `${emoji.infos}${configm.description.text58}` + db.database.get(String('partenariat_notif-part_simple')) + '\n'
                    + `${emoji.diamond}${configm.description.text49}` + db.database.get(String('partenariat_rank_add_simple')) + '\n'
                    + `${emoji.ping}${configm.description.text50}` + db.database.get(String('partenariat_ping')) + '`*\n'
                    + `${emoji.time}${configm.description.text63}` + db.database.get(String('partenariat_limite')) + '/jour(s)`*')

                interaction.message.edit({ embeds: ([embed]) })

                console.log(chalk.green("L'utilisateur " + interaction.user.tag + " a configuré le salon de partenariat sur le salon " + client.channels.cache.get(change2).name + "."))

              } catch (err) {

                console.log(chalk.red(err + ' (SALON RENSEIGNE INTROUVABLE)'))

                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color_error}`)
                  .setDescription(`${emoji.wrong}${general.error.channel_notfound}`)

                interaction.channel.send({
                  embeds: ([embed])
                }).then(async (response_error) => {
                  await delay(Number(3) * 1000)
                  response_error.delete()

                })



              }
            }
          } else {

            var embed = new EmbedBuilder()
              .setColor(`${config.color.color_error}`)
              .setDescription(`${emoji.wrong}${general.response.nosave_modif}`)
            interaction.channel.send({
              embeds: ([embed])
            }).then(async (response_nosave) => {
              await delay(Number(3) * 1000)
              response_nosave.delete()

            })
          }
        })
      })
    }
  }

  if (interaction.customId === "button_add_1_part_limite") {
    if (db.module.get(String('partenariat')) === "on") {
      if (((interaction.member).permissions.has(PermissionsBitField.Flags.Administrator)) || (interaction.member.id === dev)) {

        db.database.add(String('partenariat_limite'), 1)

        var embed = new EmbedBuilder()
          .setColor(`${config.color.color}`)
          .setTitle(`${emoji.settings}${configm.title.text1}`)
          .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
          .setDescription(`${emoji.chanel}${configm.description.text40}` + db.database.get(String('partenariat_channel_simple')) + '\n'
            + `${emoji.file}${configm.description.text51}` + db.database.get(String('partenariat_channel_logs_simple')) + '\n'
            + `${emoji.captcha}${configm.description.text48}` + db.database.get(String('partenariat_rank-accès_simple')) + '\n'
            + `${emoji.infos}${configm.description.text58}` + db.database.get(String('partenariat_notif-part_simple')) + '\n'
            + `${emoji.diamond}${configm.description.text49}` + db.database.get(String('partenariat_rank_add_simple')) + '\n'
            + `${emoji.ping}${configm.description.text50}` + db.database.get(String('partenariat_ping')) + '`*\n'
            + `${emoji.time}${configm.description.text63}` + db.database.get(String('partenariat_limite')) + '/jour(s)`*')

        interaction.message.edit({ embeds: ([embed]) })

        await interaction.deferUpdate()

        var embed = new EmbedBuilder()
          .setColor(`${config.color.color_good}`)
          .setDescription(`${emoji.tick}${general.response.add_1}`)

        interaction.channel.send({
          embeds: ([embed])
        }).then(async (response_save) => {
          await delay(Number(3) * 1000)
          response_save.delete()
        })



      }
    }
  }

  if (interaction.customId === "button_add_5_part_limite") {
    if (db.module.get(String('partenariat')) === "on") {
      if (((interaction.member).permissions.has(PermissionsBitField.Flags.Administrator)) || (interaction.member.id === dev)) {

        db.database.add(String('partenariat_limite'), 5)

        var embed = new EmbedBuilder()
          .setColor(`${config.color.color}`)
          .setTitle(`${emoji.settings}${configm.title.text1}`)
          .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
          .setDescription(`${emoji.chanel}${configm.description.text40}` + db.database.get(String('partenariat_channel_simple')) + '\n'
            + `${emoji.file}${configm.description.text51}` + db.database.get(String('partenariat_channel_logs_simple')) + '\n'
            + `${emoji.captcha}${configm.description.text48}` + db.database.get(String('partenariat_rank-accès_simple')) + '\n'
            + `${emoji.infos}${configm.description.text58}` + db.database.get(String('partenariat_notif-part_simple')) + '\n'
            + `${emoji.diamond}${configm.description.text49}` + db.database.get(String('partenariat_rank_add_simple')) + '\n'
            + `${emoji.ping}${configm.description.text50}` + db.database.get(String('partenariat_ping')) + '`*\n'
            + `${emoji.time}${configm.description.text63}` + db.database.get(String('partenariat_limite')) + '/jour(s)`*')

        interaction.message.edit({ embeds: ([embed]) })

        await interaction.deferUpdate()

        var embed = new EmbedBuilder()
          .setColor(`${config.color.color_good}`)
          .setDescription(`${emoji.tick}${general.response.add_5}`)

        interaction.channel.send({
          embeds: ([embed])
        }).then(async (response_save) => {
          await delay(Number(3) * 1000)
          response_save.delete()
        })



      }
    }
  }

  if (interaction.customId === "button_remove_5_part_limite") {
    if (db.module.get(String('partenariat')) === "on") {
      if (((interaction.member).permissions.has(PermissionsBitField.Flags.Administrator)) || (interaction.member.id === dev)) {
        if (!(db.database.get(String('partenariat_limite')) < 5)) {

          db.database.subtract(String('partenariat_limite'), 5)

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color}`)
            .setTitle(`${emoji.settings}${configm.title.text1}`)
            .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
            .setDescription(`${emoji.chanel}${configm.description.text40}` + db.database.get(String('partenariat_channel_simple')) + '\n'
              + `${emoji.file}${configm.description.text51}` + db.database.get(String('partenariat_channel_logs_simple')) + '\n'
              + `${emoji.captcha}${configm.description.text48}` + db.database.get(String('partenariat_rank-accès_simple')) + '\n'
              + `${emoji.infos}${configm.description.text58}` + db.database.get(String('partenariat_notif-part_simple')) + '\n'
              + `${emoji.diamond}${configm.description.text49}` + db.database.get(String('partenariat_rank_add_simple')) + '\n'
              + `${emoji.ping}${configm.description.text50}` + db.database.get(String('partenariat_ping')) + '`*\n'
              + `${emoji.time}${configm.description.text63}` + db.database.get(String('partenariat_limite')) + '/jour(s)`*')

          interaction.message.edit({ embeds: ([embed]) })

          await interaction.deferUpdate()

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color_error}`)
            .setDescription(`${emoji.wrong}${general.response.remove_5}`)

          interaction.channel.send({
            embeds: ([embed])
          }).then(async (response_save) => {
            await delay(Number(3) * 1000)
            response_save.delete()
          })



        } else {

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color_error}`)
            .setDescription(`${emoji.wrong}${configm.description.text64}`)

          interaction.channel.send({
            embeds: ([embed])
          }).then(async (resp) => {
            interaction.deferUpdate()
            await delay(Number(3) * 1000)
            resp.delete()
          })
        }
      }
    }
  }

  if (interaction.customId === "button_remove_1_part_limite") {
    if (db.module.get(String('partenariat')) === "on") {
      if (((interaction.member).permissions.has(PermissionsBitField.Flags.Administrator)) || (interaction.member.id === dev)) {
        if (!(db.database.get(String('partenariat_limite')) < 1)) {

          db.database.subtract(String('partenariat_limite'), 1)

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color}`)
            .setTitle(`${emoji.settings}${configm.title.text1}`)
            .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
            .setDescription(`${emoji.chanel}${configm.description.text40}` + db.database.get(String('partenariat_channel_simple')) + '\n'
              + `${emoji.file}${configm.description.text51}` + db.database.get(String('partenariat_channel_logs_simple')) + '\n'
              + `${emoji.captcha}${configm.description.text48}` + db.database.get(String('partenariat_rank-accès_simple')) + '\n'
              + `${emoji.infos}${configm.description.text58}` + db.database.get(String('partenariat_notif-part_simple')) + '\n'
              + `${emoji.diamond}${configm.description.text49}` + db.database.get(String('partenariat_rank_add_simple')) + '\n'
              + `${emoji.ping}${configm.description.text50}` + db.database.get(String('partenariat_ping')) + '`*\n'
              + `${emoji.time}${configm.description.text63}` + db.database.get(String('partenariat_limite')) + '/jour(s)`*')

          interaction.message.edit({ embeds: ([embed]) })

          await interaction.deferUpdate()

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color_error}`)
            .setDescription(`${emoji.wrong}${general.response.remove_1}`)

          interaction.channel.send({
            embeds: ([embed])
          }).then(async (response_save) => {
            await delay(Number(3) * 1000)
            response_save.delete()
          })



        } else {

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color_error}`)
            .setDescription(`${emoji.wrong}${configm.description.text64}`)

          interaction.channel.send({
            embeds: ([embed])
          }).then(async (resp) => {
            interaction.deferUpdate()
            await delay(Number(3) * 1000)
            resp.delete()
          })
        }
      }
    }
  }

  if (interaction.customId === "button_config_partenariat_limit") {
    if (db.module.get(String('partenariat')) === "on") {
      if (((interaction.member).permissions.has(PermissionsBitField.Flags.Administrator)) || (interaction.member.id === dev)) {

        var embed = new EmbedBuilder()
          .setColor(`${config.color.color}`)
          .setTitle(`${emoji.settings}${configm.title.text1}`)
          .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
          .setDescription(`${emoji.chanel}${configm.description.text40}` + db.database.get(String('partenariat_channel_simple')) + '\n'
            + `${emoji.file}${configm.description.text51}` + db.database.get(String('partenariat_channel_logs_simple')) + '\n'
            + `${emoji.captcha}${configm.description.text48}` + db.database.get(String('partenariat_rank-accès_simple')) + '\n'
            + `${emoji.infos}${configm.description.text58}` + db.database.get(String('partenariat_notif-part_simple')) + '\n'
            + `${emoji.diamond}${configm.description.text49}` + db.database.get(String('partenariat_rank_add_simple')) + '\n'
            + `${emoji.ping}${configm.description.text50}` + db.database.get(String('partenariat_ping')) + '`*\n'
            + `${emoji.time}${configm.description.text63}` + db.database.get(String('partenariat_limite')) + '/jour(s)`*')

        const button_add_1_part_limite = new ButtonBuilder()
          .setCustomId('button_add_1_part_limite')
          .setLabel('Ajouter 1')
          .setStyle(ButtonStyle.Secondary)
          .setEmoji(`${emoji.add}`)

        const button_add_5_part_limite = new ButtonBuilder()
          .setCustomId('button_add_5_part_limite')
          .setLabel('Ajouter 5')
          .setStyle(ButtonStyle.Danger)
          .setEmoji(`${emoji.add}`)

        const button_remove_5_part_limite = new ButtonBuilder()
          .setCustomId('button_remove_5_part_limite')
          .setLabel('Retirer 5')
          .setStyle(ButtonStyle.Danger)
          .setEmoji(`${emoji.remove}`)

        const button_remove_1_part_limite = new ButtonBuilder()
          .setCustomId('button_remove_1_part_limite')
          .setLabel('Retirer 1')
          .setStyle(ButtonStyle.Secondary)
          .setEmoji(`${emoji.remove}`)

        const button_part_limite_restart = new ButtonBuilder()
          .setCustomId('button_part_limite_restart')
          .setStyle(ButtonStyle.Primary)
          .setEmoji(`${emoji.return}`)

        const menu_part_limit = new ActionRowBuilder()
          .addComponents(button_add_1_part_limite)
          .addComponents(button_add_5_part_limite)
          .addComponents(button_remove_5_part_limite)
          .addComponents(button_remove_1_part_limite)

        const menu_part_limit1 = new ActionRowBuilder()
          .addComponents(button_part_limite_restart)

        interaction.message.edit({ embeds: ([embed]), components: [menu_part_limit, menu_part_limit1] })

        interaction.deferUpdate()

      }
    }
  }

  if (interaction.customId === "button_part_limite_restart") {
    if (db.module.get(String('partenariat')) === "on") {
      if (((interaction.member).permissions.has(PermissionsBitField.Flags.Administrator)) || interaction.member.id === dev) {

        var embed = new EmbedBuilder()
          .setColor(`${config.color.color}`)
          .setTitle(`${emoji.settings}${configm.title.text1}`)
          .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
          .setDescription(`${emoji.chanel}${configm.description.text40}` + db.database.get(String('partenariat_channel_simple')) + '\n'
            + `${emoji.file}${configm.description.text51}` + db.database.get(String('partenariat_channel_logs_simple')) + '\n'
            + `${emoji.captcha}${configm.description.text48}` + db.database.get(String('partenariat_rank-accès_simple')) + '\n'
            + `${emoji.infos}${configm.description.text58}` + db.database.get(String('partenariat_notif-part_simple')) + '\n'
            + `${emoji.diamond}${configm.description.text49}` + db.database.get(String('partenariat_rank_add_simple')) + '\n'
            + `${emoji.ping}${configm.description.text50}` + db.database.get(String('partenariat_ping')) + '`*\n'
            + `${emoji.time}${configm.description.text63}` + db.database.get(String('partenariat_limite')) + '/jour(s)`*')

        const button_config_retour = new ButtonBuilder()
          .setCustomId('buton_config_retour')
          .setStyle(ButtonStyle.Primary)
          .setEmoji(`${emoji.return}`)

        const button_config_partenariat_channel = new ButtonBuilder()
          .setCustomId('button_config_partenariat_channel')
          .setStyle(ButtonStyle.Secondary)
          .setEmoji(`${emoji.chanel}`)

        const button_config_partenariat_notifpart = new ButtonBuilder()
          .setCustomId('button_config_partenariat_notif-part')
          .setStyle(ButtonStyle.Secondary)
          .setEmoji(`${emoji.infos}`)

        const button_config_partenariat_channel_logs = new ButtonBuilder()
          .setCustomId('button_config_partenariat_channel_logs')
          .setStyle(ButtonStyle.Secondary)
          .setEmoji(`${emoji.file}`)

        const button_config_partenariat_rank_perm = new ButtonBuilder()
          .setCustomId('button_config_partenariat_rank_perm')
          .setStyle(ButtonStyle.Secondary)
          .setEmoji(`${emoji.captcha}`)

        const button_config_partenariat_rank_add = new ButtonBuilder()
          .setCustomId('button_config_partenariat_rank_add')
          .setStyle(ButtonStyle.Secondary)
          .setEmoji(`${emoji.diamond}`)

        const button_config_partenariat_ping = new ButtonBuilder()
          .setCustomId('button_config_partenariat_ping')
          .setStyle(ButtonStyle.Secondary)
          .setEmoji(`${emoji.ping}`)

        const button_config_partenariat_limit = new ButtonBuilder()
          .setCustomId('button_config_partenariat_limit')
          .setStyle(ButtonStyle.Secondary)
          .setEmoji(`${emoji.time}`)

        const button_config_partenariat_restart = new ButtonBuilder()
          .setCustomId('button_config_partenariat_restart')
          .setStyle(ButtonStyle.Danger)
          .setEmoji(`${emoji.bin}`)

        const menu_partenariat_config = new ActionRowBuilder()
          .addComponents(button_config_partenariat_channel)
          .addComponents(button_config_partenariat_channel_logs)
          .addComponents(button_config_partenariat_rank_perm)
          .addComponents(button_config_partenariat_notifpart)
          .addComponents(button_config_partenariat_rank_add)

        const menu_partenariat_config1 = new ActionRowBuilder()
          .addComponents(button_config_partenariat_ping)
          .addComponents(button_config_partenariat_limit)
          .addComponents(button_config_partenariat_restart)
          .addComponents(button_config_retour)

        interaction.message.edit({ embeds: ([embed]), components: [menu_partenariat_config, menu_partenariat_config1] })

        await interaction.deferUpdate()

      }
    }
  }

  if (interaction.customId === "config_button_report") {
    if (db.module.get(String('report')) === "on") {
      if (((interaction.member).permissions.has(PermissionsBitField.Flags.Administrator)) || interaction.member.id === dev) {

        if (!(db.database.has(String('channel_report')))) {
          db.database.set(String("channel_report"), "*`Non défini`*")
        }

        var embed = new EmbedBuilder()
          .setTitle(`${emoji.settings}${configm.title.text1}`)
          .setColor(`${config.color.color}`)
          .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
          .setDescription(`${emoji.chanel}${configm.description.text96}` + db.database.get(String('channel_report_simple')))

        const config_button_report_set = new ButtonBuilder()
          .setStyle(ButtonStyle.Secondary)
          .setEmoji(`${emoji.chanel}`)
          .setCustomId("config_button_report_set")

        const button_config_retour = new ButtonBuilder()
          .setCustomId('buton_config_retour')
          .setStyle(ButtonStyle.Primary)
          .setEmoji(`${emoji.return}`)

        const menu_config_report = new ActionRowBuilder()
          .addComponents(config_button_report_set)
          .addComponents(button_config_retour)

        interaction.message.edit({ embeds: ([embed]), components: [menu_config_report] })

        interaction.deferUpdate()

      }
    } else {

      var embed = new EmbedBuilder()
        .setColor(`${config.color.color_error}`)
        .setDescription(`${emoji.wrong}${general.error.module_activate1}` + ' *`Signalement`* ' + `${general.error.module_activate2}`)

      interaction.channel.send({
        embeds: ([embed])
      }).then(async (module) => {
        interaction.deferUpdate()
        await delay(Number(3) * 1000)
        await module.delete()
      })


    }
  }


  if (interaction.customId === "config_button_pub") {
    if (db.module.get(String('pub')) === "on") {
      if (((interaction.member).permissions.has(PermissionsBitField.Flags.Administrator)) || interaction.member.id === dev) {

        if (!(db.database.has(String('pub_publicité')))) {
          db.database.set(String('pub_publicité'), '*`Non définie`*')
        }

        var embed = new EmbedBuilder()
          .setTitle(`${emoji.settings}${configm.title.text1}`)
          .setColor(`${config.color.color}`)
          .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
          .setDescription(`${emoji.welcome}${configm.description.text74}` + db.database.get(String('pub_publicité')))

        const config_button_pub_set = new ButtonBuilder()
          .setStyle(ButtonStyle.Secondary)
          .setEmoji(`${emoji.welcome}`)
          .setCustomId("config_button_pub_set")

        const button_config_retour = new ButtonBuilder()
          .setCustomId('buton_config_retour')
          .setStyle(ButtonStyle.Primary)
          .setEmoji(`${emoji.return}`)

        const menu_pub = new ActionRowBuilder()
          .addComponents(config_button_pub_set)
          .addComponents(button_config_retour)

        interaction.message.edit({ embeds: ([embed]), components: [menu_pub] })

        interaction.deferUpdate()

      }
    } else {
      var embed = new EmbedBuilder()
        .setColor(`${config.color.color_error}`)
        .setDescription(`${emoji.wrong}${general.error.module_activate1}` + ' *`Publicité`* ' + `${general.error.module_activate2}`)

      interaction.channel.send({
        embeds: ([embed])
      }).then(async (module) => {
        interaction.deferUpdate()
        await delay(Number(3) * 1000)
        await module.delete()
      })

    }
  }

  if (interaction.customId === "config_button_partenariat") {
    if (db.module.get(String('partenariat')) === "on") {
      if (((interaction.member).permissions.has(PermissionsBitField.Flags.Administrator)) || interaction.member.id === dev) {

        if (!(db.database.has(String('partenariat_channel')))) {
          db.database.set(String('partenariat_channel'), 'Non défini')
        }
        if (!(db.database.has(String('partenariat_channel_simple')))) {
          db.database.set(String('partenariat_channel_simple'), 'Non défini')
        }
        if (!(db.database.has(String('partenariat_channel_logs')))) {
          db.database.set(String('partenariat_channel_logs'), 'Non défini')
        }
        if (!(db.database.has(String('partenariat_channel_logs_simple')))) {
          db.database.set(String('partenariat_channel_logs_simple'), 'Non défini')
        }
        if (!(db.database.has(String('partenariat_rank-accès')))) {
          db.database.set(String('partenariat_rank-accès'), 'Non défini')
        }
        if (!(db.database.has(String('partenariat_rank-accès_simple')))) {
          db.database.set(String('partenariat_rank-accès_simple'), 'Non défini')
        }
        if (!(db.database.has(String('partenariat_notif-part')))) {
          db.database.set(String('partenariat_notif-part'), 'Non défini')
        }
        if (!(db.database.has(String('partenariat_notif-part_simple')))) {
          db.database.set(String('partenariat_notif-par_simplet'), 'Non défini')
        }
        if (!(db.database.has(String('partenariat_rank_add')))) {
          db.database.set(String('partenariat_rank_add'), 'Non défini')
        }
        if (!(db.database.has(String('partenariat_rank_add_simple')))) {
          db.database.set(String('partenariat_rank_add_simple'), 'Non défini')
        }
        if (!(db.database.has(String('partenariat_ping')))) {
          db.database.set(String('partenariat_ping'), 'Désactivées')
        }
        if (!(db.database.has(String('partenariat_limite')))) {
          db.database.add(String('partenariat_limite'), 0)
        }

        var embed = new EmbedBuilder()
          .setColor(`${config.color.color}`)
          .setTitle(`${emoji.settings}${configm.title.text1}`)
          .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
          .setDescription(`${emoji.chanel}${configm.description.text40}` + db.database.get(String('partenariat_channel_simple')) + '\n'
            + `${emoji.file}${configm.description.text51}` + db.database.get(String('partenariat_channel_logs_simple')) + '\n'
            + `${emoji.captcha}${configm.description.text48}` + db.database.get(String('partenariat_rank-accès_simple')) + '\n'
            + `${emoji.infos}${configm.description.text58}` + db.database.get(String('partenariat_notif-part_simple')) + '\n'
            + `${emoji.diamond}${configm.description.text49}` + db.database.get(String('partenariat_rank_add_simple')) + '\n'
            + `${emoji.ping}${configm.description.text50}` + db.database.get(String('partenariat_ping')) + '`*\n'
            + `${emoji.time}${configm.description.text63}` + db.database.get(String('partenariat_limite')) + '/jour(s)`*')

        const button_config_retour = new ButtonBuilder()
          .setCustomId('buton_config_retour')
          .setStyle(ButtonStyle.Primary)
          .setEmoji(`${emoji.return}`)

        const button_config_partenariat_channel = new ButtonBuilder()
          .setCustomId('button_config_partenariat_channel')
          .setStyle(ButtonStyle.Secondary)
          .setEmoji(`${emoji.chanel}`)

        const button_config_partenariat_notifpart = new ButtonBuilder()
          .setCustomId('button_config_partenariat_notif-part')
          .setStyle(ButtonStyle.Secondary)
          .setEmoji(`${emoji.infos}`)

        const button_config_partenariat_channel_logs = new ButtonBuilder()
          .setCustomId('button_config_partenariat_channel_logs')
          .setStyle(ButtonStyle.Secondary)
          .setEmoji(`${emoji.file}`)

        const button_config_partenariat_rank_perm = new ButtonBuilder()
          .setCustomId('button_config_partenariat_rank_perm')
          .setStyle(ButtonStyle.Secondary)
          .setEmoji(`${emoji.captcha}`)

        const button_config_partenariat_rank_add = new ButtonBuilder()
          .setCustomId('button_config_partenariat_rank_add')
          .setStyle(ButtonStyle.Secondary)
          .setEmoji(`${emoji.diamond}`)

        const button_config_partenariat_ping = new ButtonBuilder()
          .setCustomId('button_config_partenariat_ping')
          .setStyle(ButtonStyle.Secondary)
          .setEmoji(`${emoji.ping}`)

        const button_config_partenariat_limit = new ButtonBuilder()
          .setCustomId('button_config_partenariat_limit')
          .setStyle(ButtonStyle.Secondary)
          .setEmoji(`${emoji.time}`)

        const button_config_partenariat_restart = new ButtonBuilder()
          .setCustomId('button_config_partenariat_restart')
          .setStyle(ButtonStyle.Danger)
          .setEmoji(`${emoji.bin}`)

        const menu_partenariat_config = new ActionRowBuilder()
          .addComponents(button_config_partenariat_channel)
          .addComponents(button_config_partenariat_channel_logs)
          .addComponents(button_config_partenariat_rank_perm)
          .addComponents(button_config_partenariat_notifpart)
          .addComponents(button_config_partenariat_rank_add)

        const menu_partenariat_config1 = new ActionRowBuilder()
          .addComponents(button_config_partenariat_ping)
          .addComponents(button_config_partenariat_limit)
          .addComponents(button_config_partenariat_restart)
          .addComponents(button_config_retour)

        interaction.message.edit({ embeds: ([embed]), components: [menu_partenariat_config, menu_partenariat_config1] })

        await interaction.deferUpdate()

      }
    } else {
      var embed = new EmbedBuilder()
        .setColor(`${config.color.color_error}`)
        .setDescription(`${emoji.wrong}${general.error.module_activate1}` + ' *`Partenariat`* ' + `${general.error.module_activate2}`)

      interaction.channel.send({
        embeds: ([embed])
      }).then(async (module) => {
        interaction.deferUpdate()
        await delay(Number(3) * 1000)
        await module.delete()
      })

    }
  }

  if (interaction.customId === "button_config_sondage_restart") {
    if (db.module.get(String('suggestion')) === "on") {
      if (((interaction.member).permissions.has(PermissionsBitField.Flags.Administrator)) || interaction.member.id === dev) {

        db.database.set(String('sondage_channel'), 'Non défini')
        db.database.set(String('sondage_channel_simple'), '*`Non défini`*')
        db.database.set(String('sondage_pour'), '👍')
        db.database.set(String('sondage_base'), '✊')
        db.database.set(String('sondage_contre'), '👎')

        var embed = new EmbedBuilder()
          .setColor(`${config.color.color}`)
          .setTitle(`${emoji.settings}${configm.title.text1}`)
          .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
          .setDescription(`${emoji.chanel}${configm.description.text40}` + db.database.get(String('sondage_channel_simple')) + '\n' + `${emoji.tick}${configm.description.text41}` + db.database.get(String('sondage_pour')) + '\n' + `${emoji.file}${configm.description.text42}` + db.database.get(String('sondage_base')) + '\n' + `${emoji.wrong}${configm.description.text43}` + db.database.get(String('sondage_contre')))

        await interaction.message.edit({ embeds: ([embed]) })

        interaction.deferUpdate()

        var embed = new EmbedBuilder()
          .setColor(`${config.color.color_verif_stop}`)
          .setDescription(`${emoji.bin}${general.response.restart}`)

        await interaction.channel.send({
          embeds: ([embed])
        }).then(async (del) => {
          await delay(Number(3) * 1000)
          del.delete()
        })

      }
    } else {
      var embed = new EmbedBuilder()
        .setColor(`${config.color.color_error}`)
        .setDescription(`${emoji.wrong}${general.error.module_activate1}` + ' *`Suggestion`* ' + `${general.error.module_activate2}`)

      interaction.channel.send({
        embeds: ([embed])
      }).then(async (module) => {
        interaction.deferUpdate()
        await delay(Number(3) * 1000)
        await module.delete()
      })

    }
  }

  if (interaction.customId === "config_button_suggestion") {
    if (db.module.get(String('suggestion')) === "on") {
      if (((interaction.member).permissions.has(PermissionsBitField.Flags.Administrator)) || interaction.member.id === dev) {

        if (!(db.database.has(String('sondage_channel')))) {
          db.database.set(String('sondage_channel'), 'Non défini')
        }
        if (!(db.database.has(String('sondage_channel_simple')))) {
          db.database.set(String('sondage_channel_simple'), 'Non défini')
        }
        if (!(db.database.has(String('sondage_pour')))) {
          db.database.set(String('sondage_pour'), '👍')
        }
        if (!(db.database.has(String('sondage_base')))) {
          db.database.set(String('sondage_base'), '✊')
        }
        if (!(db.database.has(String('sondage_contre')))) {
          db.database.set(String('sondage_contre'), '👎')
        }

        var embed = new EmbedBuilder()
          .setColor(`${config.color.color}`)
          .setTitle(`${emoji.settings}${configm.title.text1}`)
          .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
          .setDescription(`${emoji.chanel}${configm.description.text40}` + db.database.get(String('sondage_channel_simple')) + '\n' + `${emoji.tick}${configm.description.text41}` + db.database.get(String('sondage_pour')) + '\n' + `${emoji.file}${configm.description.text42}` + db.database.get(String('sondage_base')) + '\n' + `${emoji.wrong}${configm.description.text43}` + db.database.get(String('sondage_contre')))

        const button_config_retour = new ButtonBuilder()
          .setCustomId('buton_config_retour')
          .setStyle(ButtonStyle.Primary)
          .setEmoji(`${emoji.return}`)

        const button_config_sondage_channel = new ButtonBuilder()
          .setCustomId('button_config_sondage_channel')
          .setStyle(ButtonStyle.Secondary)
          .setEmoji(`${emoji.chanel}`)

        const button_config_sondage_pour = new ButtonBuilder()
          .setCustomId('button_config_sondage_pour')
          .setStyle(ButtonStyle.Secondary)
          .setEmoji(`${emoji.tick}`)

        const button_config_sondage_base = new ButtonBuilder()
          .setCustomId('button_config_sondage_base')
          .setStyle(ButtonStyle.Secondary)
          .setEmoji(`${emoji.file}`)

        const button_config_sondage_contre = new ButtonBuilder()
          .setCustomId('button_config_sondage_contre')
          .setStyle(ButtonStyle.Secondary)
          .setEmoji(`${emoji.wrong}`)

        const button_config_sondage_restart = new ButtonBuilder()
          .setCustomId('button_config_sondage_restart')
          .setStyle(ButtonStyle.Danger)
          .setEmoji(`${emoji.bin}`)

        const menu_sondage_config = new ActionRowBuilder()
          .addComponents(button_config_sondage_channel)
          .addComponents(button_config_sondage_pour)
          .addComponents(button_config_sondage_base)
          .addComponents(button_config_sondage_contre)


        const menu_sondage_config1 = new ActionRowBuilder()
          .addComponents(button_config_sondage_restart)
          .addComponents(button_config_retour)

        interaction.message.edit({ embeds: ([embed]), components: [menu_sondage_config, menu_sondage_config1] })

        await interaction.deferUpdate()
      }
    } else {
      var embed = new EmbedBuilder()
        .setColor(`${config.color.color_error}`)
        .setDescription(`${emoji.wrong}${general.error.module_activate1}` + ' *`Suggestion`* ' + `${general.error.module_activate2}`)

      interaction.channel.send({
        embeds: ([embed])
      }).then(async (module) => {
        interaction.deferUpdate()
        await delay(Number(3) * 1000)
        await module.delete()
      })

    }
  }

  if (interaction.customId === "button_config_sondage_contre") {
    if (((interaction.member).permissions.has(PermissionsBitField.Flags.Administrator)) || (interaction.member.id === dev)) {
      interaction.deferUpdate()
      interaction.channel.send(`${emoji.pen}${configm.description.text47}`).then(async (question) => {
        (interaction.channel).awaitMessages({
          filter: (m) => m.author.id === interaction.member.id,
          time: (500 * 60 * 100),
          max: 1
        }).then(async (collected) => {
          reply = collected.first().content;
          message = collected.first();
          interaction.channel.bulkDelete(1)
          question.delete()
          await delay(Number(1) * 1000)
          if (!(reply === "cancel")) {


            try {

              interaction.message.react(reply)

              db.database.set(String('sondage_contre'), (reply));

              var embed = new EmbedBuilder()
                .setColor(`${config.color.color_good}`)
                .setDescription(`${emoji.tick}${general.response.save_modifications}`)

              interaction.channel.send({
                embeds: ([embed])
              }).then(async (response_save) => {
                await delay(Number(3) * 1000)
                response_save.delete()
              })

              var embed = new EmbedBuilder()
                .setColor(`${config.color.color}`)
                .setTitle(`${emoji.settings}${configm.title.text1}`)
                .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
                .setDescription(`${emoji.chanel}${configm.description.text40}` + db.database.get(String('sondage_channel_simple')) + '\n' + `${emoji.tick}${configm.description.text41}` + db.database.get(String('sondage_pour')) + '\n' + `${emoji.file}${configm.description.text42}` + db.database.get(String('sondage_base')) + '\n' + `${emoji.wrong}${configm.description.text43}` + db.database.get(String('sondage_contre')))

              interaction.message.edit({ embeds: ([embed]) })

              console.log(chalk.green("L'utilisateur " + interaction.user.tag + ` a configuré l'EMOJI \"Contre\" avec l'emoji "` + reply + '"'))


            } catch (err) {

              console.log(chalk.red(err + ' (SALON RENSEIGNE INTROUVABLE)'))

              var embed = new EmbedBuilder()
                .setColor(`${config.color.color_error}`)
                .setDescription(`${emoji.wrong}${general.error.emoji_notfound}`)

              interaction.channel.send({
                embeds: ([embed])
              }).then(async (response_error) => {
                await delay(Number(3) * 1000)
                response_error.delete()

              })

            }
          } else {

            var embed = new EmbedBuilder()
              .setColor(`${config.color.color_error}`)
              .setDescription(`${emoji.wrong}${general.response.nosave_modif}`)
            interaction.channel.send({
              embeds: ([embed])
            }).then(async (response_nosave) => {
              await delay(Number(3) * 1000)
              response_nosave.delete()

            })
          }
        })
      })
    }
  }

  if (interaction.customId === "button_config_sondage_base") {
    if (((interaction.member).permissions.has(PermissionsBitField.Flags.Administrator)) || (interaction.member.id === dev)) {
      interaction.deferUpdate()
      interaction.channel.send(`${emoji.pen}${configm.description.text46}`).then(async (question) => {
        (interaction.channel).awaitMessages({
          filter: (m) => m.author.id === interaction.member.id,
          time: (500 * 60 * 100),
          max: 1
        }).then(async (collected) => {
          reply = collected.first().content;
          message = collected.first();
          interaction.channel.bulkDelete(1)
          question.delete()
          await delay(Number(1) * 1000)
          if (!(reply === "cancel")) {


            try {

              interaction.message.react(reply)

              db.database.set(String('sondage_base'), (reply));

              var embed = new EmbedBuilder()
                .setColor(`${config.color.color_good}`)
                .setDescription(`${emoji.tick}${general.response.save_modifications}`)

              interaction.channel.send({
                embeds: ([embed])
              }).then(async (response_save) => {
                await delay(Number(3) * 1000)
                response_save.delete()
              })

              var embed = new EmbedBuilder()
                .setColor(`${config.color.color}`)
                .setTitle(`${emoji.settings}${configm.title.text1}`)
                .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
                .setDescription(`${emoji.chanel}${configm.description.text40}` + db.database.get(String('sondage_channel_simple')) + '\n' + `${emoji.tick}${configm.description.text41}` + db.database.get(String('sondage_pour')) + '\n' + `${emoji.file}${configm.description.text42}` + db.database.get(String('sondage_base')) + '\n' + `${emoji.wrong}${configm.description.text43}` + db.database.get(String('sondage_contre')))

              interaction.message.edit({ embeds: ([embed]) })

              console.log(chalk.green("L'utilisateur " + interaction.user.tag + ` a configuré l'EMOJI \"Base\" avec l'emoji "` + reply + '"'))

            } catch (err) {

              console.log(chalk.red(err + ' (SALON RENSEIGNE INTROUVABLE)'))

              var embed = new EmbedBuilder()
                .setColor(`${config.color.color_error}`)
                .setDescription(`${emoji.wrong}${general.error.emoji_notfound}`)

              interaction.channel.send({
                embeds: ([embed])
              }).then(async (response_error) => {
                await delay(Number(3) * 1000)
                response_error.delete()

              })

            }
          } else {

            var embed = new EmbedBuilder()
              .setColor(`${config.color.color_error}`)
              .setDescription(`${emoji.wrong}${general.response.nosave_modif}`)
            interaction.channel.send({
              embeds: ([embed])
            }).then(async (response_nosave) => {
              await delay(Number(3) * 1000)
              response_nosave.delete()

            })
          }
        })
      })
    }
  }

  if (interaction.customId === "button_config_sondage_pour") {
    if (((interaction.member).permissions.has(PermissionsBitField.Flags.Administrator)) || (interaction.member.id === dev)) {
      interaction.deferUpdate()
      interaction.channel.send(`${emoji.pen}${configm.description.text45}`).then(async (question) => {
        (interaction.channel).awaitMessages({
          filter: (m) => m.author.id === interaction.member.id,
          time: (500 * 60 * 100),
          max: 1
        }).then(async (collected) => {
          reply = collected.first().content;
          message = collected.first();
          interaction.channel.bulkDelete(1)
          question.delete()
          await delay(Number(1) * 1000)
          if (!(reply === "cancel")) {


            try {

              interaction.message.react(reply)

              db.database.set(String('sondage_pour'), (reply));

              var embed = new EmbedBuilder()
                .setColor(`${config.color.color_good}`)
                .setDescription(`${emoji.tick}${general.response.save_modifications}`)

              interaction.channel.send({
                embeds: ([embed])
              }).then(async (response_save) => {
                await delay(Number(3) * 1000)
                response_save.delete()
              })

              var embed = new EmbedBuilder()
                .setColor(`${config.color.color}`)
                .setTitle(`${emoji.settings}${configm.title.text1}`)
                .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
                .setDescription(`${emoji.chanel}${configm.description.text40}` + db.database.get(String('sondage_channel_simple')) + '\n' + `${emoji.tick}${configm.description.text41}` + db.database.get(String('sondage_pour')) + '\n' + `${emoji.file}${configm.description.text42}` + db.database.get(String('sondage_base')) + '\n' + `${emoji.wrong}${configm.description.text43}` + db.database.get(String('sondage_contre')))

              interaction.message.edit({ embeds: ([embed]) })

              console.log(chalk.green("L'utilisateur " + interaction.user.tag + ` a configuré l'EMOJI \"Pour\" avec l'emoji "` + reply + '"'))


            } catch (err) {

              console.log(chalk.red(err + ' (SALON RENSEIGNE INTROUVABLE)'))

              var embed = new EmbedBuilder()
                .setColor(`${config.color.color_error}`)
                .setDescription(`${emoji.wrong}${general.error.emoji_notfound}`)

              interaction.channel.send({
                embeds: ([embed])
              }).then(async (response_error) => {
                await delay(Number(3) * 1000)
                response_error.delete()

              })

            }
          } else {

            var embed = new EmbedBuilder()
              .setColor(`${config.color.color_error}`)
              .setDescription(`${emoji.wrong}${general.response.nosave_modif}`)
            interaction.channel.send({
              embeds: ([embed])
            }).then(async (response_nosave) => {
              await delay(Number(3) * 1000)
              response_nosave.delete()

            })
          }
        })
      })
    }
  }


  if (interaction.customId === "button_config_sondage_channel") {
    if (((interaction.member).permissions.has(PermissionsBitField.Flags.Administrator)) || (interaction.member.id === dev)) {
      interaction.deferUpdate()
      interaction.channel.send(`${emoji.pen}${configm.description.text44}`).then(async (question) => {
        (interaction.channel).awaitMessages({
          filter: (m) => m.author.id === interaction.member.id,
          time: (500 * 60 * 100),
          max: 1
        }).then(async (collected) => {
          reply = collected.first().content;
          message = collected.first();
          interaction.channel.bulkDelete(1)
          question.delete()
          await delay(Number(1) * 1000)
          if (!(reply === "cancel")) {
            if ((!(((reply) || '').startsWith('<#' || '')))) {


              try {

                client.channels.cache.get(reply).send({ content: '**`' + interaction.user.tag + '`**' + " a configuré **`" + client.channels.cache.get(reply).name + "`** comme le salon de suggestions." })

                db.database.set(String('sondage_channel'), (reply));
                db.database.set(String('sondage_channel_simple'), '<#' + (reply) + '>');

                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color_good}`)
                  .setDescription(`${emoji.tick}${general.response.save_modifications}`)

                interaction.channel.send({
                  embeds: ([embed])
                }).then(async (response_save) => {
                  await delay(Number(3) * 1000)
                  response_save.delete()
                })

                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color}`)
                  .setTitle(`${emoji.settings}${configm.title.text1}`)
                  .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
                  .setDescription(`${emoji.chanel}${configm.description.text40}` + db.database.get(String('sondage_channel_simple')) + '\n' + `${emoji.tick}${configm.description.text41}` + db.database.get(String('sondage_pour')) + '\n' + `${emoji.file}${configm.description.text42}` + db.database.get(String('sondage_base')) + '\n' + `${emoji.wrong}${configm.description.text43}` + db.database.get(String('sondage_contre')))


                interaction.message.edit({ embeds: ([embed]) })

                console.log(chalk.green("L'utilisateur " + interaction.user.tag + " a configuré le salon de sondage sur le salon " + client.channels.cache.get(reply).name + "."))

              } catch (err) {

                console.log(chalk.red(err + ' (SALON RENSEIGNE INTROUVABLE)'))

                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color_error}`)
                  .setDescription(`${emoji.wrong}${general.error.channel_notfound}`)

                interaction.channel.send({
                  embeds: ([embed])
                }).then(async (response_error) => {
                  await delay(Number(3) * 1000)
                  response_error.delete()

                })



              }

            } else {

              try {

                let change = reply.replace('<', '')
                let change1 = change.replace('#', '')
                let change2 = change1.replace('>', '')

                db.database.set(String('sondage_channel'), change2)
                db.database.set(String('sondage_channel_simple'), (reply));

                await client.channels.cache.get(change2).send({ content: '**`' + interaction.user.tag + '`**' + " a configuré **`" + client.channels.cache.get(change2).name + "`** comme le salon de suggestions." })

                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color_good}`)
                  .setDescription(`${emoji.tick}${general.response.save_modifications}`)

                interaction.channel.send({
                  embeds: ([embed])
                }).then(async (response_save) => {
                  await delay(Number(3) * 1000)
                  response_save.delete()
                })

                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color}`)
                  .setTitle(`${emoji.settings}${configm.title.text1}`)
                  .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
                  .setDescription(`${emoji.chanel}${configm.description.text40}` + db.database.get(String('sondage_channel_simple')) + '\n' + `${emoji.tick}${configm.description.text41}` + db.database.get(String('sondage_pour')) + '\n' + `${emoji.file}${configm.description.text42}` + db.database.get(String('sondage_base')) + '\n' + `${emoji.wrong}${configm.description.text43}` + db.database.get(String('sondage_contre')))


                interaction.message.edit({ embeds: ([embed]) })

                console.log(chalk.green("L'utilisateur " + interaction.user.tag + " a configuré le salon de sondage sur le salon " + client.channels.cache.get(change2).name + "."))

              } catch (err) {

                console.log(chalk.red(err + ' (SALON RENSEIGNE INTROUVABLE)'))

                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color_error}`)
                  .setDescription(`${emoji.wrong}${general.error.channel_notfound}`)

                interaction.channel.send({
                  embeds: ([embed])
                }).then(async (response_error) => {
                  await delay(Number(3) * 1000)
                  response_error.delete()

                })



              }
            }
          } else {

            var embed = new EmbedBuilder()
              .setColor(`${config.color.color_error}`)
              .setDescription(`${emoji.wrong}${general.response.nosave_modif}`)
            interaction.channel.send({
              embeds: ([embed])
            }).then(async (response_nosave) => {
              await delay(Number(3) * 1000)
              response_nosave.delete()

            })
          }
        })
      })
    }
  }

  if (interaction.customId === "config_button_report_set") {
    if (((interaction.member).permissions.has(PermissionsBitField.Flags.Administrator)) || (interaction.member.id === dev)) {
      interaction.deferUpdate()
      interaction.channel.send(`${emoji.pen}${configm.description.text97}`).then(async (question) => {
        (interaction.channel).awaitMessages({
          filter: (m) => m.author.id === interaction.member.id,
          time: (500 * 60 * 100),
          max: 1
        }).then(async (collected) => {
          reply = collected.first().content;
          message = collected.first();
          interaction.channel.bulkDelete(1)
          question.delete()
          await delay(Number(1) * 1000)
          if (!(reply === "cancel")) {
            if ((!(((reply) || '').startsWith('<#' || '')))) {


              try {

                client.channels.cache.get(reply).send({ content: '**`' + interaction.user.tag + '`**' + " a configuré **`" + client.channels.cache.get(reply).name + "`** comme le salon d'arrivé des signalements'." })

                db.database.set(String('channel_report'), (reply));
                db.database.set(String('channel_report_simple'), '<#' + (reply) + '>');

                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color_good}`)
                  .setDescription(`${emoji.tick}${general.response.save_modifications}`)

                interaction.channel.send({
                  embeds: ([embed])
                }).then(async (response_save) => {
                  await delay(Number(3) * 1000)
                  response_save.delete()
                })

                _simple


                interaction.message.edit({ embeds: ([embed]) })

                console.log(chalk.green("L'utilisateur " + interaction.user.tag + " a configuré le salon d'arrivé des signalements' sur le salon " + client.channels.cache.get(reply).name + "."))

              } catch (err) {

                console.log(chalk.red(err + ' (SALON RENSEIGNE INTROUVABLE)'))

                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color_error}`)
                  .setDescription(`${emoji.wrong}${general.error.channel_notfound}`)

                interaction.channel.send({
                  embeds: ([embed])
                }).then(async (response_error) => {
                  await delay(Number(3) * 1000)
                  response_error.delete()

                })



              }

            } else {

              try {

                let change = reply.replace('<', '')
                let change1 = change.replace('#', '')
                let change2 = change1.replace('>', '')

                db.database.set(String('channel_report'), change2)
                db.database.set(String('channel_report_simple'), (reply));

                await client.channels.cache.get(change2).send({ content: '**`' + interaction.user.tag + '`**' + " a configuré **`" + client.channels.cache.get(change2).name + "`** comme le salon d'arrivé des signalements." })

                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color_good}`)
                  .setDescription(`${emoji.tick}${general.response.save_modifications}`)

                interaction.channel.send({
                  embeds: ([embed])
                }).then(async (response_save) => {
                  await delay(Number(3) * 1000)
                  response_save.delete()
                })

                var embed = new EmbedBuilder()
                  .setTitle(`${emoji.settings}${configm.title.text1}`)
                  .setColor(`${config.color.color}`)
                  .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
                  .setDescription(`${emoji.chanel}${configm.description.text96}` + db.database.get(String('channel_report_simple')))

                interaction.message.edit({ embeds: ([embed]) })

                console.log(chalk.green("L'utilisateur " + interaction.user.tag + " a configuré le salon d'arrivé des signalements sur le salon " + client.channels.cache.get(change2).name + "."))

              } catch (err) {

                console.log(chalk.red(err + ' (SALON RENSEIGNE INTROUVABLE)'))

                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color_error}`)
                  .setDescription(`${emoji.wrong}${general.error.channel_notfound}`)

                interaction.channel.send({
                  embeds: ([embed])
                }).then(async (response_error) => {
                  await delay(Number(3) * 1000)
                  response_error.delete()

                })



              }
            }
          } else {

            var embed = new EmbedBuilder()
              .setColor(`${config.color.color_error}`)
              .setDescription(`${emoji.wrong}${general.response.nosave_modif}`)
            interaction.channel.send({
              embeds: ([embed])
            }).then(async (response_nosave) => {
              await delay(Number(3) * 1000)
              response_nosave.delete()

            })
          }
        })
      })
    }
  }

  if (interaction.customId === "buton_config_retour") {
    if (((interaction.member).permissions.has(PermissionsBitField.Flags.Administrator)) || (interaction.member.id === dev)) {

      ///Embed\\\

      var embed = new EmbedBuilder()
        .setColor(`${config.color.color}`)
        .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
        .setTitle(`${emoji.settings}${configm.title.text1}`)
        .setDescription(`${emoji.captcha}${configm.description.text1}` + ' '
          + '\n> ' + `${emoji.moderateur}${configm.description.text2}`
          + '\n> ' + `${emoji.banned}${configm.description.text3}`
          + '\n> ' + `${emoji.level}${configm.description.text4}`
          + '\n> ' + `${emoji.partner}${configm.description.text5}`
          + '\n> ' + `${emoji.ping}${configm.description.text6}`
          + '\n> ' + `${emoji.welcome}${configm.description.text7}`
          + '\n> ' + `${emoji.file}${configm.description.text8}`
          + '\n> ' + `${emoji.verify}${configm.description.text9}`
          + '\n> ' + `${emoji.reward}${configm.description.text10}`
          + '\n> ' + `${emoji.pen}${configm.description.text11}`
          + '\n> ' + `${emoji.link}${configm.description.text12}`
          + '\n> ' + `${emoji.chanel}${configm.description.text13}`
          + '\n> ' + `${emoji.database}${configm.description.text14}`
          + '\n> ' + `${emoji.game}${configm.description.text67}`
          + '\n> ' + `${emoji.list}${configm.description.text73}`
          + '\n> ' + `${emoji.warn}${configm.description.text95}`
          + '\n> ' + `${emoji.recycle}${configm.description.text98}`
        )

      ///Buttons\\\

      const config_button_utilitaire = new ButtonBuilder()
        .setCustomId('config_button_utilitaire')
        .setEmoji(`${emoji.moderateur}`)
        .setStyle(ButtonStyle.Secondary)

      const config_button_moderation = new ButtonBuilder()
        .setCustomId('config_button_moderation')
        .setEmoji(`${emoji.banned}`)
        .setStyle(ButtonStyle.Secondary)

      const config_button_level = new ButtonBuilder()
        .setCustomId('config_button_level')
        .setEmoji(`${emoji.level}`)
        .setStyle(ButtonStyle.Secondary)

      const config_button_partenariat = new ButtonBuilder()
        .setCustomId('config_button_partenariat')
        .setEmoji(`${emoji.partner}`)
        .setStyle(ButtonStyle.Secondary)

      const config_button_ghostping = new ButtonBuilder()
        .setCustomId('config_button_ghostping')
        .setEmoji(`${emoji.ping}`)
        .setStyle(ButtonStyle.Secondary)

      const config_button_welcome = new ButtonBuilder()
        .setCustomId('config_button_welcome')
        .setEmoji(`${emoji.welcome}`)
        .setStyle(ButtonStyle.Secondary)

      const config_button_embed = new ButtonBuilder()
        .setCustomId('config_button_embed')
        .setEmoji(`${emoji.file}`)
        .setStyle(ButtonStyle.Secondary)

      const config_button_verification = new ButtonBuilder()
        .setCustomId('config_button_verification')
        .setEmoji(`${emoji.verify}`)
        .setStyle(ButtonStyle.Secondary)

      const config_button_economie = new ButtonBuilder()
        .setCustomId('config_button_economie')
        .setEmoji(`${emoji.reward}`)
        .setStyle(ButtonStyle.Secondary)

      const config_button_suggestion = new ButtonBuilder()
        .setCustomId('config_button_suggestion')
        .setEmoji(`${emoji.pen}`)
        .setStyle(ButtonStyle.Secondary)

      const config_button_partenariat_mp = new ButtonBuilder()
        .setCustomId('config_button_partenariat_mp')
        .setEmoji(`${emoji.link}`)
        .setStyle(ButtonStyle.Secondary)

      const config_button_sperso = new ButtonBuilder()
        .setCustomId('config_button_sperso')
        .setEmoji(`${emoji.chanel}`)
        .setStyle(ButtonStyle.Secondary)

      const config_button_logs = new ButtonBuilder()
        .setCustomId('config_button_logs')
        .setEmoji(`${emoji.database}`)
        .setStyle(ButtonStyle.Secondary)

      const config_button_game = new ButtonBuilder()
        .setCustomId('config_button_game')
        .setEmoji(`${emoji.game}`)
        .setStyle(ButtonStyle.Secondary)

      const config_button_pub = new ButtonBuilder()
        .setCustomId('config_button_pub')
        .setEmoji(`${emoji.list}`)
        .setStyle(ButtonStyle.Secondary)

      const config_button_report = new ButtonBuilder()
        .setCustomId('config_button_report')
        .setEmoji(`${emoji.warn}`)
        .setStyle(ButtonStyle.Secondary)

      const config_button_invites = new ButtonBuilder()
        .setCustomId('config_button_invites')
        .setEmoji(`${emoji.recycle}`)
        .setStyle(ButtonStyle.Secondary)

      ///Components\\\

      const config_config_menu1 = new ActionRowBuilder()
        .addComponents(config_button_utilitaire)
        .addComponents(config_button_moderation)
        .addComponents(config_button_level)
        .addComponents(config_button_partenariat)
        .addComponents(config_button_ghostping)

      const config_config_menu2 = new ActionRowBuilder()
        .addComponents(config_button_welcome)
        .addComponents(config_button_embed)
        .addComponents(config_button_verification)
        .addComponents(config_button_economie)
        .addComponents(config_button_suggestion)

      const config_config_menu3 = new ActionRowBuilder()
        .addComponents(config_button_partenariat_mp)
        .addComponents(config_button_sperso)
        .addComponents(config_button_logs)
        .addComponents(config_button_game)
        .addComponents(config_button_pub)

      const config_config_menu4 = new ActionRowBuilder()
        .addComponents(config_button_report)
        .addComponents(config_button_invites)

      ///Send embed / components\\\

      interaction.message.edit({ embeds: ([embed]), components: [config_config_menu1, config_config_menu2, config_config_menu3, config_config_menu4], ephemeral: false })
      interaction.deferUpdate()

    } else {

      ////Erreur Perms Admins\\\\

      var embed = new EmbedBuilder()
        .setColor(`${config.color.color_error}`)
        .setDescription(`${emoji.wrong}${general.error.perms_admin}`)

      interaction.reply({
        embeds: ([embed]), ephemeral: true
      })
    }
  }

  if (interaction.customId === "rank_invites_return") {
    if ((interaction.member.permissions.has(PermissionsBitField.Flags.Administrator)) || (interaction.member.id === dev)) {

      var embed = new EmbedBuilder()
        .setColor(`${config.color.color}`)
        .setTitle(`${emoji.settings}${configm.title.text1}`)
        .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
        .setDescription(`${emoji.chanel}${configm.description.text99}` + db.database.get(String("channel_invites_simple")) + '\n'
          + `${emoji.protector}${configm.description.text100}` + '\n'
          + `${emoji.rules}${configm.description.text101}` + '```' + db.database.get(String("message_invites")) + '```\n'
          + `${emoji.color}${configm.description.text102}`)

      const config_invites_channel = new ButtonBuilder()
        .setEmoji(`${emoji.chanel}`)
        .setStyle(ButtonStyle.Secondary)
        .setCustomId("config_invites_channel")

      const config_invites_rank = new ButtonBuilder()
        .setEmoji(`${emoji.protector}`)
        .setStyle(ButtonStyle.Secondary)
        .setCustomId("config_invites_rank")

      const config_invites_message = new ButtonBuilder()
        .setEmoji(`${emoji.rules}`)
        .setStyle(ButtonStyle.Secondary)
        .setCustomId("config_invites_message")

      const config_invites_reset = new ButtonBuilder()
        .setEmoji(`${emoji.bin}`)
        .setStyle(ButtonStyle.Danger)
        .setCustomId("config_invites_reset")

      const button_config_retour = new ButtonBuilder()
        .setCustomId('buton_config_retour')
        .setStyle(ButtonStyle.Primary)
        .setEmoji(`${emoji.return}`)

      const menu_invites_config = new ActionRowBuilder()
        .addComponents(config_invites_channel)
        .addComponents(config_invites_rank)
        .addComponents(config_invites_message)

      const menu_invites_config1 = new ActionRowBuilder()
        .addComponents(config_invites_reset)
        .addComponents(button_config_retour)

      interaction.message.edit({ embeds: ([embed]), components: [menu_invites_config, menu_invites_config1] })

      interaction.deferUpdate()

    }
  }


  if (interaction.customId === "rank_invites_return_rank") {
    if ((interaction.member.permissions.has(PermissionsBitField.Flags.Administrator)) || (interaction.member.id === dev)) {

      var embed = new EmbedBuilder()
        .setColor(`${config.color.color}`)
        .setTitle(`${emoji.settings}${configm.title.text1}`)
        .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
        .setDescription('**1) Rôle:** ' + db.database.get(String("rank1_invites_simple")) + ' **, invitation(s):** ' + db.database.get(String("rank1_invites_number")) + '\n' +
          '**2) Rôle:** ' + db.database.get(String("rank2_invites_simple")) + ',** invitation(s):** ' + db.database.get(String("rank2_invites_number")) + '\n' +
          '**3) Rôle:** ' + db.database.get(String("rank3_invites_simple")) + ',** invitation(s):** ' + db.database.get(String("rank3_invites_number")))

      const rank_invites_1 = new ButtonBuilder()
        .setEmoji(`${emoji.one}`)
        .setStyle(ButtonStyle.Secondary)
        .setCustomId("rank_invites_1")

      const rank_invites_2 = new ButtonBuilder()
        .setEmoji(`${emoji.two}`)
        .setStyle(ButtonStyle.Secondary)
        .setCustomId("rank_invites_2")

      const rank_invites_3 = new ButtonBuilder()
        .setEmoji(`${emoji.three}`)
        .setStyle(ButtonStyle.Secondary)
        .setCustomId("rank_invites_3")


      const rank_invites_return = new ButtonBuilder()
        .setEmoji(`${emoji.return}`)
        .setStyle(ButtonStyle.Primary)
        .setCustomId("rank_invites_return")

      const menu_rank_invites = new ActionRowBuilder()
        .addComponents(rank_invites_1)
        .addComponents(rank_invites_2)
        .addComponents(rank_invites_3)


      const menu_rank_invites1 = new ActionRowBuilder()
        .addComponents(rank_invites_return)

      interaction.message.edit({ embeds: ([embed]), components: [menu_rank_invites, menu_rank_invites1] })

      interaction.deferUpdate()

    }
  }

  if (interaction.customId === "rank_invites_1_rank") {
    if (db.module.get(String('invites')) === "on") {
      if ((interaction.member.permissions.has(PermissionsBitField.Flags.Administrator)) || (interaction.member.id === dev)) {
        interaction.deferUpdate()
        interaction.channel.send(`${emoji.pen}${configm.description.text105}`).then(async (question) => {
          (interaction.channel).awaitMessages({
            filter: (m) => m.author.id === interaction.member.id,
            time: (500 * 60 * 100),
            max: 1
          }).then(async (collected) => {
            reply = collected.first().content;
            message = collected.first();
            interaction.channel.bulkDelete(1)
            question.delete()
            await delay(Number(1) * 1000)
            if (!(reply === "cancel")) {
              if ((((reply) || '').startsWith('<@' || ''))) {

                let change = reply.replace('<', '')
                let change1 = change.replace('@', '')
                let change3 = change1.replace('&', '')
                let change2 = change3.replace('>', '')

                db.database.set(String("rank1_invites"), change2)
                db.database.set(String("rank1_invites_simple"), reply)

                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color}`)
                  .setTitle(`${emoji.settings}${configm.title.text1}`)
                  .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
                  .setDescription(`${emoji.right} ` + '**1) Rôle:** ' + db.database.get(String("rank1_invites_simple")) + ',** invitation(s):** ' + db.database.get(String("rank1_invites_number")) + '\n' +
                    '**2) Rôle:** ' + db.database.get(String("rank2_invites_simple")) + ',** invitation(s):** ' + db.database.get(String("rank2_invites_number")) + '\n' +
                    '**3) Rôle:** ' + db.database.get(String("rank3_invites_simple")) + ',** invitation(s):** ' + db.database.get(String("rank3_invites_number")))

                interaction.message.edit({ embeds: ([embed]) })


                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color_good}`)
                  .setDescription(`${emoji.tick}${general.response.save_modifications}`)

                interaction.channel.send({
                  embeds: ([embed])
                }).then(async (response_save) => {
                  await delay(Number(3) * 1000)
                  response_save.delete()
                })

              } else {

                db.database.set(String("rank1_invites"), reply)
                db.database.set(String("rank1_invites_simple"), '<@&' + reply + '>')

                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color}`)
                  .setTitle(`${emoji.settings}${configm.title.text1}`)
                  .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
                  .setDescription(`${emoji.right} ` + '**1) Rôle:** ' + db.database.get(String("rank1_invites_simple")) + ',** invitation(s):** ' + db.database.get(String("rank1_invites_number")) + '\n' +
                    '**2) Rôle:** ' + db.database.get(String("rank2_invites_simple")) + ',** invitation(s):** ' + db.database.get(String("rank2_invites_number")) + '\n' +
                    '**3) Rôle:** ' + db.database.get(String("rank3_invites_simple")) + ',** invitation(s):** ' + db.database.get(String("rank3_invites_number")))

                interaction.message.edit({ embeds: ([embed]) })


                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color_good}`)
                  .setDescription(`${emoji.tick}${general.response.save_modifications}`)

                interaction.channel.send({
                  embeds: ([embed])
                }).then(async (response_save) => {
                  await delay(Number(3) * 1000)
                  response_save.delete()
                })


              }
            } else {

              var embed = new EmbedBuilder()
                .setColor(`${config.color.color_error}`)
                .setDescription(`${emoji.wrong}${general.response.nosave_modif}`)
              interaction.channel.send({
                embeds: ([embed])
              }).then(async (response_nosave) => {
                await delay(Number(3) * 1000)
                response_nosave.delete()

              })
            }
          })
        })
      }

    }
  }

  if (interaction.customId === "rank_invites_2_rank") {
    if (db.module.get(String('invites')) === "on") {
      if ((interaction.member.permissions.has(PermissionsBitField.Flags.Administrator)) || (interaction.member.id === dev)) {
        interaction.deferUpdate()
        interaction.channel.send(`${emoji.pen}${configm.description.text105}`).then(async (question) => {
          (interaction.channel).awaitMessages({
            filter: (m) => m.author.id === interaction.member.id,
            time: (500 * 60 * 100),
            max: 1
          }).then(async (collected) => {
            reply = collected.first().content;
            message = collected.first();
            interaction.channel.bulkDelete(1)
            question.delete()
            await delay(Number(1) * 1000)
            if (!(reply === "cancel")) {
              if ((((reply) || '').startsWith('<@' || ''))) {

                let change = reply.replace('<', '')
                let change1 = change.replace('@', '')
                let change3 = change1.replace('&', '')
                let change2 = change3.replace('>', '')

                db.database.set(String("rank2_invites"), change2)
                db.database.set(String("rank2_invites_simple"), reply)

                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color}`)
                  .setTitle(`${emoji.settings}${configm.title.text1}`)
                  .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
                  .setDescription('**1) Rôle:** ' + db.database.get(String("rank1_invites_simple")) + ',** invitation(s):** ' + db.database.get(String("rank1_invites_number")) + '\n' +
                    `${emoji.right} ` + '**2) Rôle:** ' + db.database.get(String("rank2_invites_simple")) + ',** invitation(s):** ' + db.database.get(String("rank2_invites_number")) + '\n' +
                    '**3) Rôle:** ' + db.database.get(String("rank3_invites_simple")) + ',** invitation(s):** ' + db.database.get(String("rank3_invites_number")))

                interaction.message.edit({ embeds: ([embed]) })


                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color_good}`)
                  .setDescription(`${emoji.tick}${general.response.save_modifications}`)

                interaction.channel.send({
                  embeds: ([embed])
                }).then(async (response_save) => {
                  await delay(Number(3) * 1000)
                  response_save.delete()
                })

              } else {

                db.database.set(String("rank2_invites"), reply)
                db.database.set(String("rank2_invites_simple"), '<@&' + reply + '>')

                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color}`)
                  .setTitle(`${emoji.settings}${configm.title.text1}`)
                  .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
                  .setDescription('**1) Rôle:** ' + db.database.get(String("rank1_invites_simple")) + ',** invitation(s):** ' + db.database.get(String("rank1_invites_number")) + '\n' +
                    `${emoji.right} ` + '**2) Rôle:** ' + db.database.get(String("rank2_invites_simple")) + ',** invitation(s):** ' + db.database.get(String("rank2_invites_number")) + '\n' +
                    '**3) Rôle:** ' + db.database.get(String("rank3_invites_simple")) + ',** invitation(s):** ' + db.database.get(String("rank3_invites_number")))

                interaction.message.edit({ embeds: ([embed]) })


                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color_good}`)
                  .setDescription(`${emoji.tick}${general.response.save_modifications}`)

                interaction.channel.send({
                  embeds: ([embed])
                }).then(async (response_save) => {
                  await delay(Number(3) * 1000)
                  response_save.delete()
                })


              }
            } else {

              var embed = new EmbedBuilder()
                .setColor(`${config.color.color_error}`)
                .setDescription(`${emoji.wrong}${general.response.nosave_modif}`)
              interaction.channel.send({
                embeds: ([embed])
              }).then(async (response_nosave) => {
                await delay(Number(3) * 1000)
                response_nosave.delete()

              })
            }
          })
        })
      }

    }
  }

  if (interaction.customId === "rank_invites_3_rank") {
    if (db.module.get(String('invites')) === "on") {
      if ((interaction.member.permissions.has(PermissionsBitField.Flags.Administrator)) || (interaction.member.id === dev)) {
        interaction.deferUpdate()
        interaction.channel.send(`${emoji.pen}${configm.description.text105}`).then(async (question) => {
          (interaction.channel).awaitMessages({
            filter: (m) => m.author.id === interaction.member.id,
            time: (500 * 60 * 100),
            max: 1
          }).then(async (collected) => {
            reply = collected.first().content;
            message = collected.first();
            interaction.channel.bulkDelete(1)
            question.delete()
            await delay(Number(1) * 1000)
            if (!(reply === "cancel")) {
              if ((((reply) || '').startsWith('<@' || ''))) {

                let change = reply.replace('<', '')
                let change1 = change.replace('@', '')
                let change3 = change1.replace('&', '')
                let change2 = change3.replace('>', '')

                db.database.set(String("rank3_invites"), change2)
                db.database.set(String("rank3_invites_simple"), reply)

                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color}`)
                  .setTitle(`${emoji.settings}${configm.title.text1}`)
                  .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
                  .setDescription('**1) Rôle:** ' + db.database.get(String("rank1_invites_simple")) + ',** invitation(s):** ' + db.database.get(String("rank1_invites_number")) + '\n' +
                    '**2) Rôle:** ' + db.database.get(String("rank2_invites_simple")) + ',** invitation(s):** ' + db.database.get(String("rank2_invites_number")) + '\n' +
                    `${emoji.right} ` + '**3) Rôle:** ' + db.database.get(String("rank3_invites_simple")) + ',** invitation(s):** ' + db.database.get(String("rank3_invites_number")))

                interaction.message.edit({ embeds: ([embed]) })


                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color_good}`)
                  .setDescription(`${emoji.tick}${general.response.save_modifications}`)

                interaction.channel.send({
                  embeds: ([embed])
                }).then(async (response_save) => {
                  await delay(Number(3) * 1000)
                  response_save.delete()
                })

              } else {

                db.database.set(String("rank3_invites"), reply)
                db.database.set(String("rank3_invites_simple"), '<@&' + reply + '>')

                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color}`)
                  .setTitle(`${emoji.settings}${configm.title.text1}`)
                  .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
                  .setDescription('**1) Rôle:** ' + db.database.get(String("rank1_invites_simple")) + ',** invitation(s):** ' + db.database.get(String("rank1_invites_number")) + '\n' +
                    '**2) Rôle:** ' + db.database.get(String("rank2_invites_simple")) + ',** invitation(s):** ' + db.database.get(String("rank2_invites_number")) + '\n' +
                    `${emoji.right} ` + '**3) Rôle:** ' + db.database.get(String("rank3_invites_simple")) + ',** invitation(s):** ' + db.database.get(String("rank3_invites_number")))

                interaction.message.edit({ embeds: ([embed]) })


                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color_good}`)
                  .setDescription(`${emoji.tick}${general.response.save_modifications}`)

                interaction.channel.send({
                  embeds: ([embed])
                }).then(async (response_save) => {
                  await delay(Number(3) * 1000)
                  response_save.delete()
                })


              }
            } else {

              var embed = new EmbedBuilder()
                .setColor(`${config.color.color_error}`)
                .setDescription(`${emoji.wrong}${general.response.nosave_modif}`)
              interaction.channel.send({
                embeds: ([embed])
              }).then(async (response_nosave) => {
                await delay(Number(3) * 1000)
                response_nosave.delete()

              })
            }
          })
        })
      }

    }
  }

  if (interaction.customId === "rank_invites1_add1") {
    if (((interaction.member).permissions.has(PermissionsBitField.Flags.Administrator)) || (interaction.member.id === dev)) {

      db.database.add(String('rank1_invites_number'), 1)

      var embed = new EmbedBuilder()
        .setColor(`${config.color.color}`)
        .setTitle(`${emoji.settings}${configm.title.text1}`)
        .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
        .setDescription(`${emoji.right} ` + '**1) Rôle:** ' + db.database.get(String("rank1_invites_simple")) + ',** invitation(s):** ' + db.database.get(String("rank1_invites_number")) + '\n' +
          '**2) Rôle:** ' + db.database.get(String("rank2_invites_simple")) + ',** invitation(s):** ' + db.database.get(String("rank2_invites_number")) + '\n' +
          '**3) Rôle:** ' + db.database.get(String("rank3_invites_simple")) + ',** invitation(s):** ' + db.database.get(String("rank3_invites_number")))
      interaction.message.edit({ embeds: ([embed]) })

      await interaction.deferUpdate()

      var embed = new EmbedBuilder()
        .setColor(`${config.color.color_good}`)
        .setDescription(`${emoji.tick}${general.response.add_1_invites}`)

      interaction.channel.send({
        embeds: ([embed])
      }).then(async (response_save) => {
        await delay(Number(3) * 1000)
        response_save.delete()
      })



    }
  }

  if (interaction.customId === "rank_invites2_add1") {
    if (((interaction.member).permissions.has(PermissionsBitField.Flags.Administrator)) || (interaction.member.id === dev)) {

      db.database.add(String('rank2_invites_number'), 1)

      var embed = new EmbedBuilder()
        .setColor(`${config.color.color}`)
        .setTitle(`${emoji.settings}${configm.title.text1}`)
        .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
        .setDescription('**1) Rôle:** ' + db.database.get(String("rank1_invites_simple")) + ',** invitation(s):** ' + db.database.get(String("rank1_invites_number")) + '\n' +
          `${emoji.right} ` + '**2) Rôle:** ' + db.database.get(String("rank2_invites_simple")) + ',** invitation(s):** ' + db.database.get(String("rank2_invites_number")) + '\n' +
          '**3) Rôle:** ' + db.database.get(String("rank3_invites_simple")) + ',** invitation(s):** ' + db.database.get(String("rank3_invites_number")))

      interaction.message.edit({ embeds: ([embed]) })

      await interaction.deferUpdate()

      var embed = new EmbedBuilder()
        .setColor(`${config.color.color_good}`)
        .setDescription(`${emoji.tick}${general.response.add_1_invites}`)

      interaction.channel.send({
        embeds: ([embed])
      }).then(async (response_save) => {
        await delay(Number(3) * 1000)
        response_save.delete()
      })



    }
  }

  if (interaction.customId === "rank_invites3_add1") {
    if (((interaction.member).permissions.has(PermissionsBitField.Flags.Administrator)) || (interaction.member.id === dev)) {

      db.database.add(String('rank3_invites_number'), 1)

      var embed = new EmbedBuilder()
        .setColor(`${config.color.color}`)
        .setTitle(`${emoji.settings}${configm.title.text1}`)
        .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
        .setDescription('**1) Rôle:** ' + db.database.get(String("rank1_invites_simple")) + ',** invitation(s):** ' + db.database.get(String("rank1_invites_number")) + '\n' +
          '**2) Rôle:** ' + db.database.get(String("rank2_invites_simple")) + ',** invitation(s):** ' + db.database.get(String("rank2_invites_number")) + '\n' +
          `${emoji.right} ` + '**3) Rôle:** ' + db.database.get(String("rank3_invites_simple")) + ',** invitation(s):** ' + db.database.get(String("rank3_invites_number")))

      interaction.message.edit({ embeds: ([embed]) })

      await interaction.deferUpdate()

      var embed = new EmbedBuilder()
        .setColor(`${config.color.color_good}`)
        .setDescription(`${emoji.tick}${general.response.add_1_invites}`)

      interaction.channel.send({
        embeds: ([embed])
      }).then(async (response_save) => {
        await delay(Number(3) * 1000)
        response_save.delete()
      })



    }
  }

  if (interaction.customId === "rank_invites1_add5") {
    if (((interaction.member).permissions.has(PermissionsBitField.Flags.Administrator)) || (interaction.member.id === dev)) {

      db.database.add(String('rank1_invites_number'), 5)

      var embed = new EmbedBuilder()
        .setColor(`${config.color.color}`)
        .setTitle(`${emoji.settings}${configm.title.text1}`)
        .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
        .setDescription(`${emoji.right} ` + '**1) Rôle:** ' + db.database.get(String("rank1_invites_simple")) + ',** invitation(s):** ' + db.database.get(String("rank1_invites_number")) + '\n' +
          '**2) Rôle:** ' + db.database.get(String("rank2_invites_simple")) + ',** invitation(s):** ' + db.database.get(String("rank2_invites_number")) + '\n' +
          '**3) Rôle:** ' + db.database.get(String("rank3_invites_simple")) + ',** invitation(s):** ' + db.database.get(String("rank3_invites_number")))

      interaction.message.edit({ embeds: ([embed]) })

      await interaction.deferUpdate()

      var embed = new EmbedBuilder()
        .setColor(`${config.color.color_good}`)
        .setDescription(`${emoji.tick}${general.response.add_5_invites}`)

      interaction.channel.send({
        embeds: ([embed])
      }).then(async (response_save) => {
        await delay(Number(3) * 1000)
        response_save.delete()
      })



    }
  }

  if (interaction.customId === "rank_invites2_add5") {
    if (((interaction.member).permissions.has(PermissionsBitField.Flags.Administrator)) || (interaction.member.id === dev)) {

      db.database.add(String('rank2_invites_number'), 5)

      var embed = new EmbedBuilder()
        .setColor(`${config.color.color}`)
        .setTitle(`${emoji.settings}${configm.title.text1}`)
        .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
        .setDescription('**1) Rôle:** ' + db.database.get(String("rank1_invites_simple")) + ',** invitation(s):** ' + db.database.get(String("rank1_invites_number")) + '\n' +
          `${emoji.right} ` + '**2) Rôle:** ' + db.database.get(String("rank2_invites_simple")) + ',** invitation(s):** ' + db.database.get(String("rank2_invites_number")) + '\n' +
          '**3) Rôle:** ' + db.database.get(String("rank3_invites_simple")) + ',** invitation(s):** ' + db.database.get(String("rank3_invites_number")))

      interaction.message.edit({ embeds: ([embed]) })

      await interaction.deferUpdate()

      var embed = new EmbedBuilder()
        .setColor(`${config.color.color_good}`)
        .setDescription(`${emoji.tick}${general.response.add_5_invites}`)

      interaction.channel.send({
        embeds: ([embed])
      }).then(async (response_save) => {
        await delay(Number(3) * 1000)
        response_save.delete()
      })



    }
  }

  if (interaction.customId === "rank_invites3_add5") {
    if (((interaction.member).permissions.has(PermissionsBitField.Flags.Administrator)) || (interaction.member.id === dev)) {

      db.database.add(String('rank3_invites_number'), 5)

      var embed = new EmbedBuilder()
        .setColor(`${config.color.color}`)
        .setTitle(`${emoji.settings}${configm.title.text1}`)
        .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
        .setDescription('**1) Rôle:** ' + db.database.get(String("rank1_invites_simple")) + ',** invitation(s):** ' + db.database.get(String("rank1_invites_number")) + '\n' +
          '**2) Rôle:** ' + db.database.get(String("rank2_invites_simple")) + ',** invitation(s):** ' + db.database.get(String("rank2_invites_number")) + '\n' +
          `${emoji.right} ` + '**3) Rôle:** ' + db.database.get(String("rank3_invites_simple")) + ',** invitation(s):** ' + db.database.get(String("rank3_invites_number")))

      interaction.message.edit({ embeds: ([embed]) })

      await interaction.deferUpdate()

      var embed = new EmbedBuilder()
        .setColor(`${config.color.color_good}`)
        .setDescription(`${emoji.tick}${general.response.add_5_invites}`)

      interaction.channel.send({
        embeds: ([embed])
      }).then(async (response_save) => {
        await delay(Number(3) * 1000)
        response_save.delete()
      })



    }
  }


  if (interaction.customId === "rank_invites1_remove5") {
    if (((interaction.member).permissions.has(PermissionsBitField.Flags.Administrator)) || (interaction.member.id === dev)) {
      if (!(db.database.get(String('rank1_invites_number')) < 6)) {

        db.database.subtract(String('rank1_invites_number'), 5)

        var embed = new EmbedBuilder()
          .setColor(`${config.color.color}`)
          .setTitle(`${emoji.settings}${configm.title.text1}`)
          .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
          .setDescription(`${emoji.right} ` + '**1) Rôle:** ' + db.database.get(String("rank1_invites_simple")) + ',** invitation(s):** ' + db.database.get(String("rank1_invites_number")) + '\n' +
            '**2) Rôle:** ' + db.database.get(String("rank2_invites_simple")) + ',** invitation(s):** ' + db.database.get(String("rank2_invites_number")) + '\n' +
            '**3) Rôle:** ' + db.database.get(String("rank3_invites_simple")) + ',** invitation(s):** ' + db.database.get(String("rank3_invites_number")))

        interaction.message.edit({ embeds: ([embed]) })

        await interaction.deferUpdate()

        var embed = new EmbedBuilder()
          .setColor(`${config.color.color_error}`)
          .setDescription(`${emoji.wrong}${general.response.remove_5_invites}`)

        interaction.channel.send({
          embeds: ([embed])
        }).then(async (response_save) => {
          await delay(Number(3) * 1000)
          response_save.delete()
        })



      } else {

        var embed = new EmbedBuilder()
          .setColor(`${config.color.color_error}`)
          .setDescription(`${emoji.wrong}${configm.description.text106}`)

        interaction.channel.send({
          embeds: ([embed])
        }).then(async (resp) => {
          interaction.deferUpdate()
          await delay(Number(3) * 1000)
          resp.delete()
        })
      }
    }
  }

  if (interaction.customId === "rank_invites2_remove5") {
    if (((interaction.member).permissions.has(PermissionsBitField.Flags.Administrator)) || (interaction.member.id === dev)) {
      if (!(db.database.get(String('rank2_invites_number')) < 6)) {

        db.database.subtract(String('rank2_invites_number'), 5)

        var embed = new EmbedBuilder()
          .setColor(`${config.color.color}`)
          .setTitle(`${emoji.settings}${configm.title.text1}`)
          .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
          .setDescription('**1) Rôle:** ' + db.database.get(String("rank1_invites_simple")) + ',** invitation(s):** ' + db.database.get(String("rank1_invites_number")) + '\n' +
            `${emoji.right} ` + '**2) Rôle:** ' + db.database.get(String("rank2_invites_simple")) + ',** invitation(s):** ' + db.database.get(String("rank2_invites_number")) + '\n' +
            '**3) Rôle:** ' + db.database.get(String("rank3_invites_simple")) + ',** invitation(s):** ' + db.database.get(String("rank3_invites_number")))

        interaction.message.edit({ embeds: ([embed]) })

        await interaction.deferUpdate()

        var embed = new EmbedBuilder()
          .setColor(`${config.color.color_error}`)
          .setDescription(`${emoji.wrong}${general.response.remove_5_invites}`)

        interaction.channel.send({
          embeds: ([embed])
        }).then(async (response_save) => {
          await delay(Number(3) * 1000)
          response_save.delete()
        })



      } else {

        var embed = new EmbedBuilder()
          .setColor(`${config.color.color_error}`)
          .setDescription(`${emoji.wrong}${configm.description.text106}`)

        interaction.channel.send({
          embeds: ([embed])
        }).then(async (resp) => {
          interaction.deferUpdate()
          await delay(Number(3) * 1000)
          resp.delete()
        })
      }
    }
  }

  if (interaction.customId === "rank_invites3_remove5") {
    if (((interaction.member).permissions.has(PermissionsBitField.Flags.Administrator)) || (interaction.member.id === dev)) {
      if (!(db.database.get(String('rank3_invites_number')) < 6)) {

        db.database.subtract(String('rank3_invites_number'), 5)

        var embed = new EmbedBuilder()
          .setColor(`${config.color.color}`)
          .setTitle(`${emoji.settings}${configm.title.text1}`)
          .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
          .setDescription('**1) Rôle:** ' + db.database.get(String("rank1_invites_simple")) + ',** invitation(s):** ' + db.database.get(String("rank1_invites_number")) + '\n' +
            '**2) Rôle:** ' + db.database.get(String("rank2_invites_simple")) + ',** invitation(s):** ' + db.database.get(String("rank2_invites_number")) + '\n' +
            `${emoji.right} ` + '**3) Rôle:** ' + db.database.get(String("rank3_invites_simple")) + ',** invitation(s):** ' + db.database.get(String("rank3_invites_number")))

        interaction.message.edit({ embeds: ([embed]) })

        await interaction.deferUpdate()

        var embed = new EmbedBuilder()
          .setColor(`${config.color.color_error}`)
          .setDescription(`${emoji.wrong}${general.response.remove_5_invites}`)

        interaction.channel.send({
          embeds: ([embed])
        }).then(async (response_save) => {
          await delay(Number(3) * 1000)
          response_save.delete()
        })



      } else {

        var embed = new EmbedBuilder()
          .setColor(`${config.color.color_error}`)
          .setDescription(`${emoji.wrong}${configm.description.text106}`)

        interaction.channel.send({
          embeds: ([embed])
        }).then(async (resp) => {
          interaction.deferUpdate()
          await delay(Number(3) * 1000)
          resp.delete()
        })
      }
    }
  }

  if (interaction.customId === "rank_invites1_remove1") {
    if (((interaction.member).permissions.has(PermissionsBitField.Flags.Administrator)) || (interaction.member.id === dev)) {
      if (!(db.database.get(String('rank1_invites_number')) < 2)) {

        db.database.subtract(String('rank1_invites_number'), 1)

        var embed = new EmbedBuilder()
          .setColor(`${config.color.color}`)
          .setTitle(`${emoji.settings}${configm.title.text1}`)
          .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
          .setDescription(`${emoji.right} ` + '**1) Rôle:** ' + db.database.get(String("rank1_invites_simple")) + ',** invitation(s):** ' + db.database.get(String("rank1_invites_number")) + '\n' +
            '**2) Rôle:** ' + db.database.get(String("rank2_invites_simple")) + ',** invitation(s):** ' + db.database.get(String("rank2_invites_number")) + '\n' +
            '**3) Rôle:** ' + db.database.get(String("rank3_invites_simple")) + ',** invitation(s):** ' + db.database.get(String("rank3_invites_number")))

        interaction.message.edit({ embeds: ([embed]) })

        await interaction.deferUpdate()

        var embed = new EmbedBuilder()
          .setColor(`${config.color.color_error}`)
          .setDescription(`${emoji.wrong}${general.response.remove_1_invites}`)

        interaction.channel.send({
          embeds: ([embed])
        }).then(async (response_save) => {
          await delay(Number(3) * 1000)
          response_save.delete()
        })



      } else {

        var embed = new EmbedBuilder()
          .setColor(`${config.color.color_error}`)
          .setDescription(`${emoji.wrong}${configm.description.text106}`)

        interaction.channel.send({
          embeds: ([embed])
        }).then(async (resp) => {
          interaction.deferUpdate()
          await delay(Number(3) * 1000)
          resp.delete()
        })
      }
    }
  }

  if (interaction.customId === "rank_invites2_remove1") {
    if (((interaction.member).permissions.has(PermissionsBitField.Flags.Administrator)) || (interaction.member.id === dev)) {
      if (!(db.database.get(String('rank2_invites_number')) < 2)) {

        db.database.subtract(String('rank2_invites_number'), 1)

        var embed = new EmbedBuilder()
          .setColor(`${config.color.color}`)
          .setTitle(`${emoji.settings}${configm.title.text1}`)
          .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
          .setDescription('**1) Rôle:** ' + db.database.get(String("rank1_invites_simple")) + ',** invitation(s):** ' + db.database.get(String("rank1_invites_number")) + '\n' +
            `${emoji.right} ` + '**2) Rôle:** ' + db.database.get(String("rank2_invites_simple")) + ',** invitation(s):** ' + db.database.get(String("rank2_invites_number")) + '\n' +
            '**3) Rôle:** ' + db.database.get(String("rank3_invites_simple")) + ',** invitation(s):** ' + db.database.get(String("rank3_invites_number")))

        interaction.message.edit({ embeds: ([embed]) })

        await interaction.deferUpdate()

        var embed = new EmbedBuilder()
          .setColor(`${config.color.color_error}`)
          .setDescription(`${emoji.wrong}${general.response.remove_1_invites}`)

        interaction.channel.send({
          embeds: ([embed])
        }).then(async (response_save) => {
          await delay(Number(3) * 1000)
          response_save.delete()
        })



      } else {

        var embed = new EmbedBuilder()
          .setColor(`${config.color.color_error}`)
          .setDescription(`${emoji.wrong}${configm.description.text106}`)

        interaction.channel.send({
          embeds: ([embed])
        }).then(async (resp) => {
          interaction.deferUpdate()
          await delay(Number(3) * 1000)
          resp.delete()
        })
      }
    }
  }

  if (interaction.customId === "rank_invites3_remove1") {
    if (((interaction.member).permissions.has(PermissionsBitField.Flags.Administrator)) || (interaction.member.id === dev)) {
      if (!(db.database.get(String('rank3_invites_number')) < 2)) {

        db.database.subtract(String('rank3_invites_number'), 1)

        var embed = new EmbedBuilder()
          .setColor(`${config.color.color}`)
          .setTitle(`${emoji.settings}${configm.title.text1}`)
          .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
          .setDescription('**1) Rôle:** ' + db.database.get(String("rank1_invites_simple")) + ',** invitation(s):** ' + db.database.get(String("rank1_invites_number")) + '\n' +
            '**2) Rôle:** ' + db.database.get(String("rank2_invites_simple")) + ',** invitation(s):** ' + db.database.get(String("rank2_invites_number")) + '\n' +
            `${emoji.right} ` + '**3) Rôle:** ' + db.database.get(String("rank3_invites_simple")) + ',** invitation(s):** ' + db.database.get(String("rank3_invites_number")))

        interaction.message.edit({ embeds: ([embed]) })

        await interaction.deferUpdate()

        var embed = new EmbedBuilder()
          .setColor(`${config.color.color_error}`)
          .setDescription(`${emoji.wrong}${general.response.remove_1_invites}`)

        interaction.channel.send({
          embeds: ([embed])
        }).then(async (response_save) => {
          await delay(Number(3) * 1000)
          response_save.delete()
        })



      } else {

        var embed = new EmbedBuilder()
          .setColor(`${config.color.color_error}`)
          .setDescription(`${emoji.wrong}${configm.description.text106}`)

        interaction.channel.send({
          embeds: ([embed])
        }).then(async (resp) => {
          interaction.deferUpdate()
          await delay(Number(3) * 1000)
          resp.delete()
        })
      }
    }
  }

  if (interaction.customId === "rank_invites_1_invite") {
    if ((interaction.member.permissions.has(PermissionsBitField.Flags.Administrator)) || (interaction.member.id === dev)) {

      var embed = new EmbedBuilder()
        .setColor(`${config.color.color}`)
        .setTitle(`${emoji.settings}${configm.title.text1}`)
        .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
        .setDescription(`${emoji.right} ` + '**1) Rôle:** ' + db.database.get(String("rank1_invites_simple")) + ',** invitation(s):** ' + db.database.get(String("rank1_invites_number")) + '\n' +
          '**2) Rôle:** ' + db.database.get(String("rank2_invites_simple")) + ',** invitation(s):** ' + db.database.get(String("rank2_invites_number")) + '\n' +
          '**3) Rôle:** ' + db.database.get(String("rank3_invites_simple")) + ',** invitation(s):** ' + db.database.get(String("rank3_invites_number")))

      const rank_invites1_add1 = new ButtonBuilder()
        .setEmoji(`${emoji.add}`)
        .setStyle(ButtonStyle.Secondary)
        .setCustomId("rank_invites1_add1")
        .setLabel("Ajouter 1")

      const rank_invites1_add5 = new ButtonBuilder()
        .setEmoji(`${emoji.add}`)
        .setStyle(ButtonStyle.Danger)
        .setCustomId("rank_invites1_add5")
        .setLabel("Ajouter 5")

      const rank_invites1_remove1 = new ButtonBuilder()
        .setEmoji(`${emoji.remove}`)
        .setStyle(ButtonStyle.Secondary)
        .setCustomId("rank_invites1_remove1")
        .setLabel("Retirer 1")

      const rank_invites1_remove5 = new ButtonBuilder()
        .setEmoji(`${emoji.remove}`)
        .setStyle(ButtonStyle.Danger)
        .setCustomId("rank_invites1_remove5")
        .setLabel("Retirer 5")

      const rank_invites_good_return = new ButtonBuilder()
        .setEmoji(`${emoji.return}`)
        .setStyle(ButtonStyle.Primary)
        .setCustomId("rank_invites_good_return")

      const menu_rank_invites_1_add = new ActionRowBuilder()
        .addComponents(rank_invites1_add1)
        .addComponents(rank_invites1_add5)
        .addComponents(rank_invites1_remove5)
        .addComponents(rank_invites1_remove1)

      const menu_rank_invites_1 = new ActionRowBuilder()
        .addComponents(rank_invites_good_return)

      interaction.message.edit({ embeds: ([embed]), components: [menu_rank_invites_1_add, menu_rank_invites_1] })

      interaction.deferUpdate()

    }
  }

  if (interaction.customId === "rank_invites_2_invite") {
    if ((interaction.member.permissions.has(PermissionsBitField.Flags.Administrator)) || (interaction.member.id === dev)) {

      var embed = new EmbedBuilder()
        .setColor(`${config.color.color}`)
        .setTitle(`${emoji.settings}${configm.title.text1}`)
        .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
        .setDescription('**1) Rôle:** ' + db.database.get(String("rank1_invites_simple")) + ',** invitation(s):** ' + db.database.get(String("rank1_invites_number")) + '\n' +
          `${emoji.right} ` + '**2) Rôle:** ' + db.database.get(String("rank2_invites_simple")) + ',** invitation(s):** ' + db.database.get(String("rank2_invites_number")) + '\n' +
          '**3) Rôle:** ' + db.database.get(String("rank3_invites_simple")) + ',** invitation(s):** ' + db.database.get(String("rank3_invites_number")))

      const rank_invites2_add1 = new ButtonBuilder()
        .setEmoji(`${emoji.add}`)
        .setStyle(ButtonStyle.Secondary)
        .setCustomId("rank_invites2_add1")
        .setLabel("Ajouter 1")

      const rank_invites2_add5 = new ButtonBuilder()
        .setEmoji(`${emoji.add}`)
        .setStyle(ButtonStyle.Danger)
        .setCustomId("rank_invites2_add5")
        .setLabel("Ajouter 5")

      const rank_invites2_remove1 = new ButtonBuilder()
        .setEmoji(`${emoji.remove}`)
        .setStyle(ButtonStyle.Secondary)
        .setCustomId("rank_invites2_remove1")
        .setLabel("Retirer 1")

      const rank_invites2_remove5 = new ButtonBuilder()
        .setEmoji(`${emoji.remove}`)
        .setStyle(ButtonStyle.Danger)
        .setCustomId("rank_invites2_remove5")
        .setLabel("Retirer 5")

      const rank_invites_good2_return = new ButtonBuilder()
        .setEmoji(`${emoji.return}`)
        .setStyle(ButtonStyle.Primary)
        .setCustomId("rank_invites_good2_return")

      const menu_rank_invites_1_add = new ActionRowBuilder()
        .addComponents(rank_invites2_add1)
        .addComponents(rank_invites2_add5)
        .addComponents(rank_invites2_remove5)
        .addComponents(rank_invites2_remove1)

      const menu_rank_invites_1 = new ActionRowBuilder()
        .addComponents(rank_invites_good2_return)

      interaction.message.edit({ embeds: ([embed]), components: [menu_rank_invites_1_add, menu_rank_invites_1] })

      interaction.deferUpdate()

    }
  }

  if (interaction.customId === "rank_invites_3_invite") {
    if ((interaction.member.permissions.has(PermissionsBitField.Flags.Administrator)) || (interaction.member.id === dev)) {

      var embed = new EmbedBuilder()
        .setColor(`${config.color.color}`)
        .setTitle(`${emoji.settings}${configm.title.text1}`)
        .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
        .setDescription('**1) Rôle:** ' + db.database.get(String("rank1_invites_simple")) + ',** invitation(s):** ' + db.database.get(String("rank1_invites_number")) + '\n' +
          '**2) Rôle:** ' + db.database.get(String("rank2_invites_simple")) + ',** invitation(s):** ' + db.database.get(String("rank2_invites_number")) + '\n' +
          `${emoji.right} ` + '**3) Rôle:** ' + db.database.get(String("rank3_invites_simple")) + ',** invitation(s):** ' + db.database.get(String("rank3_invites_number")))


      const rank_invites3_add1 = new ButtonBuilder()
        .setEmoji(`${emoji.add}`)
        .setStyle(ButtonStyle.Secondary)
        .setCustomId("rank_invites3_add1")
        .setLabel("Ajouter 1")

      const rank_invites3_add5 = new ButtonBuilder()
        .setEmoji(`${emoji.add}`)
        .setStyle(ButtonStyle.Danger)
        .setCustomId("rank_invites3_add5")
        .setLabel("Ajouter 5")

      const rank_invites3_remove1 = new ButtonBuilder()
        .setEmoji(`${emoji.remove}`)
        .setStyle(ButtonStyle.Secondary)
        .setCustomId("rank_invites3_remove1")
        .setLabel("Retirer 1")

      const rank_invites3_remove5 = new ButtonBuilder()
        .setEmoji(`${emoji.remove}`)
        .setStyle(ButtonStyle.Danger)
        .setCustomId("rank_invites3_remove5")
        .setLabel("Retirer 5")

      const rank_invites_good3_return = new ButtonBuilder()
        .setEmoji(`${emoji.return}`)
        .setStyle(ButtonStyle.Primary)
        .setCustomId("rank_invites_good3_return")

      const menu_rank_invites_1_add = new ActionRowBuilder()
        .addComponents(rank_invites3_add1)
        .addComponents(rank_invites3_add5)
        .addComponents(rank_invites3_remove5)
        .addComponents(rank_invites3_remove1)

      const menu_rank_invites_1 = new ActionRowBuilder()
        .addComponents(rank_invites_good3_return)

      interaction.message.edit({ embeds: ([embed]), components: [menu_rank_invites_1_add, menu_rank_invites_1] })

      interaction.deferUpdate()

    }
  }

  if (interaction.customId === "rank_invites_good3_return") {
    if ((interaction.member.permissions.has(PermissionsBitField.Flags.Administrator)) || (interaction.member.id === dev)) {

      var embed = new EmbedBuilder()
        .setColor(`${config.color.color}`)
        .setTitle(`${emoji.settings}${configm.title.text1}`)
        .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
        .setDescription('**1) Rôle:** ' + db.database.get(String("rank1_invites_simple")) + ',** invitation(s):** ' + db.database.get(String("rank1_invites_number")) + '\n' +
          '**2) Rôle:** ' + db.database.get(String("rank2_invites_simple")) + ',** invitation(s):** ' + db.database.get(String("rank2_invites_number")) + '\n' +
          `${emoji.right} ` + '**3) Rôle:** ' + db.database.get(String("rank3_invites_simple")) + ',** invitation(s):** ' + db.database.get(String("rank3_invites_number")))


      const rank_invites_3_rank = new ButtonBuilder()
        .setEmoji(`${emoji.protector}`)
        .setStyle(ButtonStyle.Secondary)
        .setCustomId("rank_invites_3_rank")

      const rank_invites_3_invite = new ButtonBuilder()
        .setEmoji(`${emoji.link}`)
        .setStyle(ButtonStyle.Secondary)
        .setCustomId("rank_invites_3_invite")

      const rank_invites_return = new ButtonBuilder()
        .setEmoji(`${emoji.return}`)
        .setStyle(ButtonStyle.Primary)
        .setCustomId("rank_invites_return_rank")

      const menu_rank = new ActionRowBuilder()
        .addComponents(rank_invites_3_rank)
        .addComponents(rank_invites_3_invite)
        .addComponents(rank_invites_return)

      interaction.message.edit({ embeds: ([embed]), components: [menu_rank] })

      interaction.deferUpdate()

    }
  }

  if (interaction.customId === "rank_invites_good2_return") {
    if ((interaction.member.permissions.has(PermissionsBitField.Flags.Administrator)) || (interaction.member.id === dev)) {

      var embed = new EmbedBuilder()
        .setColor(`${config.color.color}`)
        .setTitle(`${emoji.settings}${configm.title.text1}`)
        .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
        .setDescription('**1) Rôle:** ' + db.database.get(String("rank1_invites_simple")) + ',** invitation(s):** ' + db.database.get(String("rank1_invites_number")) + '\n' +
          `${emoji.right} ` + '**2) Rôle:** ' + db.database.get(String("rank2_invites_simple")) + ',** invitation(s):** ' + db.database.get(String("rank2_invites_number")) + '\n' +
          '**3) Rôle:** ' + db.database.get(String("rank3_invites_simple")) + ',** invitation(s):** ' + db.database.get(String("rank3_invites_number")))


      const rank_invites_2_rank = new ButtonBuilder()
        .setEmoji(`${emoji.protector}`)
        .setStyle(ButtonStyle.Secondary)
        .setCustomId("rank_invites_2_rank")

      const rank_invites_2_invite = new ButtonBuilder()
        .setEmoji(`${emoji.link}`)
        .setStyle(ButtonStyle.Secondary)
        .setCustomId("rank_invites_2_invite")

      const rank_invites_return = new ButtonBuilder()
        .setEmoji(`${emoji.return}`)
        .setStyle(ButtonStyle.Primary)
        .setCustomId("rank_invites_return_rank")

      const menu_rank = new ActionRowBuilder()
        .addComponents(rank_invites_2_rank)
        .addComponents(rank_invites_2_invite)
        .addComponents(rank_invites_return)

      interaction.message.edit({ embeds: ([embed]), components: [menu_rank] })

      interaction.deferUpdate()

    }
  }

  if (interaction.customId === "rank_invites_good_return") {
    if ((interaction.member.permissions.has(PermissionsBitField.Flags.Administrator)) || (interaction.member.id === dev)) {

      var embed = new EmbedBuilder()
        .setColor(`${config.color.color}`)
        .setTitle(`${emoji.settings}${configm.title.text1}`)
        .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
        .setDescription(`${emoji.right} ` + '**1) Rôle:** ' + db.database.get(String("rank1_invites_simple")) + ',** invitation(s):** ' + db.database.get(String("rank1_invites_number")) + '\n' +
          '**2) Rôle:** ' + db.database.get(String("rank2_invites_simple")) + ',** invitation(s):** ' + db.database.get(String("rank2_invites_number")) + '\n' +
          '**3) Rôle:** ' + db.database.get(String("rank3_invites_simple")) + ',** invitation(s):** ' + db.database.get(String("rank3_invites_number")))

      const rank_invites_1_rank = new ButtonBuilder()
        .setEmoji(`${emoji.protector}`)
        .setStyle(ButtonStyle.Secondary)
        .setCustomId("rank_invites_1_rank")

      const rank_invites_1_invite = new ButtonBuilder()
        .setEmoji(`${emoji.link}`)
        .setStyle(ButtonStyle.Secondary)
        .setCustomId("rank_invites_1_invite")

      const rank_invites_return = new ButtonBuilder()
        .setEmoji(`${emoji.return}`)
        .setStyle(ButtonStyle.Primary)
        .setCustomId("rank_invites_return_rank")

      const menu_rank = new ActionRowBuilder()
        .addComponents(rank_invites_1_rank)
        .addComponents(rank_invites_1_invite)
        .addComponents(rank_invites_return)

      interaction.message.edit({ embeds: ([embed]), components: [menu_rank] })

      interaction.deferUpdate()

    }
  }


  if (interaction.customId === "rank_invites_1") {
    if ((interaction.member.permissions.has(PermissionsBitField.Flags.Administrator)) || (interaction.member.id === dev)) {

      var embed = new EmbedBuilder()
        .setColor(`${config.color.color}`)
        .setTitle(`${emoji.settings}${configm.title.text1}`)
        .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
        .setDescription(`${emoji.right} ` + '**1) Rôle:** ' + db.database.get(String("rank1_invites_simple")) + ',** invitation(s):** ' + db.database.get(String("rank1_invites_number")) + '\n' +
          '**2) Rôle:** ' + db.database.get(String("rank2_invites_simple")) + ',** invitation(s):** ' + db.database.get(String("rank2_invites_number")) + '\n' +
          '**3) Rôle:** ' + db.database.get(String("rank3_invites_simple")) + ',** invitation(s):** ' + db.database.get(String("rank3_invites_number")))

      const rank_invites_1_rank = new ButtonBuilder()
        .setEmoji(`${emoji.protector}`)
        .setStyle(ButtonStyle.Secondary)
        .setCustomId("rank_invites_1_rank")

      const rank_invites_1_invite = new ButtonBuilder()
        .setEmoji(`${emoji.link}`)
        .setStyle(ButtonStyle.Secondary)
        .setCustomId("rank_invites_1_invite")

      const rank_invites_return = new ButtonBuilder()
        .setEmoji(`${emoji.return}`)
        .setStyle(ButtonStyle.Primary)
        .setCustomId("rank_invites_return_rank")

      const menu_rank = new ActionRowBuilder()
        .addComponents(rank_invites_1_rank)
        .addComponents(rank_invites_1_invite)
        .addComponents(rank_invites_return)

      interaction.message.edit({ embeds: ([embed]), components: [menu_rank] })

      interaction.deferUpdate()

    }
  }

  if (interaction.customId === "rank_invites_2") {
    if ((interaction.member.permissions.has(PermissionsBitField.Flags.Administrator)) || (interaction.member.id === dev)) {

      var embed = new EmbedBuilder()
        .setColor(`${config.color.color}`)
        .setTitle(`${emoji.settings}${configm.title.text1}`)
        .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
        .setDescription('**1) Rôle:** ' + db.database.get(String("rank1_invites_simple")) + ',** invitation(s):** ' + db.database.get(String("rank1_invites_number")) + '\n' +
          `${emoji.right} ` + '**2) Rôle:** ' + db.database.get(String("rank2_invites_simple")) + ',** invitation(s):** ' + db.database.get(String("rank2_invites_number")) + '\n' +
          '**3) Rôle:** ' + db.database.get(String("rank3_invites_simple")) + ',** invitation(s):** ' + db.database.get(String("rank3_invites_number")))

      const rank_invites_2_rank = new ButtonBuilder()
        .setEmoji(`${emoji.protector}`)
        .setStyle(ButtonStyle.Secondary)
        .setCustomId("rank_invites_2_rank")

      const rank_invites_2_invite = new ButtonBuilder()
        .setEmoji(`${emoji.link}`)
        .setStyle(ButtonStyle.Secondary)
        .setCustomId("rank_invites_2_invite")

      const rank_invites_return = new ButtonBuilder()
        .setEmoji(`${emoji.return}`)
        .setStyle(ButtonStyle.Primary)
        .setCustomId("rank_invites_return_rank")

      const menu_rank = new ActionRowBuilder()
        .addComponents(rank_invites_2_rank)
        .addComponents(rank_invites_2_invite)
        .addComponents(rank_invites_return)

      interaction.message.edit({ embeds: ([embed]), components: [menu_rank] })

      interaction.deferUpdate()

    }
  }

  if (interaction.customId === "rank_invites_3") {
    if ((interaction.member.permissions.has(PermissionsBitField.Flags.Administrator)) || (interaction.member.id === dev)) {

      var embed = new EmbedBuilder()
        .setColor(`${config.color.color}`)
        .setTitle(`${emoji.settings}${configm.title.text1}`)
        .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
        .setDescription('**1) Rôle:** ' + db.database.get(String("rank1_invites_simple")) + ',** invitation(s):** ' + db.database.get(String("rank1_invites_number")) + '\n' +
          '**2) Rôle:** ' + db.database.get(String("rank2_invites_simple")) + ',** invitation(s):** ' + db.database.get(String("rank2_invites_number")) + '\n' +
          `${emoji.right} ` + '**3) Rôle:** ' + db.database.get(String("rank3_invites_simple")) + ',** invitation(s):** ' + db.database.get(String("rank3_invites_number")))

      const rank_invites_3_rank = new ButtonBuilder()
        .setEmoji(`${emoji.protector}`)
        .setStyle(ButtonStyle.Secondary)
        .setCustomId("rank_invites_3_rank")

      const rank_invites_3_invite = new ButtonBuilder()
        .setEmoji(`${emoji.link}`)
        .setStyle(ButtonStyle.Secondary)
        .setCustomId("rank_invites_3_invite")

      const rank_invites_return = new ButtonBuilder()
        .setEmoji(`${emoji.return}`)
        .setStyle(ButtonStyle.Primary)
        .setCustomId("rank_invites_return_rank")

      const menu_rank = new ActionRowBuilder()
        .addComponents(rank_invites_3_rank)
        .addComponents(rank_invites_3_invite)
        .addComponents(rank_invites_return)

      interaction.message.edit({ embeds: ([embed]), components: [menu_rank] })

      interaction.deferUpdate()

    }
  }


  if (interaction.customId === "config_invites_rank") {
    if ((interaction.member.permissions.has(PermissionsBitField.Flags.Administrator)) || (interaction.member.id === dev)) {
      if ((db.module.get(String("invites"))) === "on") {

        var embed = new EmbedBuilder()
          .setColor(`${config.color.color}`)
          .setTitle(`${emoji.settings}${configm.title.text1}`)
          .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
          .setDescription('**1) Rôle:** ' + db.database.get(String("rank1_invites_simple")) + ' **, invitation(s):** ' + db.database.get(String("rank1_invites_number")) + '\n' +
            '**2) Rôle:** ' + db.database.get(String("rank2_invites_simple")) + ',** invitation(s):** ' + db.database.get(String("rank2_invites_number")) + '\n' +
            '**3) Rôle:** ' + db.database.get(String("rank3_invites_simple")) + ',** invitation(s):** ' + db.database.get(String("rank3_invites_number")))

        const rank_invites_1 = new ButtonBuilder()
          .setEmoji(`${emoji.one}`)
          .setStyle(ButtonStyle.Secondary)
          .setCustomId("rank_invites_1")

        const rank_invites_2 = new ButtonBuilder()
          .setEmoji(`${emoji.two}`)
          .setStyle(ButtonStyle.Secondary)
          .setCustomId("rank_invites_2")

        const rank_invites_3 = new ButtonBuilder()
          .setEmoji(`${emoji.three}`)
          .setStyle(ButtonStyle.Secondary)
          .setCustomId("rank_invites_3")


        const rank_invites_return = new ButtonBuilder()
          .setEmoji(`${emoji.return}`)
          .setStyle(ButtonStyle.Primary)
          .setCustomId("rank_invites_return")

        const menu_rank_invites = new ActionRowBuilder()
          .addComponents(rank_invites_1)
          .addComponents(rank_invites_2)
          .addComponents(rank_invites_3)

        const menu_rank_invites1 = new ActionRowBuilder()
          .addComponents(rank_invites_return)

        interaction.message.edit({ embeds: ([embed]), components: [menu_rank_invites, menu_rank_invites1] })

        interaction.deferUpdate()


      }
    }
  }


  if (interaction.customId === "config_button_invites") {
    if ((interaction.member.permissions.has(PermissionsBitField.Flags.Administrator)) || (interaction.member.id === dev)) {
      if ((db.module.get(String("invites"))) === "on") {


        if (!(db.database.has(String("channel_invites")))) {
          db.database.set(String("channel_invites"), "*`Non défini`*")
        }
        if (!(db.database.has(String("channel_invites_simple")))) {
          db.database.set(String("channel_invites_simple"), "*`Non défini`*")
        }
        if (!(db.database.has(String("message_invites")))) {
          db.database.set(String("message_invites"), "**🧟‍♂️ | {user.mention} nous a rejoint\n 🦸‍♂️ | Il a été invité par {inviter.name}\n 🧸 | Il possède maintenant {invites} invitations\n 🍃 | Bonne continuation !**")
        }
        if (!(db.database.has(String("rank1_invites")))) {
          db.database.set(String("rank1_invites"), "*`Non défini`*")
        }
        if (!(db.database.has(String("rank1_invites_simple")))) {
          db.database.set(String("rank1_invites_simple"), "*`Non défini`*")
        }
        if (!(db.database.has(String("rank2_invites")))) {
          db.database.set(String("rank2_invites"), "*`Non défini`*")
        }
        if (!(db.database.has(String("rank2_invites_simple")))) {
          db.database.set(String("rank2_invites_simple"), "*`Non défini`*")
        }
        if (!(db.database.has(String("rank3_invites")))) {
          db.database.set(String("rank3_invites"), "*`Non défini`*")
        }
        if (!(db.database.has(String("rank3_invites_simple")))) {
          db.database.set(String("rank3_invites_simple"), "*`Non défini`*")
        }
        if (!(db.database.has(String("rank1_invites_number")))) {
          db.database.set(String("rank1_invites_number"), 0)
        }
        if (!(db.database.has(String("rank2_invites_number")))) {
          db.database.set(String("rank2_invites_number"), 0)
        }
        if (!(db.database.has(String("rank3_invites_number")))) {
          db.database.set(String("rank3_invites_number"), 0)
        }


        var embed = new EmbedBuilder()
          .setColor(`${config.color.color}`)
          .setTitle(`${emoji.settings}${configm.title.text1}`)
          .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
          .setDescription(`${emoji.chanel}${configm.description.text99}` + db.database.get(String("channel_invites_simple")) + '\n'
            + `${emoji.protector}${configm.description.text100}` + '\n'
            + `${emoji.rules}${configm.description.text101}` + '```' + db.database.get(String("message_invites")) + '```\n'
            + `${emoji.color}${configm.description.text102}`)

        const config_invites_channel = new ButtonBuilder()
          .setEmoji(`${emoji.chanel}`)
          .setStyle(ButtonStyle.Secondary)
          .setCustomId("config_invites_channel")

        const config_invites_rank = new ButtonBuilder()
          .setEmoji(`${emoji.protector}`)
          .setStyle(ButtonStyle.Secondary)
          .setCustomId("config_invites_rank")

        const config_invites_message = new ButtonBuilder()
          .setEmoji(`${emoji.rules}`)
          .setStyle(ButtonStyle.Secondary)
          .setCustomId("config_invites_message")

        const config_invites_reset = new ButtonBuilder()
          .setEmoji(`${emoji.bin}`)
          .setStyle(ButtonStyle.Danger)
          .setCustomId("config_invites_reset")

        const button_config_retour = new ButtonBuilder()
          .setCustomId('buton_config_retour')
          .setStyle(ButtonStyle.Primary)
          .setEmoji(`${emoji.return}`)

        const menu_invites_config = new ActionRowBuilder()
          .addComponents(config_invites_channel)
          .addComponents(config_invites_rank)
          .addComponents(config_invites_message)

        const menu_invites_config1 = new ActionRowBuilder()
          .addComponents(config_invites_reset)
          .addComponents(button_config_retour)

        interaction.message.edit({ embeds: ([embed]), components: [menu_invites_config, menu_invites_config1] })

        interaction.deferUpdate()

      } else {
        var embed = new EmbedBuilder()
          .setColor(`${config.color.color_error}`)
          .setDescription(`${emoji.wrong}${general.error.module_activate1}` + ' *`Invitations`* ' + `${general.error.module_activate2}`)

        interaction.reply({ embeds: ([embed]), ephemeral: true })
      }
    }
  }

  if (interaction.customId === "button_welcome_channel") {
    if (((interaction.member).permissions.has(PermissionsBitField.Flags.Administrator)) || (interaction.member.id === dev)) {
      interaction.deferUpdate()
      interaction.channel.send(`${emoji.pen}${configm.description.text90}`).then(async (question) => {
        (interaction.channel).awaitMessages({
          filter: (m) => m.author.id === interaction.member.id,
          time: (500 * 60 * 100),
          max: 1
        }).then(async (collected) => {
          reply = collected.first().content;
          message = collected.first();
          interaction.channel.bulkDelete(1)
          question.delete()
          await delay(Number(1) * 1000)
          if (!(reply === "cancel")) {
            if ((!(((reply) || '').startsWith('<#' || '')))) {


              try {

                client.channels.cache.get(reply).send({ content: '**`' + interaction.user.tag + '`**' + " a configuré **`" + client.channels.cache.get(reply).name + "`** comme le salon d'envoi des messages de bienvenue'." })

                db.database.set(String('channel_welcome'), (reply));
                db.database.set(String('channel_welcome_simple'), '<#' + (reply) + '>');

                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color_good}`)
                  .setDescription(`${emoji.tick}${general.response.save_modifications}`)

                interaction.channel.send({
                  embeds: ([embed])
                }).then(async (response_save) => {
                  await delay(Number(3) * 1000)
                  response_save.delete()
                })

                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color}`)
                  .setTitle(`${emoji.settings}${configm.title.text1}`)
                  .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
                  .setDescription(`${emoji.chanel}${configm.description.text86}` + db.database.get(String("channel_welcome_simple"))
                    + '\n' + `${emoji.reward}${configm.description.text87}` + db.database.get(String("rank_give_simple"))
                    + '\n' + `${emoji.list}${configm.description.text88}` + '```' + db.database.get(String("message_join")) + '```'
                    + '\n' + `${emoji.rules}${configm.description.text93}` + '```' + db.database.get(String("message_join_mp")) + '```'
                    + '\n' + `${emoji.color}${configm.description.text89}`)

                interaction.message.edit({ embeds: ([embed]) })

                console.log(chalk.green("L'utilisateur " + interaction.user.tag + " a configuré le salon d'envoi des messages de bienvenue sur le salon " + client.channels.cache.get(reply).name + "."))

              } catch (err) {

                console.log(chalk.red(err + ' (SALON RENSEIGNE INTROUVABLE)'))

                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color_error}`)
                  .setDescription(`${emoji.wrong}${general.error.channel_notfound}`)

                interaction.channel.send({
                  embeds: ([embed])
                }).then(async (response_error) => {
                  await delay(Number(3) * 1000)
                  response_error.delete()

                })



              }

            } else {

              try {

                let change = reply.replace('<', '')
                let change1 = change.replace('#', '')
                let change2 = change1.replace('>', '')

                db.database.set(String('channel_welcome'), change2)
                db.database.set(String('channel_welcome_simple'), reply);

                client.channels.cache.get(change2).send({ content: '**`' + interaction.user.tag + '`**' + " a configuré **`" + client.channels.cache.get(change2).name + "`** comme le salon d'envoi des messages de bienvenue." })

                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color_good}`)
                  .setDescription(`${emoji.tick}${general.response.save_modifications}`)

                interaction.channel.send({
                  embeds: ([embed])
                }).then(async (response_save) => {
                  await delay(Number(3) * 1000)
                  response_save.delete()
                })

                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color}`)
                  .setTitle(`${emoji.settings}${configm.title.text1}`)
                  .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
                  .setDescription(`${emoji.chanel}${configm.description.text86}` + db.database.get(String("channel_welcome_simple"))
                    + '\n' + `${emoji.reward}${configm.description.text87}` + db.database.get(String("rank_give_simple"))
                    + '\n' + `${emoji.list}${configm.description.text88}` + '```' + db.database.get(String("message_join")) + '```'
                    + '\n' + `${emoji.rules}${configm.description.text93}` + '```' + db.database.get(String("message_join_mp")) + '```'
                    + '\n' + `${emoji.color}${configm.description.text89}`)

                interaction.message.edit({ embeds: ([embed]) })

                console.log(chalk.green("L'utilisateur " + interaction.user.tag + " a configuré le salon d'envoi des messages de bienvenue sur le salon " + client.channels.cache.get(change2).name + "."))

              } catch (err) {

                console.log(chalk.red(err + ' (SALON RENSEIGNE INTROUVABLE)'))

                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color_error}`)
                  .setDescription(`${emoji.wrong}${general.error.channel_notfound}`)

                interaction.channel.send({
                  embeds: ([embed])
                }).then(async (response_error) => {
                  await delay(Number(3) * 1000)
                  response_error.delete()

                })



              }

            }
          } else {

            var embed = new EmbedBuilder()
              .setColor(`${config.color.color_error}`)
              .setDescription(`${emoji.wrong}${general.response.nosave_modif}`)
            interaction.channel.send({
              embeds: ([embed])
            }).then(async (response_nosave) => {
              await delay(Number(3) * 1000)
              response_nosave.delete()

            })
          }
        })
      })
    }
  }

  if (interaction.customId === "config_invites_channel") {
    if (((interaction.member).permissions.has(PermissionsBitField.Flags.Administrator)) || (interaction.member.id === dev)) {
      interaction.deferUpdate()
      interaction.channel.send(`${emoji.pen}${configm.description.text103}`).then(async (question) => {
        (interaction.channel).awaitMessages({
          filter: (m) => m.author.id === interaction.member.id,
          time: (500 * 60 * 100),
          max: 1
        }).then(async (collected) => {
          reply = collected.first().content;
          message = collected.first();
          interaction.channel.bulkDelete(1)
          question.delete()
          await delay(Number(1) * 1000)
          if (!(reply === "cancel")) {
            if ((!(((reply) || '').startsWith('<#' || '')))) {


              try {

                client.channels.cache.get(reply).send({ content: '**`' + interaction.user.tag + '`**' + " a configuré **`" + client.channels.cache.get(reply).name + "`** comme le salon d'envoi des messages d'invitations." })

                db.database.set(String('channel_invites'), (reply));
                db.database.set(String('channel_invites_simple'), '<#' + (reply) + '>');

                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color_good}`)
                  .setDescription(`${emoji.tick}${general.response.save_modifications}`)

                interaction.channel.send({
                  embeds: ([embed])
                }).then(async (response_save) => {
                  await delay(Number(3) * 1000)
                  response_save.delete()
                })

                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color}`)
                  .setTitle(`${emoji.settings}${configm.title.text1}`)
                  .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
                  .setDescription(`${emoji.chanel}${configm.description.text99}` + db.database.get(String("channel_invites_simple")) + '\n'
                    + `${emoji.protector}${configm.description.text100}` + '\n'
                    + `${emoji.rules}${configm.description.text101}` + '```' + db.database.get(String("message_invites")) + '```\n'
                    + `${emoji.color}${configm.description.text102}`)

                interaction.message.edit({ embeds: ([embed]) })

                console.log(chalk.green("L'utilisateur " + interaction.user.tag + " a configuré le salon d'envoi des messages d'invitation sur le salon " + client.channels.cache.get(reply).name + "."))

              } catch (err) {

                console.log(chalk.red(err + ' (SALON RENSEIGNE INTROUVABLE)'))

                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color_error}`)
                  .setDescription(`${emoji.wrong}${general.error.channel_notfound}`)

                interaction.channel.send({
                  embeds: ([embed])
                }).then(async (response_error) => {
                  await delay(Number(3) * 1000)
                  response_error.delete()

                })



              }

            } else {

              try {

                let change = reply.replace('<', '')
                let change1 = change.replace('#', '')
                let change2 = change1.replace('>', '')

                db.database.set(String('channel_invites'), change2)
                db.database.set(String('channel_invites_simple'), reply);

                client.channels.cache.get(change2).send({ content: '**`' + interaction.user.tag + '`**' + " a configuré **`" + client.channels.cache.get(change2).name + "`** comme le salon d'envoi des messages d'invitations." })

                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color_good}`)
                  .setDescription(`${emoji.tick}${general.response.save_modifications}`)

                interaction.channel.send({
                  embeds: ([embed])
                }).then(async (response_save) => {
                  await delay(Number(3) * 1000)
                  response_save.delete()
                })

                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color}`)
                  .setTitle(`${emoji.settings}${configm.title.text1}`)
                  .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
                  .setDescription(`${emoji.chanel}${configm.description.text99}` + db.database.get(String("channel_invites_simple")) + '\n'
                    + `${emoji.protector}${configm.description.text100}` + '\n'
                    + `${emoji.rules}${configm.description.text101}` + '```' + db.database.get(String("message_invites")) + '```\n'
                    + `${emoji.color}${configm.description.text102}`)

                interaction.message.edit({ embeds: ([embed]) })

                console.log(chalk.green("L'utilisateur " + interaction.user.tag + " a configuré le salon d'envoi des messages d'invitations sur le salon " + client.channels.cache.get(change2).name + "."))

              } catch (err) {

                console.log(chalk.red(err + ' (SALON RENSEIGNE INTROUVABLE)'))

                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color_error}`)
                  .setDescription(`${emoji.wrong}${general.error.channel_notfound}`)

                interaction.channel.send({
                  embeds: ([embed])
                }).then(async (response_error) => {
                  await delay(Number(3) * 1000)
                  response_error.delete()

                })



              }

            }
          } else {

            var embed = new EmbedBuilder()
              .setColor(`${config.color.color_error}`)
              .setDescription(`${emoji.wrong}${general.response.nosave_modif}`)
            interaction.channel.send({
              embeds: ([embed])
            }).then(async (response_nosave) => {
              await delay(Number(3) * 1000)
              response_nosave.delete()

            })
          }
        })
      })
    }
  }

  if (interaction.customId === "button_welcome_rank_give") {
    if (db.module.get(String('welcome')) === "on") {
      if ((interaction.member.permissions.has(PermissionsBitField.Flags.Administrator)) || (interaction.member.id === dev)) {
        interaction.deferUpdate()
        interaction.channel.send(`${emoji.pen}${configm.description.text91}`).then(async (question) => {
          (interaction.channel).awaitMessages({
            filter: (m) => m.author.id === interaction.member.id,
            time: (500 * 60 * 100),
            max: 1
          }).then(async (collected) => {
            reply = collected.first().content;
            message = collected.first();
            interaction.channel.bulkDelete(1)
            question.delete()
            await delay(Number(1) * 1000)
            if (!(reply === "cancel")) {
              if ((((reply) || '').startsWith('<@' || ''))) {

                let change = reply.replace('<', '')
                let change1 = change.replace('@', '')
                let change3 = change1.replace('&', '')
                let change2 = change3.replace('>', '')

                db.database.set(String("rank_give"), change2)
                db.database.set(String("rank_give_simple"), reply)

                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color}`)
                  .setTitle(`${emoji.settings}${configm.title.text1}`)
                  .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
                  .setDescription(`${emoji.chanel}${configm.description.text86}` + db.database.get(String("channel_welcome_simple"))
                    + '\n' + `${emoji.reward}${configm.description.text87}` + db.database.get(String("rank_give_simple"))
                    + '\n' + `${emoji.list}${configm.description.text88}` + '```' + db.database.get(String("message_join")) + '```'
                    + '\n' + `${emoji.rules}${configm.description.text93}` + '```' + db.database.get(String("message_join_mp")) + '```'
                    + '\n' + `${emoji.color}${configm.description.text89}`)

                interaction.message.edit({ embeds: ([embed]) })


                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color_good}`)
                  .setDescription(`${emoji.tick}${general.response.save_modifications}`)

                interaction.channel.send({
                  embeds: ([embed])
                }).then(async (response_save) => {
                  await delay(Number(3) * 1000)
                  response_save.delete()
                })

              } else {

                db.database.set(String("rank_give"), reply)
                db.database.set(String("rank_give_simple"), '<@&' + reply + '>')

                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color}`)
                  .setTitle(`${emoji.settings}${configm.title.text1}`)
                  .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
                  .setDescription(`${emoji.chanel}${configm.description.text86}` + db.database.get(String("channel_welcome_simple"))
                    + '\n' + `${emoji.reward}${configm.description.text87}` + db.database.get(String("rank_give_simple"))
                    + '\n' + `${emoji.list}${configm.description.text88}` + '```' + db.database.get(String("message_join")) + '```'
                    + '\n' + `${emoji.rules}${configm.description.text93}` + '```' + db.database.get(String("message_join_mp")) + '```'
                    + '\n' + `${emoji.color}${configm.description.text89}`)

                interaction.message.edit({ embeds: ([embed]) })


                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color_good}`)
                  .setDescription(`${emoji.tick}${general.response.save_modifications}`)

                interaction.channel.send({
                  embeds: ([embed])
                }).then(async (response_save) => {
                  await delay(Number(3) * 1000)
                  response_save.delete()
                })


              }
            } else {

              var embed = new EmbedBuilder()
                .setColor(`${config.color.color_error}`)
                .setDescription(`${emoji.wrong}${general.response.nosave_modif}`)
              interaction.channel.send({
                embeds: ([embed])
              }).then(async (response_nosave) => {
                await delay(Number(3) * 1000)
                response_nosave.delete()

              })
            }
          })
        })
      }

    }
  }

  if (interaction.customId === "button_welcome_message_join") {
    if (db.module.get(String('welcome')) === "on") {
      if ((interaction.member.permissions.has(PermissionsBitField.Flags.Administrator)) || (interaction.member.id === dev)) {
        interaction.deferUpdate()
        interaction.channel.send(`${emoji.pen}${configm.description.text92}`).then(async (question) => {
          (interaction.channel).awaitMessages({
            filter: (m) => m.author.id === interaction.member.id,
            time: (500 * 60 * 100),
            max: 1
          }).then(async (collected) => {
            reply = collected.first().content;
            message = collected.first();
            interaction.channel.bulkDelete(1)
            question.delete()
            await delay(Number(1) * 1000)
            if (!(reply === "cancel")) {

              db.database.set(String("message_join"), reply)

              var embed = new EmbedBuilder()
                .setColor(`${config.color.color}`)
                .setTitle(`${emoji.settings}${configm.title.text1}`)
                .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
                .setDescription(`${emoji.chanel}${configm.description.text86}` + db.database.get(String("channel_welcome_simple"))
                  + '\n' + `${emoji.reward}${configm.description.text87}` + db.database.get(String("rank_give_simple"))
                  + '\n' + `${emoji.list}${configm.description.text88}` + '```' + db.database.get(String("message_join")) + '```'
                  + '\n' + `${emoji.rules}${configm.description.text93}` + '```' + db.database.get(String("message_join_mp")) + '```'
                  + '\n' + `${emoji.color}${configm.description.text89}`)

              interaction.message.edit({ embeds: ([embed]) })


              var embed = new EmbedBuilder()
                .setColor(`${config.color.color_good}`)
                .setDescription(`${emoji.tick}${general.response.save_modifications}`)

              interaction.channel.send({
                embeds: ([embed])
              }).then(async (response_save) => {
                await delay(Number(3) * 1000)
                response_save.delete()
              })


            }
          })
        })
      }
    }
  }

  if (interaction.customId === "config_invites_message") {
    if (db.module.get(String('invites')) === "on") {
      if ((interaction.member.permissions.has(PermissionsBitField.Flags.Administrator)) || (interaction.member.id === dev)) {
        interaction.deferUpdate()
        interaction.channel.send(`${emoji.pen}${configm.description.text104}`).then(async (question) => {
          (interaction.channel).awaitMessages({
            filter: (m) => m.author.id === interaction.member.id,
            time: (500 * 60 * 100),
            max: 1
          }).then(async (collected) => {
            reply = collected.first().content;
            message = collected.first();
            interaction.channel.bulkDelete(1)
            question.delete()
            await delay(Number(1) * 1000)
            if (!(reply === "cancel")) {

              db.database.set(String("message_invites"), reply)

              var embed = new EmbedBuilder()
                .setColor(`${config.color.color}`)
                .setTitle(`${emoji.settings}${configm.title.text1}`)
                .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
                .setDescription(`${emoji.chanel}${configm.description.text99}` + db.database.get(String("channel_invites_simple")) + '\n'
                  + `${emoji.protector}${configm.description.text100}` + '\n'
                  + `${emoji.rules}${configm.description.text101}` + '```' + db.database.get(String("message_invites")) + '```\n'
                  + `${emoji.color}${configm.description.text102}`)

              interaction.message.edit({ embeds: ([embed]) })


              var embed = new EmbedBuilder()
                .setColor(`${config.color.color_good}`)
                .setDescription(`${emoji.tick}${general.response.save_modifications}`)

              interaction.channel.send({
                embeds: ([embed])
              }).then(async (response_save) => {
                await delay(Number(3) * 1000)
                response_save.delete()
              })


            }
          })
        })
      }
    }
  }

  if (interaction.customId === "button_welcome_message_join_mp") {
    if (db.module.get(String('welcome')) === "on") {
      if ((interaction.member.permissions.has(PermissionsBitField.Flags.Administrator)) || (interaction.member.id === dev)) {
        interaction.deferUpdate()
        interaction.channel.send(`${emoji.pen}${configm.description.text94}`).then(async (question) => {
          (interaction.channel).awaitMessages({
            filter: (m) => m.author.id === interaction.member.id,
            time: (500 * 60 * 100),
            max: 1
          }).then(async (collected) => {
            reply = collected.first().content;
            message = collected.first();
            interaction.channel.bulkDelete(1)
            question.delete()
            await delay(Number(1) * 1000)
            if (!(reply === "cancel")) {

              db.database.set(String("message_join_mp"), reply)

              var embed = new EmbedBuilder()
                .setColor(`${config.color.color}`)
                .setTitle(`${emoji.settings}${configm.title.text1}`)
                .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
                .setDescription(`${emoji.chanel}${configm.description.text86}` + db.database.get(String("channel_welcome_simple"))
                  + '\n' + `${emoji.reward}${configm.description.text87}` + db.database.get(String("rank_give_simple"))
                  + '\n' + `${emoji.list}${configm.description.text88}` + '```' + db.database.get(String("message_join")) + '```'
                  + '\n' + `${emoji.rules}${configm.description.text93}` + '```' + db.database.get(String("message_join_mp")) + '```'
                  + '\n' + `${emoji.color}${configm.description.text89}`)

              interaction.message.edit({ embeds: ([embed]) })


              var embed = new EmbedBuilder()
                .setColor(`${config.color.color_good}`)
                .setDescription(`${emoji.tick}${general.response.save_modifications}`)

              interaction.channel.send({
                embeds: ([embed])
              }).then(async (response_save) => {
                await delay(Number(3) * 1000)
                response_save.delete()
              })


            }
          })
        })
      }

    }
  }

  if (interaction.customId === "config_button_welcome") {
    if (db.module.get(String('welcome')) === "on") {
      if (((interaction.member).permissions.has(PermissionsBitField.Flags.Administrator)) || (interaction.member.id === dev)) {

        if (!(db.database.has(String("channel_welcome")))) {
          db.database.set(String("channel_welcome"), "*`Non défini`*")
        }
        if (!(db.database.has(String("rank_give")))) {
          db.database.set(String("rank_give"), "*`Non défini`*")
        }
        if (!(db.database.has(String("channel_welcome_simple")))) {
          db.database.set(String("channel_welcome_simple"), "*`Non défini`*")
        }
        if (!(db.database.has(String("rank_give_simple")))) {
          db.database.set(String("rank_give_simple"), "*`Non défini`*")
        }
        if (!(db.database.has(String("message_join")))) {
          db.database.set(String("message_join"), "**💖 Bienvenue à {user.tag} merci d'avoir rejoint le serveur {server.name} ! 💖**")
        }
        if (!(db.database.has(String("message_join_mp")))) {
          db.database.set(String("message_join_mp"), "**💖 Bienvenue sur le serveur {server.name}, merci de nous avoir rejoint ! 💖**")
        }

        var embed = new EmbedBuilder()
          .setColor(`${config.color.color}`)
          .setTitle(`${emoji.settings}${configm.title.text1}`)
          .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
          .setDescription(`${emoji.chanel}${configm.description.text86}` + db.database.get(String("channel_welcome_simple"))
            + '\n' + `${emoji.reward}${configm.description.text87}` + db.database.get(String("rank_give_simple"))
            + '\n' + `${emoji.list}${configm.description.text88}` + '```' + db.database.get(String("message_join")) + '```'
            + '\n' + `${emoji.rules}${configm.description.text93}` + '```' + db.database.get(String("message_join_mp")) + '```'
            + '\n' + `${emoji.color}${configm.description.text89}`)

        const button_welcome_channel = new ButtonBuilder()
          .setEmoji(`${emoji.chanel}`)
          .setStyle(ButtonStyle.Secondary)
          .setCustomId("button_welcome_channel")

        const button_welcome_rank_give = new ButtonBuilder()
          .setEmoji(`${emoji.reward}`)
          .setStyle(ButtonStyle.Secondary)
          .setCustomId("button_welcome_rank_give")

        const button_welcome_message_join = new ButtonBuilder()
          .setEmoji(`${emoji.list}`)
          .setStyle(ButtonStyle.Secondary)
          .setCustomId("button_welcome_message_join")

        const button_welcome_message_join_mp = new ButtonBuilder()
          .setEmoji(`${emoji.rules}`)
          .setStyle(ButtonStyle.Secondary)
          .setCustomId("button_welcome_message_join_mp")

        const button_config_retour_welcome = new ButtonBuilder()
          .setCustomId('buton_config_retour')
          .setStyle(ButtonStyle.Primary)
          .setEmoji(`${emoji.return}`)

        const menu_config_welcome = new ActionRowBuilder()
          .addComponents(button_welcome_channel)
          .addComponents(button_welcome_rank_give)
          .addComponents(button_welcome_message_join)
          .addComponents(button_welcome_message_join_mp)
          .addComponents(button_config_retour_welcome)

        interaction.message.edit({ embeds: ([embed]), components: [menu_config_welcome] })

        interaction.deferUpdate()


      }
    } else {

      ////Erreur Module no actif\\\\

      var embed = new EmbedBuilder()
        .setColor(`${config.color.color_error}`)
        .setDescription(`${emoji.wrong}${general.error.module_activate1}` + ' *`Bienvenue`* ' + `${general.error.module_activate2}`)

      interaction.reply({ embeds: ([embed]), ephemeral: true })
    }
  }

  if (interaction.customId === "config_button_utilitaire") {
    if (db.module.get(String('utilitaire')) === "on") {
      if (((interaction.member).permissions.has(PermissionsBitField.Flags.Administrator)) || (interaction.member.id === dev)) {

        var embed = new EmbedBuilder()
          .setColor(`${config.color.color}`)
          .setDescription(`${emoji.error}${configm.description.text125}`)

        interaction.channel.send({
          embeds: ([embed])
        }).then(async (response) => {
          interaction.deferUpdate()
          await delay(Number(5) * 1000)
          await response.delete()
        })

      }
    } else {

      ////Erreur Module no actif\\\\

      var embed = new EmbedBuilder()
        .setColor(`${config.color.color_error}`)
        .setDescription(`${emoji.wrong}${general.error.module_activate1}` + ' *`Utiliaire`* ' + `${general.error.module_activate2}`)

      interaction.reply({ embeds: ([embed]), ephemeral: true })
    }
  }

  if (interaction.customId === "config_button_level") {
    if (db.module.get(String('level')) === "on") {
      if (((interaction.member).permissions.has(PermissionsBitField.Flags.Administrator)) || (interaction.member.id === dev)) {

        var embed = new EmbedBuilder()
          .setColor(`${config.color.error}`)
          .setDescription(`${emoji.server}${configm.description.text126}`)

        interaction.channel.send({
          embeds: ([embed])
        }).then(async (response) => {
          interaction.deferUpdate()
          await delay(Number(5) * 1000)
          await response.delete()
        })

      }
    } else {

      ////Erreur Module no actif\\\\

      var embed = new EmbedBuilder()
        .setColor(`${config.color.color_error}`)
        .setDescription(`${emoji.wrong}${general.error.module_activate1}` + ' *`Niveaux`* ' + `${general.error.module_activate2}`)

      interaction.reply({ embeds: ([embed]), ephemeral: true })
    }
  }
  if (interaction.customId === "config_button_sperso") {
    if (db.module.get(String('sperso')) === "on") {
      if (((interaction.member).permissions.has(PermissionsBitField.Flags.Administrator)) || (interaction.member.id === dev)) {

        var embed = new EmbedBuilder()
          .setColor(`${config.color.error}`)
          .setDescription(`${emoji.server}${configm.description.text126}`)

        interaction.channel.send({
          embeds: ([embed])
        }).then(async (response) => {
          interaction.deferUpdate()
          await delay(Number(5) * 1000)
          await response.delete()
        })

      }
    } else {

      ////Erreur Module no actif\\\\

      var embed = new EmbedBuilder()
        .setColor(`${config.color.color_error}`)
        .setDescription(`${emoji.wrong}${general.error.module_activate1}` + ' *`Salons Personnalisé`* ' + `${general.error.module_activate2}`)

      interaction.reply({ embeds: ([embed]), ephemeral: true })
    }
  }
  if (interaction.customId === "config_button_logs") {
    if (db.module.get(String('logs')) === "on") {
      if (((interaction.member).permissions.has(PermissionsBitField.Flags.Administrator)) || (interaction.member.id === dev)) {

        var embed = new EmbedBuilder()
          .setColor(`${config.color.error}`)
          .setDescription(`${emoji.server}${configm.description.text126}`)

        interaction.channel.send({
          embeds: ([embed])
        }).then(async (response) => {
          interaction.deferUpdate()
          await delay(Number(5) * 1000)
          await response.delete()
        })

      }
    } else {

      ////Erreur Module no actif\\\\

      var embed = new EmbedBuilder()
        .setColor(`${config.color.color_error}`)
        .setDescription(`${emoji.wrong}${general.error.module_activate1}` + ' *`Logs`* ' + `${general.error.module_activate2}`)

      interaction.reply({ embeds: ([embed]), ephemeral: true })
    }
  }

  if (interaction.customId === "config_button_embed") {
    if (db.module.get(String('embed')) === "on") {
      if (((interaction.member).permissions.has(PermissionsBitField.Flags.Administrator)) || (interaction.member.id === dev)) {

        var embed = new EmbedBuilder()
          .setColor(`${config.color.color}`)
          .setDescription(`${emoji.error}${configm.description.text85}`)

        interaction.channel.send({
          embeds: ([embed])
        }).then(async (response) => {
          interaction.deferUpdate()
          await delay(Number(5) * 1000)
          await response.delete()
        })

      }
    } else {

      ////Erreur Module no actif\\\\

      var embed = new EmbedBuilder()
        .setColor(`${config.color.color_error}`)
        .setDescription(`${emoji.wrong}${general.error.module_activate1}` + ' *`Embed`* ' + `${general.error.module_activate2}`)

      interaction.reply({ embeds: ([embed]), ephemeral: true })
    }
  }

  if (interaction.customId === "config_button_partenariat_mp") {
    if (db.module.get(String('partenariat_mp')) === "on") {
      if (((interaction.member).permissions.has(PermissionsBitField.Flags.Administrator)) || (interaction.member.id === dev)) {

        var embed = new EmbedBuilder()
          .setColor(`${config.color.color}`)
          .setDescription(`${emoji.error}${configm.description.text107}`)

        interaction.channel.send({
          embeds: ([embed])
        }).then(async (response) => {
          interaction.deferUpdate()
          await delay(Number(5) * 1000)
          await response.delete()
        })

      }
    } else {

      ////Erreur Module no actif\\\\

      var embed = new EmbedBuilder()
        .setColor(`${config.color.color_error}`)
        .setDescription(`${emoji.wrong}${general.error.module_activate1}` + ' *`Partenariat MP`* ' + `${general.error.module_activate2}`)

      interaction.reply({ embeds: ([embed]), ephemeral: true })
    }
  }



  if (interaction.customId === "config_button_economie") {
    if (db.module.get(String('economie')) === "on") {
      if (((interaction.member).permissions.has(PermissionsBitField.Flags.Administrator)) || (interaction.member.id === dev)) {

        if (!(db.database.has(String('economie_symbole')))) {
          db.database.set(String('economie_symbole'), '€')
        }
        if (!(db.database.has(String('economie_start')))) {
          db.database.set(String('economie_start'), '1500')
        }
        if (!(db.database.has(String('economie_messages')))) {
          db.database.set(String('economie_messages'), '5')
        }
        if (!(db.database.has(String('economie_channel')))) {
          db.database.set(String('economie_channel'), 'Aucun')
        }

        if ((db.database.get(String('economie_channel'))) === "Aucun") {
          db.database.set(String('economie_channelid'), 'Aucun')

        } else {

          db.database.set(String('economie_channelid'), '<#' + db.database.get(String('economie_channel')) + '>')
        }

        var embed = new EmbedBuilder()
          .setColor(`${config.color.color}`)
          .setTitle(`${emoji.settings}${configm.title.text1}`)
          .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
          .setDescription('> ' + `${emoji.money}${configm.description.text30}` + '*`' + db.database.get(String('economie_symbole')) + '`*'
            + '\n> ' + `${emoji.bank_card}${configm.description.text31}` + '*`' + db.database.get(String('economie_start')) + db.database.get(String('economie_symbole')) + '`*'
            + '\n> ' + `${emoji.money_euro}${configm.description.text32}` + '*`' + db.database.get(String('economie_messages')) + db.database.get(String('economie_symbole')) + '/message`*')

        const button_config_retour_economie = new ButtonBuilder()
          .setCustomId('buton_config_retour')
          .setStyle(ButtonStyle.Primary)
          .setEmoji(`${emoji.return}`)

        const button_config_start = new ButtonBuilder()
          .setCustomId('button_config_start')
          .setStyle(ButtonStyle.Secondary)
          .setEmoji(`${emoji.bank_card}`)

        const button_config_symbole = new ButtonBuilder()
          .setCustomId('button_config_symbole')
          .setStyle(ButtonStyle.Secondary)
          .setEmoji(`${emoji.money}`)

        const button_config_message = new ButtonBuilder()
          .setCustomId('button_config_message')
          .setStyle(ButtonStyle.Secondary)
          .setEmoji(`${emoji.money_euro}`)

        const config_menu_economie1 = new ActionRowBuilder()
          .addComponents(button_config_symbole)
          .addComponents(button_config_start)
          .addComponents(button_config_message)

        const config_menu_economie = new ActionRowBuilder()
          .addComponents(button_config_retour_economie)


        interaction.message.edit({ embeds: ([embed]), components: [config_menu_economie1, config_menu_economie] })

        interaction.deferUpdate()

      }
    } else {

      ////Erreur Module no actif\\\\

      var embed = new EmbedBuilder()
        .setColor(`${config.color.color_error}`)
        .setDescription(`${emoji.wrong}${general.error.module_activate1}` + ' *`Economie`* ' + `${general.error.module_activate2}`)

      interaction.reply({ embeds: ([embed]), ephemeral: true })
    }
  }

  if (interaction.customId === "button_config_message") {
    if (db.module.get(String('economie')) === "on") {
      if (((interaction.member).permissions.has(PermissionsBitField.Flags.Administrator)) || (interaction.member.id === dev)) {
        interaction.deferUpdate()
        interaction.channel.send(`${emoji.pen}${configm.description.text39}`).then(async (question) => {
          (interaction.channel).awaitMessages({
            filter: (m) => m.author.id === interaction.member.id,
            time: (500 * 60 * 100),
            max: 1
          }).then(async (collected) => {
            reply = collected.first().content;
            message = collected.first();
            interaction.channel.bulkDelete(1)
            question.delete()
            await delay(Number(1) * 1000)
            if (!(reply === "cancel")) {
              db.database.set(String('economie_messages'), (reply));

              var embed = new EmbedBuilder()
                .setColor(`${config.color.color_good}`)
                .setDescription(`${emoji.tick}${general.response.save_modifications}`)

              interaction.channel.send({
                embeds: ([embed])
              }).then(async (response_save) => {
                await delay(Number(3) * 1000)
                response_save.delete()
              })

              var embed = new EmbedBuilder()
                .setColor(`${config.color.color}`)
                .setTitle(`${emoji.settings}${configm.title.text1}`)
                .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
                .setDescription('> ' + `${emoji.money}${configm.description.text30}` + '*`' + db.database.get(String('economie_symbole')) + '`*'
                  + '\n> ' + `${emoji.bank_card}${configm.description.text31}` + '*`' + db.database.get(String('economie_start')) + db.database.get(String('economie_symbole')) + '`*'
                  + '\n> ' + `${emoji.money_euro}${configm.description.text32}` + '*`' + db.database.get(String('economie_messages')) + db.database.get(String('economie_symbole')) + '/message`*')

              interaction.message.edit({ embeds: ([embed]) })

            } else {
              var embed = new EmbedBuilder()
                .setColor(`${config.color.color_error}`)
                .setDescription(`${emoji.wrong}${general.response.nosave_modif}`)
              interaction.channel.send({
                embeds: ([embed])
              }).then(async (response_nosave) => {
                await delay(Number(3) * 1000)
                response_nosave.delete()
              })
            }
          })
        })

      }

    } else { ////Erreur Module no actif\\\\

      var embed = new EmbedBuilder()
        .setColor(`${config.color.color_error}`)
        .setDescription(`${emoji.wrong}${general.error.module_activate1}` + ' *`Economie`* ' + `${general.error.module_activate2}`)

      interaction.reply({ embeds: ([embed]), ephemeral: true })
    }
  }


  if (interaction.customId === "button_config_symbole") {
    if (db.module.get(String('economie')) === "on") {
      if (((interaction.member).permissions.has(PermissionsBitField.Flags.Administrator)) || (interaction.member.id === dev)) {
        interaction.deferUpdate()
        interaction.channel.send(`${emoji.pen}${configm.description.text38}`).then(async (question) => {
          (interaction.channel).awaitMessages({
            filter: (m) => m.author.id === interaction.member.id,
            time: (500 * 60 * 100),
            max: 1
          }).then(async (collected) => {
            reply = collected.first().content;
            message = collected.first();
            interaction.channel.bulkDelete(1)
            question.delete()
            await delay(Number(1) * 1000)
            if (!(reply === "cancel")) {
              db.database.set(String('economie_symbole'), (reply));

              var embed = new EmbedBuilder()
                .setColor(`${config.color.color_good}`)
                .setDescription(`${emoji.tick}${general.response.save_modifications}`)

              interaction.channel.send({
                embeds: ([embed])
              }).then(async (response_save) => {
                await delay(Number(3) * 1000)
                response_save.delete()
              })

              var embed = new EmbedBuilder()
                .setColor(`${config.color.color}`)
                .setTitle(`${emoji.settings}${configm.title.text1}`)
                .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
                .setDescription('> ' + `${emoji.money}${configm.description.text30}` + '*`' + db.database.get(String('economie_symbole')) + '`*'
                  + '\n> ' + `${emoji.bank_card}${configm.description.text31}` + '*`' + db.database.get(String('economie_start')) + db.database.get(String('economie_symbole')) + '`*'
                  + '\n> ' + `${emoji.money_euro}${configm.description.text32}` + '*`' + db.database.get(String('economie_messages')) + db.database.get(String('economie_symbole')) + '/message`*')

              interaction.message.edit({ embeds: ([embed]) })
            } else {
              var embed = new EmbedBuilder()
                .setColor(`${config.color.color_error}`)
                .setDescription(`${emoji.wrong}${general.response.nosave_modif}`)
              interaction.channel.send({
                embeds: ([embed])
              }).then(async (response_nosave) => {
                await delay(Number(3) * 1000)
                response_nosave.delete()
              })
            }
          })
        })

      }

    } else { ////Erreur Module no actif\\\\

      var embed = new EmbedBuilder()
        .setColor(`${config.color.color_error}`)
        .setDescription(`${emoji.wrong}${general.error.module_activate1}` + ' *`Economie`* ' + `${general.error.module_activate2}`)

      interaction.reply({ embeds: ([embed]), ephemeral: true })
    }
  }


  if (interaction.customId === "button_config_start") {
    if (db.module.get(String('economie')) === "on") {
      if (((interaction.member).permissions.has(PermissionsBitField.Flags.Administrator)) || interaction.member.id === dev) {
        interaction.deferUpdate()
        interaction.channel.send(`${emoji.pen}${configm.description.text16}`).then(async (question) => {
          (interaction.channel).awaitMessages({
            filter: (m) => m.author.id === interaction.member.id,
            time: (500 * 60 * 100),
            max: 1
          }).then(async (collected) => {
            reply = collected.first().content;
            message = collected.first();
            interaction.channel.bulkDelete(1)
            question.delete()
            await delay(Number(1) * 1000)
            if (!(reply === "cancel")) {
              db.database.set(String('economie_start'), (reply));

              var embed = new EmbedBuilder()
                .setColor(`${config.color.color_good}`)
                .setDescription(`${emoji.tick}${general.response.save_modifications}`)

              interaction.channel.send({
                embeds: ([embed])
              }).then(async (response_save) => {
                await delay(Number(3) * 1000)
                response_save.delete()
              })

              var embed = new EmbedBuilder()
                .setColor(`${config.color.color}`)
                .setTitle(`${emoji.settings}${configm.title.text1}`)
                .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
                .setDescription('> ' + `${emoji.money}${configm.description.text30}` + '*`' + db.database.get(String('economie_symbole')) + '`*'
                  + '\n> ' + `${emoji.bank_card}${configm.description.text31}` + '*`' + db.database.get(String('economie_start')) + db.database.get(String('economie_symbole')) + '`*'
                  + '\n> ' + `${emoji.money_euro}${configm.description.text32}` + '*`' + db.database.get(String('economie_messages')) + db.database.get(String('economie_symbole')) + '/message`*')

              interaction.message.edit({ embeds: ([embed]) })
            } else {
              var embed = new EmbedBuilder()
                .setColor(`${config.color.color_error}`)
                .setDescription(`${emoji.wrong}${general.response.nosave_modif}`)
              interaction.channel.send({
                embeds: ([embed])
              }).then(async (response_nosave) => {
                await delay(Number(3) * 1000)
                response_nosave.delete()
              })
            }
          })
        })
      }
    } else {

      ////Erreur Module no actif\\\\

      var embed = new EmbedBuilder()
        .setColor(`${config.color.color_error}`)
        .setDescription(`${emoji.wrong}${general.error.module_activate1}` + ' *`Economie`* ' + `${general.error.module_activate2}`)

      interaction.reply({ embeds: ([embed]), ephemeral: true })
    }
  }

  if (interaction.customId === "button_suite_reset") {
    if (((interaction.member).permissions.has(PermissionsBitField.Flags.Administrator)) || (interaction.member.id === dev)) {


      db.database.set(String('suite_channel'), "*`Non défini`*")
      db.database.set(String('suite_channel_simple'), "*`Non défini`*")
      db.database.set(String('suite_number'), 1)

      var embed = new EmbedBuilder()
        .setColor(`${config.color.color}`)
        .setTitle(`${emoji.settings}${configm.title.text1}`)
        .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
        .setDescription(`${emoji.chanel}${configm.description.text70}` + db.database.get(String('suite_channel_simple')) + '\n\n' + `${configm.description.text71}`)

      interaction.message.edit({ embeds: ([embed]) })

      interaction.deferUpdate()

      var embed = new EmbedBuilder()
        .setColor(`${config.color.color}`)
        .setDescription(`${emoji.bin}${general.response.restart}`)

      interaction.channel.send({
        embeds: ([embed])
      }).then(async (response_save) => {
        await delay(Number(3) * 1000)
        response_save.delete()
      })

    }
  }

  if (interaction.customId === "button_suite_channel") {
    if (((interaction.member).permissions.has(PermissionsBitField.Flags.Administrator)) || (interaction.member.id === dev)) {
      interaction.deferUpdate()
      interaction.channel.send(`${emoji.pen}${configm.description.text72}`).then(async (question) => {
        (interaction.channel).awaitMessages({
          filter: (m) => m.author.id === interaction.member.id,
          time: (500 * 60 * 100),
          max: 1
        }).then(async (collected) => {
          reply = collected.first().content;
          message = collected.first();
          interaction.channel.bulkDelete(1)
          question.delete()
          await delay(Number(1) * 1000)
          if (!(reply === "cancel")) {
            if ((!(((reply) || '').startsWith('<#' || '')))) {


              try {

                client.channels.cache.get(reply).send({ content: '**`' + interaction.user.tag + '`**' + " a configuré **`" + client.channels.cache.get(reply).name + "`** comme le salon de suite de nomber." })

                db.database.set(String('suite_channel'), (reply));
                db.database.set(String('suite_channel_simple'), '<#' + (reply) + '>');

                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color_good}`)
                  .setDescription(`${emoji.tick}${general.response.save_modifications}`)

                interaction.channel.send({
                  embeds: ([embed])
                }).then(async (response_save) => {
                  await delay(Number(3) * 1000)
                  response_save.delete()
                })

                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color}`)
                  .setTitle(`${emoji.settings}${configm.title.text1}`)
                  .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
                  .setDescription(`${emoji.chanel}${configm.description.text70}` + db.database.get(String('suite_channel_simple')) + '\n\n' + `${configm.description.text71}`)

                interaction.message.edit({ embeds: ([embed]) })

                console.log(chalk.green("L'utilisateur " + interaction.user.tag + " a configuré le salon de logs des partenariats sur le salon " + client.channels.cache.get(reply).name + "."))

              } catch (err) {

                console.log(chalk.red(err + ' (SALON RENSEIGNE INTROUVABLE)'))

                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color_error}`)
                  .setDescription(`${emoji.wrong}${general.error.channel_notfound}`)

                interaction.channel.send({
                  embeds: ([embed])
                }).then(async (response_error) => {
                  await delay(Number(3) * 1000)
                  response_error.delete()

                })



              }

            } else {

              try {

                let change = reply.replace('<', '')
                let change1 = change.replace('#', '')
                let change2 = change1.replace('>', '')

                db.database.set(String('suite_channel'), change2)
                db.database.set(String('suite_channel_simple'), reply);

                client.channels.cache.get(change2).send({ content: '**`' + interaction.user.tag + '`**' + " a configuré **`" + client.channels.cache.get(change2).name + "`** comme le salon de logs des partenariats." })

                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color_good}`)
                  .setDescription(`${emoji.tick}${general.response.save_modifications}`)

                interaction.channel.send({
                  embeds: ([embed])
                }).then(async (response_save) => {
                  await delay(Number(3) * 1000)
                  response_save.delete()
                })

                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color}`)
                  .setTitle(`${emoji.settings}${configm.title.text1}`)
                  .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
                  .setDescription(`${emoji.chanel}${configm.description.text70}` + db.database.get(String('suite_channel_simple')) + '\n\n' + `${configm.description.text71}`)

                interaction.message.edit({ embeds: ([embed]) })

                console.log(chalk.green("L'utilisateur " + interaction.user.tag + " a configuré le salon de logs des partenariats sur le salon " + client.channels.cache.get(change2).name + "."))

              } catch (err) {

                console.log(chalk.red(err + ' (SALON RENSEIGNE INTROUVABLE)'))

                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color_error}`)
                  .setDescription(`${emoji.wrong}${general.error.channel_notfound}`)

                interaction.channel.send({
                  embeds: ([embed])
                }).then(async (response_error) => {
                  await delay(Number(3) * 1000)
                  response_error.delete()

                })



              }

            }
          } else {

            var embed = new EmbedBuilder()
              .setColor(`${config.color.color_error}`)
              .setDescription(`${emoji.wrong}${general.response.nosave_modif}`)
            interaction.channel.send({
              embeds: ([embed])
            }).then(async (response_nosave) => {
              await delay(Number(3) * 1000)
              response_nosave.delete()

            })
          }
        })
      })
    }
  }

  if (interaction.customId === "config_system_suite") {
    if (db.module.get(String('game')) === "on") {
      if (((interaction.member).permissions.has(PermissionsBitField.Flags.Administrator)) || (interaction.member.id === dev)) {

        if (!(db.database.has(String("suite_number")))) {
          db.database.set(String("suite_number"), 1)
        }


        if (!(db.database.has(String('suite_channel')))) {
          db.database.set(String('suite_channel'), '*`Non défini`*')
        }
        if (!(db.database.has(String('suite_channel_simple')))) {
          db.database.set(String('suite_channel_simple'), '*`Non défini`*')
        }


        var embed = new EmbedBuilder()
          .setColor(`${config.color.color}`)
          .setTitle(`${emoji.settings}${configm.title.text1}`)
          .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
          .setDescription(`${emoji.chanel}${configm.description.text70}` + db.database.get(String('suite_channel_simple')) + '\n\n' + `${configm.description.text71}`)

        const button_suite_channel = new ButtonBuilder()
          .setEmoji(`${emoji.chanel}`)
          .setStyle(ButtonStyle.Secondary)
          .setCustomId("button_suite_channel")

        const button_suite_reset = new ButtonBuilder()
          .setEmoji(`${emoji.bin}`)
          .setLabel('Réinitialiser')
          .setStyle(ButtonStyle.Danger)
          .setCustomId("button_suite_reset")

        const button_suite_return = new ButtonBuilder()
          .setEmoji(`${emoji.return}`)
          .setStyle(ButtonStyle.Primary)
          .setCustomId("suite_config_retour")

        const menu_suite = new ActionRowBuilder()
          .addComponents(button_suite_channel)
          .addComponents(button_suite_reset)
          .addComponents(button_suite_return)

        interaction.message.edit({ embeds: ([embed]), components: [menu_suite] })

        interaction.deferUpdate()
      }
    }
  }

  if (interaction.customId === "suite_config_retour") {
    if (db.module.get(String('game')) === "on") {
      if (((interaction.member).permissions.has(PermissionsBitField.Flags.Administrator)) || (interaction.member.id === dev)) {

        var embed = new EmbedBuilder()
          .setColor(`${config.color.color}`)
          .setTitle(`${emoji.settings}${configm.title.text1}`)
          .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
          .setDescription(`${emoji.games}${configm.description.text69}`)

        const config_system_suite = new ButtonBuilder()
          .setEmoji(`${emoji.games}`)
          .setStyle(ButtonStyle.Secondary)
          .setCustomId("config_system_suite")

        const button_suite_return = new ButtonBuilder()
          .setEmoji(`${emoji.return}`)
          .setStyle(ButtonStyle.Primary)
          .setCustomId("buton_config_retour")

        const menu_system_suite = new ActionRowBuilder()
          .addComponents(config_system_suite)
          .addComponents(button_suite_return)

        interaction.message.edit({ embeds: ([embed]), components: [menu_system_suite] })

        interaction.deferUpdate()

      }
    } else {
      var embed = new EmbedBuilder()
        .setColor(`${config.color.color_error}`)
        .setDescription(`${emoji.wrong}${general.error.module_activate1}` + ' *`Logs`* ' + `${general.error.module_activate2}`)

      interaction.reply({ embeds: ([embed]), ephemeral: true })
    }
  }


  if (interaction.customId === "config_button_game") {
    if (db.module.get(String('game')) === "on") {
      if (((interaction.member).permissions.has(PermissionsBitField.Flags.Administrator)) || (interaction.member.id === dev)) {

        var embed = new EmbedBuilder()
          .setColor(`${config.color.color}`)
          .setTitle(`${emoji.settings}${configm.title.text1}`)
          .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
          .setDescription(`${emoji.games}${configm.description.text69}`)

        const config_system_suite = new ButtonBuilder()
          .setEmoji(`${emoji.games}`)
          .setStyle(ButtonStyle.Secondary)
          .setCustomId("config_system_suite")

        const button_suite_return = new ButtonBuilder()
          .setEmoji(`${emoji.return}`)
          .setStyle(ButtonStyle.Primary)
          .setCustomId("buton_config_retour")

        const menu_system_suite = new ActionRowBuilder()
          .addComponents(config_system_suite)
          .addComponents(button_suite_return)

        interaction.message.edit({ embeds: ([embed]), components: [menu_system_suite] })

        interaction.deferUpdate()

      }
    } else {
      var embed = new EmbedBuilder()
        .setColor(`${config.color.color_error}`)
        .setDescription(`${emoji.wrong}${general.error.module_activate1}` + ' *`Jeux`* ' + `${general.error.module_activate2}`)

      interaction.reply({ embeds: ([embed]), ephemeral: true })
    }
  }

  /////Config button logs \\\\\

  if (interaction.customId === "config_button_lo") {
    if (db.module.get(String('logs')) === "on") {
      if (((interaction.member).permissions.has(PermissionsBitField.Flags.Administrator)) || (interaction.member.id === dev)) {

        if (!(db.database.has(String('logs_chanel')))) {
          db.database.set(String('logs_chanel'), 'Non défini')
        }
        if (!(db.logs.has(String('moderation')))) {
          db.logs.set(String('moderation'), '🔴')
        }
        if (!(db.logs.has(String('join&leave')))) {
          db.logs.set(String('join&leave'), '🔴')
        }
        if (!(db.logs.has(String('salons')))) {
          db.logs.set(String('salons'), '🔴')
        }
        if (!(db.logs.has(String('roles')))) {
          db.logs.set(String('roles'), '🔴')
        }
        if (!(db.logs.has(String('emojis')))) {
          db.logs.set(String('emojis'), '🔴')
        }
        if (!(db.logs.has(String('pseudos')))) {
          db.logs.set(String('pseudos'), '🔴')
        }
        if (!(db.logs.has(String('vocal')))) {
          db.logs.set(String('vocal'), '🔴')
        }
        if (!(db.logs.has(String('messages')))) {
          db.logs.set(String('messages'), '🔴')
        }


        ///Embed\\\

        var embed = new EmbedBuilder()
          .setColor(`${config.color.color}`)
          .setTitle(`${emoji.settings}${configm.title.text1}`)
          .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
          .setDescription('> ' + `${emoji.chanel}${configm.description.text15}` + ' ' + '*`' + db.database.get(String('logs_chanel')) + '`*'
            + '``` ``` \n' + `${emoji.présent}${configm.description.text17}` + '\n'
            + '> ' + db.logs.get(String('moderation')) + ' **|** ' + `${emoji.moderateur}${configm.description.text18}` + '\n'
            + '> ' + db.logs.get(String('join&leave')) + ' **|** ' + `${emoji.welcome}${configm.description.text19}` + '\n'
            + '> ' + db.logs.get(String('salons')) + ' **|** ' + `${emoji.chanel}${configm.description.text20}` + '\n'
            + '> ' + db.logs.get(String('roles')) + ' **|** ' + `${emoji.protector}${configm.description.text21}` + '\n'
            + '> ' + db.logs.get(String('emojis')) + ' **|** ' + `${emoji.error}${configm.description.text22}` + '\n'
            + '> ' + db.logs.get(String('pseudos')) + ' **|** ' + `${emoji.pen}${configm.description.text23}` + '\n'
            + '> ' + db.logs.get(String('vocal')) + ' **|** ' + `${emoji.mute}${configm.description.text24}` + '\n'
            + '> ' + db.logs.get(String('messages')) + ' **|** ' + `${emoji.list}${configm.description.text25}` + '\n')


        const button_config_logs_chanel = new ButtonBuilder()
          .setCustomId('button_config_logs_chanel')
          .setStyle(ButtonStyle.Secondary)
          .setLabel('Ajouter un salon')
          .setEmoji(`${emoji.chanel}`)

        const button_config_logs_moderation = new ButtonBuilder()
          .setCustomId('button_config_logs_moderation')
          .setStyle(ButtonStyle.Secondary)
          .setEmoji(`${emoji.moderateur}`)

        const button_config_logs_join = new ButtonBuilder()
          .setCustomId('button_config_logs_join')
          .setStyle(ButtonStyle.Secondary)
          .setEmoji(`${emoji.welcome}`)

        const button_config_logs_channel = new ButtonBuilder()
          .setCustomId('button_config_logs_channel')
          .setStyle(ButtonStyle.Secondary)
          .setEmoji(`${emoji.chanel}`)

        const button_config_logs_rank = new ButtonBuilder()
          .setCustomId('button_config_logs_rank')
          .setStyle(ButtonStyle.Secondary)
          .setEmoji(`${emoji.protector}`)

        const button_config_logs_emoji = new ButtonBuilder()
          .setCustomId('button_config_logs_emoji')
          .setStyle(ButtonStyle.Secondary)
          .setEmoji(`${emoji.error}`)

        const button_config_logs_pseudos = new ButtonBuilder()
          .setCustomId('button_config_logs_pseudos')
          .setStyle(ButtonStyle.Secondary)
          .setEmoji(`${emoji.pen}`)

        const button_config_logs_vocal = new ButtonBuilder()
          .setCustomId('button_config_logs_vocal')
          .setStyle(ButtonStyle.Secondary)
          .setEmoji(`${emoji.mute}`)

        const button_config_logs_messages = new ButtonBuilder()
          .setCustomId('button_config_logs_messages')
          .setStyle(ButtonStyle.Secondary)
          .setEmoji(`${emoji.list}`)


        const button_config_retour = new ButtonBuilder()
          .setCustomId('buton_config_retour')
          .setStyle(ButtonStyle.Primary)
          .setEmoji(`${emoji.return}`)

        const button_config_menu_logs = new ActionRowBuilder()
          .addComponents(button_config_logs_chanel)

        const button_config_menu_logs1 = new ActionRowBuilder()
          .addComponents(button_config_logs_moderation)
          .addComponents(button_config_logs_join)
          .addComponents(button_config_logs_channel)
          .addComponents(button_config_logs_rank)
          .addComponents(button_config_logs_emoji)

        const button_config_menu_logs2 = new ActionRowBuilder()
          .addComponents(button_config_logs_pseudos)
          .addComponents(button_config_logs_vocal)
          .addComponents(button_config_logs_messages)
          .addComponents(button_config_retour)

        interaction.message.edit({ embeds: ([embed]), components: [button_config_menu_logs, button_config_menu_logs1, button_config_menu_logs2] })

        interaction.deferUpdate()

      }
    } else {

      ////Erreur Module no actif\\\\

      var embed = new EmbedBuilder()
        .setColor(`${config.color.color_error}`)
        .setDescription(`${emoji.wrong}${general.error.module_activate1}` + ' *`Logs`* ' + `${general.error.module_activate2}`)

      interaction.reply({ embeds: ([embed]), ephemeral: true })
    }
  }

  ///Button activate logs messages\\\

  if (interaction.customId === "button_config_logs_messages") {
    if (db.module.get(String("logs")) === "on") {
      if (((interaction.member).permissions.has(PermissionsBitField.Flags.Administrator)) || interaction.member.id === dev) {
        if (db.logs.get(String("messages")) === '🔴') {
          db.logs.set(String("messages"), '🔵')

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color}`)
            .setTitle(`${emoji.settings}${configm.title.text1}`)
            .setDescription('> ' + `${emoji.chanel}${configm.description.text15}` + ' ' + '*`' + db.database.get(String('logs_chanel')) + '`*'
              + '``` ``` \n' + `${emoji.présent}${configm.description.text17}` + '\n'
              + '> ' + db.logs.get(String('moderation')) + ' **|** ' + `${emoji.moderateur}${configm.description.text18}` + '\n'
              + '> ' + db.logs.get(String('join&leave')) + ' **|** ' + `${emoji.welcome}${configm.description.text19}` + '\n'
              + '> ' + db.logs.get(String('salons')) + ' **|** ' + `${emoji.chanel}${configm.description.text20}` + '\n'
              + '> ' + db.logs.get(String('roles')) + ' **|** ' + `${emoji.protector}${configm.description.text21}` + '\n'
              + '> ' + db.logs.get(String('emojis')) + ' **|** ' + `${emoji.error}${configm.description.text22}` + '\n'
              + '> ' + db.logs.get(String('pseudos')) + ' **|** ' + `${emoji.pen}${configm.description.text23}` + '\n'
              + '> ' + db.logs.get(String('vocal')) + ' **|** ' + `${emoji.mute}${configm.description.text24}` + '\n'
              + '> ' + db.logs.get(String('messages')) + ' **|** ' + `${emoji.list}${configm.description.text25}` + '\n')

          interaction.message.edit({ embeds: ([embed]) })

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color_good}`)
            .setDescription(`${emoji.tick}${configm.description.text26}` + '`Messages`' + `${configm.description.text27}`)

          console.log(chalk.gray(`L'évènement de "Messages" dans le module de "logs" a été activé.`))

          interaction.channel.send({
            embeds: ([embed])
          }).then(async (delete_message) => {
            await delay(Number(3) * 1000)
            delete_message.delete()
          })

          interaction.deferUpdate()

        } else if (db.logs.get(String("messages")) === '🔵') {
          db.logs.set(String("messages"), '🔴')

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color}`)
            .setTitle(`${emoji.settings}${configm.title.text1}`)
            .setDescription('> ' + `${emoji.chanel}${configm.description.text15}` + ' ' + '*`' + db.database.get(String('logs_chanel')) + '`*'
              + '``` ``` \n' + `${emoji.présent}${configm.description.text17}` + '\n'
              + '> ' + db.logs.get(String('moderation')) + ' **|** ' + `${emoji.moderateur}${configm.description.text18}` + '\n'
              + '> ' + db.logs.get(String('join&leave')) + ' **|** ' + `${emoji.welcome}${configm.description.text19}` + '\n'
              + '> ' + db.logs.get(String('salons')) + ' **|** ' + `${emoji.chanel}${configm.description.text20}` + '\n'
              + '> ' + db.logs.get(String('roles')) + ' **|** ' + `${emoji.protector}${configm.description.text21}` + '\n'
              + '> ' + db.logs.get(String('emojis')) + ' **|** ' + `${emoji.error}${configm.description.text22}` + '\n'
              + '> ' + db.logs.get(String('pseudos')) + ' **|** ' + `${emoji.pen}${configm.description.text23}` + '\n'
              + '> ' + db.logs.get(String('vocal')) + ' **|** ' + `${emoji.mute}${configm.description.text24}` + '\n'
              + '> ' + db.logs.get(String('messages')) + ' **|** ' + `${emoji.list}${configm.description.text25}` + '\n')

          interaction.message.edit({ embeds: ([embed]) })

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color_error}`)
            .setDescription(`${emoji.wrong}${configm.description.text28}` + '`Messages`' + `${configm.description.text29}`)

          console.log(chalk.gray(`L'évènement de "Messages" dans le module de "logs" a été désactivé.`))


          interaction.channel.send({
            embeds: ([embed])

          }).then(async (delete_message) => {
            await delay(Number(3) * 1000)
            delete_message.delete()
          })

          interaction.deferUpdate()


        }
      }

    } else {

      ////Erreur Module no actif\\\\

      var embed = new EmbedBuilder()
        .setColor(`${config.color.color_error}`)
        .setDescription(`${emoji.wrong}${general.error.module_activate1}` + ' *`Logs`* ' + `${general.error.module_activate2}`)

      interaction.reply({ embeds: ([embed]), ephemeral: true })
    }
  }

  ///Button activate logs vocaux\\\

  if (interaction.customId === "button_config_logs_vocal") {
    if (db.module.get(String("logs")) === "on") {
      if (((interaction.member).permissions.has(PermissionsBitField.Flags.Administrator)) || interaction.member.id === dev) {
        if (db.logs.get(String("vocal")) === '🔴') {
          db.logs.set(String("vocal"), '🔵')

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color}`)
            .setTitle(`${emoji.settings}${configm.title.text1}`)
            .setDescription('> ' + `${emoji.chanel}${configm.description.text15}` + ' ' + '*`' + db.database.get(String('logs_chanel')) + '`*'
              + '``` ``` \n' + `${emoji.présent}${configm.description.text17}` + '\n'
              + '> ' + db.logs.get(String('moderation')) + ' **|** ' + `${emoji.moderateur}${configm.description.text18}` + '\n'
              + '> ' + db.logs.get(String('join&leave')) + ' **|** ' + `${emoji.welcome}${configm.description.text19}` + '\n'
              + '> ' + db.logs.get(String('salons')) + ' **|** ' + `${emoji.chanel}${configm.description.text20}` + '\n'
              + '> ' + db.logs.get(String('roles')) + ' **|** ' + `${emoji.protector}${configm.description.text21}` + '\n'
              + '> ' + db.logs.get(String('emojis')) + ' **|** ' + `${emoji.error}${configm.description.text22}` + '\n'
              + '> ' + db.logs.get(String('pseudos')) + ' **|** ' + `${emoji.pen}${configm.description.text23}` + '\n'
              + '> ' + db.logs.get(String('vocal')) + ' **|** ' + `${emoji.mute}${configm.description.text24}` + '\n'
              + '> ' + db.logs.get(String('messages')) + ' **|** ' + `${emoji.list}${configm.description.text25}` + '\n')

          interaction.message.edit({ embeds: ([embed]) })

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color_good}`)
            .setDescription(`${emoji.tick}${configm.description.text26}` + '`Vocal`' + `${configm.description.text27}`)

          console.log(chalk.gray(`L'évènement de "Vocal" dans le module de "logs" a été activé.`))

          interaction.channel.send({
            embeds: ([embed])
          }).then(async (delete_message) => {
            await delay(Number(3) * 1000)
            delete_message.delete()
          })

          interaction.deferUpdate()

        } else if (db.logs.get(String("vocal")) === '🔵') {
          db.logs.set(String("vocal"), '🔴')

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color}`)
            .setTitle(`${emoji.settings}${configm.title.text1}`)
            .setDescription('> ' + `${emoji.chanel}${configm.description.text15}` + ' ' + '*`' + db.database.get(String('logs_chanel')) + '`*'
              + '``` ``` \n' + `${emoji.présent}${configm.description.text17}` + '\n'
              + '> ' + db.logs.get(String('moderation')) + ' **|** ' + `${emoji.moderateur}${configm.description.text18}` + '\n'
              + '> ' + db.logs.get(String('join&leave')) + ' **|** ' + `${emoji.welcome}${configm.description.text19}` + '\n'
              + '> ' + db.logs.get(String('salons')) + ' **|** ' + `${emoji.chanel}${configm.description.text20}` + '\n'
              + '> ' + db.logs.get(String('roles')) + ' **|** ' + `${emoji.protector}${configm.description.text21}` + '\n'
              + '> ' + db.logs.get(String('emojis')) + ' **|** ' + `${emoji.error}${configm.description.text22}` + '\n'
              + '> ' + db.logs.get(String('pseudos')) + ' **|** ' + `${emoji.pen}${configm.description.text23}` + '\n'
              + '> ' + db.logs.get(String('vocal')) + ' **|** ' + `${emoji.mute}${configm.description.text24}` + '\n'
              + '> ' + db.logs.get(String('messages')) + ' **|** ' + `${emoji.list}${configm.description.text25}` + '\n')

          interaction.message.edit({ embeds: ([embed]) })

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color_error}`)
            .setDescription(`${emoji.wrong}${configm.description.text28}` + '`Vocal`' + `${configm.description.text29}`)

          console.log(chalk.gray(`L'évènement de "Vocal" dans le module de "logs" a été désactivé.`))


          interaction.channel.send({
            embeds: ([embed])

          }).then(async (delete_message) => {
            await delay(Number(3) * 1000)
            delete_message.delete()
          })

          interaction.deferUpdate()


        }
      }

    } else {

      ////Erreur Module no actif\\\\

      var embed = new EmbedBuilder()
        .setColor(`${config.color.color_error}`)
        .setDescription(`${emoji.wrong}${general.error.module_activate1}` + ' *`Logs`* ' + `${general.error.module_activate2}`)

      interaction.reply({ embeds: ([embed]), ephemeral: true })
    }
  }

  ///Button activate logs pseudos\\\

  if (interaction.customId === "button_config_logs_pseudos") {
    if (db.module.get(String("logs")) === "on") {
      if (((interaction.member).permissions.has(PermissionsBitField.Flags.Administrator)) || interaction.member.id === dev) {
        if (db.logs.get(String("pseudos")) === '🔴') {
          db.logs.set(String("pseudos"), '🔵')

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color}`)
            .setTitle(`${emoji.settings}${configm.title.text1}`)
            .setDescription('> ' + `${emoji.chanel}${configm.description.text15}` + ' ' + '*`' + db.database.get(String('logs_chanel')) + '`*'
              + '``` ``` \n' + `${emoji.présent}${configm.description.text17}` + '\n'
              + '> ' + db.logs.get(String('moderation')) + ' **|** ' + `${emoji.moderateur}${configm.description.text18}` + '\n'
              + '> ' + db.logs.get(String('join&leave')) + ' **|** ' + `${emoji.welcome}${configm.description.text19}` + '\n'
              + '> ' + db.logs.get(String('salons')) + ' **|** ' + `${emoji.chanel}${configm.description.text20}` + '\n'
              + '> ' + db.logs.get(String('roles')) + ' **|** ' + `${emoji.protector}${configm.description.text21}` + '\n'
              + '> ' + db.logs.get(String('emojis')) + ' **|** ' + `${emoji.error}${configm.description.text22}` + '\n'
              + '> ' + db.logs.get(String('pseudos')) + ' **|** ' + `${emoji.pen}${configm.description.text23}` + '\n'
              + '> ' + db.logs.get(String('vocal')) + ' **|** ' + `${emoji.mute}${configm.description.text24}` + '\n'
              + '> ' + db.logs.get(String('messages')) + ' **|** ' + `${emoji.list}${configm.description.text25}` + '\n')

          interaction.message.edit({ embeds: ([embed]) })

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color_good}`)
            .setDescription(`${emoji.tick}${configm.description.text26}` + '`Pseudos`' + `${configm.description.text27}`)

          console.log(chalk.gray(`L'évènement de "Pseudos" dans le module de "logs" a été activé.`))

          interaction.channel.send({
            embeds: ([embed])
          }).then(async (delete_message) => {
            await delay(Number(3) * 1000)
            delete_message.delete()
          })

          interaction.deferUpdate()

        } else if (db.logs.get(String("pseudos")) === '🔵') {
          db.logs.set(String("pseudos"), '🔴')

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color}`)
            .setTitle(`${emoji.settings}${configm.title.text1}`)
            .setDescription('> ' + `${emoji.chanel}${configm.description.text15}` + ' ' + '*`' + db.database.get(String('logs_chanel')) + '`*'
              + '``` ``` \n' + `${emoji.présent}${configm.description.text17}` + '\n'
              + '> ' + db.logs.get(String('moderation')) + ' **|** ' + `${emoji.moderateur}${configm.description.text18}` + '\n'
              + '> ' + db.logs.get(String('join&leave')) + ' **|** ' + `${emoji.welcome}${configm.description.text19}` + '\n'
              + '> ' + db.logs.get(String('salons')) + ' **|** ' + `${emoji.chanel}${configm.description.text20}` + '\n'
              + '> ' + db.logs.get(String('roles')) + ' **|** ' + `${emoji.protector}${configm.description.text21}` + '\n'
              + '> ' + db.logs.get(String('emojis')) + ' **|** ' + `${emoji.error}${configm.description.text22}` + '\n'
              + '> ' + db.logs.get(String('pseudos')) + ' **|** ' + `${emoji.pen}${configm.description.text23}` + '\n'
              + '> ' + db.logs.get(String('vocal')) + ' **|** ' + `${emoji.mute}${configm.description.text24}` + '\n'
              + '> ' + db.logs.get(String('messages')) + ' **|** ' + `${emoji.list}${configm.description.text25}` + '\n')

          interaction.message.edit({ embeds: ([embed]) })

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color_error}`)
            .setDescription(`${emoji.wrong}${configm.description.text28}` + '`Pseudos`' + `${configm.description.text29}`)

          console.log(chalk.gray(`L'évènement de "Pseudos" dans le module de "logs" a été désactivé.`))


          interaction.channel.send({
            embeds: ([embed])

          }).then(async (delete_message) => {
            await delay(Number(3) * 1000)
            delete_message.delete()
          })

          interaction.deferUpdate()


        }
      }

    } else {

      ////Erreur Module no actif\\\\

      var embed = new EmbedBuilder()
        .setColor(`${config.color.color_error}`)
        .setDescription(`${emoji.wrong}${general.error.module_activate1}` + ' *`Logs`* ' + `${general.error.module_activate2}`)

      interaction.reply({ embeds: ([embed]), ephemeral: true })
    }
  }

  ///Button activate logs emojis\\\

  if (interaction.customId === "button_config_logs_emoji") {
    if (db.module.get(String("logs")) === "on") {
      if (((interaction.member).permissions.has(PermissionsBitField.Flags.Administrator)) || interaction.member.id === dev) {
        if (db.logs.get(String("emojis")) === '🔴') {
          db.logs.set(String("emojis"), '🔵')

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color}`)
            .setTitle(`${emoji.settings}${configm.title.text1}`)
            .setDescription('> ' + `${emoji.chanel}${configm.description.text15}` + ' ' + '*`' + db.database.get(String('logs_chanel')) + '`*'
              + '``` ``` \n' + `${emoji.présent}${configm.description.text17}` + '\n'
              + '> ' + db.logs.get(String('moderation')) + ' **|** ' + `${emoji.moderateur}${configm.description.text18}` + '\n'
              + '> ' + db.logs.get(String('join&leave')) + ' **|** ' + `${emoji.welcome}${configm.description.text19}` + '\n'
              + '> ' + db.logs.get(String('salons')) + ' **|** ' + `${emoji.chanel}${configm.description.text20}` + '\n'
              + '> ' + db.logs.get(String('roles')) + ' **|** ' + `${emoji.protector}${configm.description.text21}` + '\n'
              + '> ' + db.logs.get(String('emojis')) + ' **|** ' + `${emoji.error}${configm.description.text22}` + '\n'
              + '> ' + db.logs.get(String('pseudos')) + ' **|** ' + `${emoji.pen}${configm.description.text23}` + '\n'
              + '> ' + db.logs.get(String('vocal')) + ' **|** ' + `${emoji.mute}${configm.description.text24}` + '\n'
              + '> ' + db.logs.get(String('messages')) + ' **|** ' + `${emoji.list}${configm.description.text25}` + '\n')

          interaction.message.edit({ embeds: ([embed]) })

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color_good}`)
            .setDescription(`${emoji.tick}${configm.description.text26}` + '`Emojis`' + `${configm.description.text27}`)

          console.log(chalk.gray(`L'évènement de "Emojis" dans le module de "logs" a été activé.`))

          interaction.channel.send({
            embeds: ([embed])
          }).then(async (delete_message) => {
            await delay(Number(3) * 1000)
            delete_message.delete()
          })

          interaction.deferUpdate()

        } else if (db.logs.get(String("emojis")) === '🔵') {
          db.logs.set(String("emojis"), '🔴')

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color}`)
            .setTitle(`${emoji.settings}${configm.title.text1}`)
            .setDescription('> ' + `${emoji.chanel}${configm.description.text15}` + ' ' + '*`' + db.database.get(String('logs_chanel')) + '`*'
              + '``` ``` \n' + `${emoji.présent}${configm.description.text17}` + '\n'
              + '> ' + db.logs.get(String('moderation')) + ' **|** ' + `${emoji.moderateur}${configm.description.text18}` + '\n'
              + '> ' + db.logs.get(String('join&leave')) + ' **|** ' + `${emoji.welcome}${configm.description.text19}` + '\n'
              + '> ' + db.logs.get(String('salons')) + ' **|** ' + `${emoji.chanel}${configm.description.text20}` + '\n'
              + '> ' + db.logs.get(String('roles')) + ' **|** ' + `${emoji.protector}${configm.description.text21}` + '\n'
              + '> ' + db.logs.get(String('emojis')) + ' **|** ' + `${emoji.error}${configm.description.text22}` + '\n'
              + '> ' + db.logs.get(String('pseudos')) + ' **|** ' + `${emoji.pen}${configm.description.text23}` + '\n'
              + '> ' + db.logs.get(String('vocal')) + ' **|** ' + `${emoji.mute}${configm.description.text24}` + '\n'
              + '> ' + db.logs.get(String('messages')) + ' **|** ' + `${emoji.list}${configm.description.text25}` + '\n')

          interaction.message.edit({ embeds: ([embed]) })

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color_error}`)
            .setDescription(`${emoji.wrong}${configm.description.text28}` + '`Emojis`' + `${configm.description.text29}`)

          console.log(chalk.gray(`L'évènement de "Emojis" dans le module de "logs" a été désactivé.`))


          interaction.channel.send({
            embeds: ([embed])

          }).then(async (delete_message) => {
            await delay(Number(3) * 1000)
            delete_message.delete()
          })

          interaction.deferUpdate()


        }
      }

    } else {

      ////Erreur Module no actif\\\\

      var embed = new EmbedBuilder()
        .setColor(`${config.color.color_error}`)
        .setDescription(`${emoji.wrong}${general.error.module_activate1}` + ' *`Logs`* ' + `${general.error.module_activate2}`)

      interaction.reply({ embeds: ([embed]), ephemeral: true })
    }
  }

  ///Button activate logs rank\\\

  if (interaction.customId === "button_config_logs_rank") {
    if (db.module.get(String("logs")) === "on") {
      if (((interaction.member).permissions.has(PermissionsBitField.Flags.Administrator)) || interaction.member.id === dev) {
        if (db.logs.get(String("roles")) === '🔴') {
          db.logs.set(String("roles"), '🔵')

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color}`)
            .setTitle(`${emoji.settings}${configm.title.text1}`)
            .setDescription('> ' + `${emoji.chanel}${configm.description.text15}` + ' ' + '*`' + db.database.get(String('logs_chanel')) + '`*'
              + '``` ``` \n' + `${emoji.présent}${configm.description.text17}` + '\n'
              + '> ' + db.logs.get(String('moderation')) + ' **|** ' + `${emoji.moderateur}${configm.description.text18}` + '\n'
              + '> ' + db.logs.get(String('join&leave')) + ' **|** ' + `${emoji.welcome}${configm.description.text19}` + '\n'
              + '> ' + db.logs.get(String('salons')) + ' **|** ' + `${emoji.chanel}${configm.description.text20}` + '\n'
              + '> ' + db.logs.get(String('roles')) + ' **|** ' + `${emoji.protector}${configm.description.text21}` + '\n'
              + '> ' + db.logs.get(String('emojis')) + ' **|** ' + `${emoji.error}${configm.description.text22}` + '\n'
              + '> ' + db.logs.get(String('pseudos')) + ' **|** ' + `${emoji.pen}${configm.description.text23}` + '\n'
              + '> ' + db.logs.get(String('vocal')) + ' **|** ' + `${emoji.mute}${configm.description.text24}` + '\n'
              + '> ' + db.logs.get(String('messages')) + ' **|** ' + `${emoji.list}${configm.description.text25}` + '\n')

          interaction.message.edit({ embeds: ([embed]) })

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color_good}`)
            .setDescription(`${emoji.tick}${configm.description.text26}` + '`Rôles`' + `${configm.description.text27}`)

          console.log(chalk.gray(`L'évènement de "Rôles" dans le module de "logs" a été activé.`))

          interaction.channel.send({
            embeds: ([embed])
          }).then(async (delete_message) => {
            await delay(Number(3) * 1000)
            delete_message.delete()
          })

          interaction.deferUpdate()

        } else if (db.logs.get(String("roles")) === '🔵') {
          db.logs.set(String("roles"), '🔴')

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color}`)
            .setTitle(`${emoji.settings}${configm.title.text1}`)
            .setDescription('> ' + `${emoji.chanel}${configm.description.text15}` + ' ' + '*`' + db.database.get(String('logs_chanel')) + '`*'
              + '``` ``` \n' + `${emoji.présent}${configm.description.text17}` + '\n'
              + '> ' + db.logs.get(String('moderation')) + ' **|** ' + `${emoji.moderateur}${configm.description.text18}` + '\n'
              + '> ' + db.logs.get(String('join&leave')) + ' **|** ' + `${emoji.welcome}${configm.description.text19}` + '\n'
              + '> ' + db.logs.get(String('salons')) + ' **|** ' + `${emoji.chanel}${configm.description.text20}` + '\n'
              + '> ' + db.logs.get(String('roles')) + ' **|** ' + `${emoji.protector}${configm.description.text21}` + '\n'
              + '> ' + db.logs.get(String('emojis')) + ' **|** ' + `${emoji.error}${configm.description.text22}` + '\n'
              + '> ' + db.logs.get(String('pseudos')) + ' **|** ' + `${emoji.pen}${configm.description.text23}` + '\n'
              + '> ' + db.logs.get(String('vocal')) + ' **|** ' + `${emoji.mute}${configm.description.text24}` + '\n'
              + '> ' + db.logs.get(String('messages')) + ' **|** ' + `${emoji.list}${configm.description.text25}` + '\n')

          interaction.message.edit({ embeds: ([embed]) })

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color_error}`)
            .setDescription(`${emoji.wrong}${configm.description.text28}` + '`Rôles`' + `${configm.description.text29}`)

          console.log(chalk.gray(`L'évènement de "Rôles" dans le module de "logs" a été désactivé.`))


          interaction.channel.send({
            embeds: ([embed])

          }).then(async (delete_message) => {
            await delay(Number(3) * 1000)
            delete_message.delete()
          })

          interaction.deferUpdate()


        }
      }

    } else {

      ////Erreur Module no actif\\\\

      var embed = new EmbedBuilder()
        .setColor(`${config.color.color_error}`)
        .setDescription(`${emoji.wrong}${general.error.module_activate1}` + ' *`Logs`* ' + `${general.error.module_activate2}`)

      interaction.reply({ embeds: ([embed]), ephemeral: true })
    }
  }

  ///Button activate logs channel\\\

  if (interaction.customId === "button_config_logs_channel") {
    if (db.module.get(String("logs")) === "on") {
      if (((interaction.member).permissions.has(PermissionsBitField.Flags.Administrator)) || interaction.member.id === dev) {
        if (db.logs.get(String("salons")) === '🔴') {
          db.logs.set(String("salons"), '🔵')

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color}`)
            .setTitle(`${emoji.settings}${configm.title.text1}`)
            .setDescription('> ' + `${emoji.chanel}${configm.description.text15}` + ' ' + '*`' + db.database.get(String('logs_chanel')) + '`*'
              + '``` ``` \n' + `${emoji.présent}${configm.description.text17}` + '\n'
              + '> ' + db.logs.get(String('moderation')) + ' **|** ' + `${emoji.moderateur}${configm.description.text18}` + '\n'
              + '> ' + db.logs.get(String('join&leave')) + ' **|** ' + `${emoji.welcome}${configm.description.text19}` + '\n'
              + '> ' + db.logs.get(String('salons')) + ' **|** ' + `${emoji.chanel}${configm.description.text20}` + '\n'
              + '> ' + db.logs.get(String('roles')) + ' **|** ' + `${emoji.protector}${configm.description.text21}` + '\n'
              + '> ' + db.logs.get(String('emojis')) + ' **|** ' + `${emoji.error}${configm.description.text22}` + '\n'
              + '> ' + db.logs.get(String('pseudos')) + ' **|** ' + `${emoji.pen}${configm.description.text23}` + '\n'
              + '> ' + db.logs.get(String('vocal')) + ' **|** ' + `${emoji.mute}${configm.description.text24}` + '\n'
              + '> ' + db.logs.get(String('messages')) + ' **|** ' + `${emoji.list}${configm.description.text25}` + '\n')

          interaction.message.edit({ embeds: ([embed]) })

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color_good}`)
            .setDescription(`${emoji.tick}${configm.description.text26}` + '`Salons`' + `${configm.description.text27}`)

          console.log(chalk.gray(`L'évènement de "Salons" dans le module de "logs" a été activé.`))

          interaction.channel.send({
            embeds: ([embed])
          }).then(async (delete_message) => {
            await delay(Number(3) * 1000)
            delete_message.delete()
          })

          interaction.deferUpdate()

        } else if (db.logs.get(String("salons")) === '🔵') {
          db.logs.set(String("salons"), '🔴')

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color}`)
            .setTitle(`${emoji.settings}${configm.title.text1}`)
            .setDescription('> ' + `${emoji.chanel}${configm.description.text15}` + ' ' + '*`' + db.database.get(String('logs_chanel')) + '`*'
              + '``` ``` \n' + `${emoji.présent}${configm.description.text17}` + '\n'
              + '> ' + db.logs.get(String('moderation')) + ' **|** ' + `${emoji.moderateur}${configm.description.text18}` + '\n'
              + '> ' + db.logs.get(String('join&leave')) + ' **|** ' + `${emoji.welcome}${configm.description.text19}` + '\n'
              + '> ' + db.logs.get(String('salons')) + ' **|** ' + `${emoji.chanel}${configm.description.text20}` + '\n'
              + '> ' + db.logs.get(String('roles')) + ' **|** ' + `${emoji.protector}${configm.description.text21}` + '\n'
              + '> ' + db.logs.get(String('emojis')) + ' **|** ' + `${emoji.error}${configm.description.text22}` + '\n'
              + '> ' + db.logs.get(String('pseudos')) + ' **|** ' + `${emoji.pen}${configm.description.text23}` + '\n'
              + '> ' + db.logs.get(String('vocal')) + ' **|** ' + `${emoji.mute}${configm.description.text24}` + '\n'
              + '> ' + db.logs.get(String('messages')) + ' **|** ' + `${emoji.list}${configm.description.text25}` + '\n')

          interaction.message.edit({ embeds: ([embed]) })

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color_error}`)
            .setDescription(`${emoji.wrong}${configm.description.text28}` + '`Salons`' + `${configm.description.text29}`)

          console.log(chalk.gray(`L'évènement de "Salons" dans le module de "logs" a été désactivé.`))


          interaction.channel.send({
            embeds: ([embed])

          }).then(async (delete_message) => {
            await delay(Number(3) * 1000)
            delete_message.delete()
          })

          interaction.deferUpdate()


        }
      }

    } else {

      ////Erreur Module no actif\\\\

      var embed = new EmbedBuilder()
        .setColor(`${config.color.color_error}`)
        .setDescription(`${emoji.wrong}${general.error.module_activate1}` + ' *`Logs`* ' + `${general.error.module_activate2}`)

      interaction.reply({ embeds: ([embed]), ephemeral: true })
    }
  }

  ///Button activate logs joins&leaves\\\

  if (interaction.customId === "button_config_logs_join") {
    if (db.module.get(String("logs")) === "on") {
      if (((interaction.member).permissions.has(PermissionsBitField.Flags.Administrator)) || interaction.member.id === dev) {
        if (db.logs.get(String("join&leave")) === '🔴') {
          db.logs.set(String("join&leave"), '🔵')

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color}`)
            .setTitle(`${emoji.settings}${configm.title.text1}`)
            .setDescription('> ' + `${emoji.chanel}${configm.description.text15}` + ' ' + '*`' + db.database.get(String('logs_chanel')) + '`*'
              + '``` ``` \n' + `${emoji.présent}${configm.description.text17}` + '\n'
              + '> ' + db.logs.get(String('moderation')) + ' **|** ' + `${emoji.moderateur}${configm.description.text18}` + '\n'
              + '> ' + db.logs.get(String('join&leave')) + ' **|** ' + `${emoji.welcome}${configm.description.text19}` + '\n'
              + '> ' + db.logs.get(String('salons')) + ' **|** ' + `${emoji.chanel}${configm.description.text20}` + '\n'
              + '> ' + db.logs.get(String('roles')) + ' **|** ' + `${emoji.protector}${configm.description.text21}` + '\n'
              + '> ' + db.logs.get(String('emojis')) + ' **|** ' + `${emoji.error}${configm.description.text22}` + '\n'
              + '> ' + db.logs.get(String('pseudos')) + ' **|** ' + `${emoji.pen}${configm.description.text23}` + '\n'
              + '> ' + db.logs.get(String('vocal')) + ' **|** ' + `${emoji.mute}${configm.description.text24}` + '\n'
              + '> ' + db.logs.get(String('messages')) + ' **|** ' + `${emoji.list}${configm.description.text25}` + '\n')

          interaction.message.edit({ embeds: ([embed]) })

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color_good}`)
            .setDescription(`${emoji.tick}${configm.description.text26}` + '`Arrivés & Départs`' + `${configm.description.text27}`)

          console.log(chalk.gray(`L'évènement de "Arrivés & Départs" dans le module de "logs" a été activé.`))

          interaction.channel.send({
            embeds: ([embed])
          }).then(async (delete_message) => {
            await delay(Number(3) * 1000)
            delete_message.delete()
          })

          interaction.deferUpdate()

        } else if (db.logs.get(String("join&leave")) === '🔵') {
          db.logs.set(String("join&leave"), '🔴')

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color}`)
            .setTitle(`${emoji.settings}${configm.title.text1}`)
            .setDescription('> ' + `${emoji.chanel}${configm.description.text15}` + ' ' + '*`' + db.database.get(String('logs_chanel')) + '`*'
              + '``` ``` \n' + `${emoji.présent}${configm.description.text17}` + '\n'
              + '> ' + db.logs.get(String('moderation')) + ' **|** ' + `${emoji.moderateur}${configm.description.text18}` + '\n'
              + '> ' + db.logs.get(String('join&leave')) + ' **|** ' + `${emoji.welcome}${configm.description.text19}` + '\n'
              + '> ' + db.logs.get(String('salons')) + ' **|** ' + `${emoji.chanel}${configm.description.text20}` + '\n'
              + '> ' + db.logs.get(String('roles')) + ' **|** ' + `${emoji.protector}${configm.description.text21}` + '\n'
              + '> ' + db.logs.get(String('emojis')) + ' **|** ' + `${emoji.error}${configm.description.text22}` + '\n'
              + '> ' + db.logs.get(String('pseudos')) + ' **|** ' + `${emoji.pen}${configm.description.text23}` + '\n'
              + '> ' + db.logs.get(String('vocal')) + ' **|** ' + `${emoji.mute}${configm.description.text24}` + '\n'
              + '> ' + db.logs.get(String('messages')) + ' **|** ' + `${emoji.list}${configm.description.text25}` + '\n')

          interaction.message.edit({ embeds: ([embed]) })

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color_error}`)
            .setDescription(`${emoji.wrong}${configm.description.text28}` + '`Arrivés & Départs`' + `${configm.description.text29}`)

          console.log(chalk.gray(`L'évènement de "Arrivés & Départs" dans le module de "logs" a été désactivé.`))


          interaction.channel.send({
            embeds: ([embed])

          }).then(async (delete_message) => {
            await delay(Number(3) * 1000)
            delete_message.delete()
          })

          interaction.deferUpdate()


        }
      }

    } else {

      ////Erreur Module no actif\\\\

      var embed = new EmbedBuilder()
        .setColor(`${config.color.color_error}`)
        .setDescription(`${emoji.wrong}${general.error.module_activate1}` + ' *`Logs`* ' + `${general.error.module_activate2}`)

      interaction.reply({ embeds: ([embed]), ephemeral: true })
    }
  }

  ///Button activate logs moderation\\\

  if (interaction.customId === "button_config_logs_moderation") {
    if (db.module.get(String("logs")) === "on") {
      if (((interaction.member).permissions.has(PermissionsBitField.Flags.Administrator)) || interaction.member.id === dev) {
        if (db.logs.get(String("moderation")) === '🔴') {
          db.logs.set(String("moderation"), '🔵')

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color}`)
            .setTitle(`${emoji.settings}${configm.title.text1}`)
            .setDescription('> ' + `${emoji.chanel}${configm.description.text15}` + ' ' + '*`' + db.database.get(String('logs_chanel')) + '`*'
              + '``` ``` \n' + `${emoji.présent}${configm.description.text17}` + '\n'
              + '> ' + db.logs.get(String('moderation')) + ' **|** ' + `${emoji.moderateur}${configm.description.text18}` + '\n'
              + '> ' + db.logs.get(String('join&leave')) + ' **|** ' + `${emoji.welcome}${configm.description.text19}` + '\n'
              + '> ' + db.logs.get(String('salons')) + ' **|** ' + `${emoji.chanel}${configm.description.text20}` + '\n'
              + '> ' + db.logs.get(String('roles')) + ' **|** ' + `${emoji.protector}${configm.description.text21}` + '\n'
              + '> ' + db.logs.get(String('emojis')) + ' **|** ' + `${emoji.error}${configm.description.text22}` + '\n'
              + '> ' + db.logs.get(String('pseudos')) + ' **|** ' + `${emoji.pen}${configm.description.text23}` + '\n'
              + '> ' + db.logs.get(String('vocal')) + ' **|** ' + `${emoji.mute}${configm.description.text24}` + '\n'
              + '> ' + db.logs.get(String('messages')) + ' **|** ' + `${emoji.list}${configm.description.text25}` + '\n')

          interaction.message.edit({ embeds: ([embed]) })

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color_good}`)
            .setDescription(`${emoji.tick}${configm.description.text26}` + '`Modération`' + `${configm.description.text27}`)

          console.log(chalk.gray(`L'évènement de "modération" dans le module de "logs" a été activé.`))

          interaction.channel.send({
            embeds: ([embed])
          }).then(async (delete_message) => {
            await delay(Number(3) * 1000)
            delete_message.delete()
          })

          interaction.deferUpdate()

        } else if (db.logs.get(String("moderation")) === '🔵') {
          db.logs.set(String("moderation"), '🔴')

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color}`)
            .setTitle(`${emoji.settings}${configm.title.text1}`)
            .setDescription('> ' + `${emoji.chanel}${configm.description.text15}` + ' ' + '*`' + db.database.get(String('logs_chanel')) + '`*'
              + '``` ``` \n' + `${emoji.présent}${configm.description.text17}` + '\n'
              + '> ' + db.logs.get(String('moderation')) + ' **|** ' + `${emoji.moderateur}${configm.description.text18}` + '\n'
              + '> ' + db.logs.get(String('join&leave')) + ' **|** ' + `${emoji.welcome}${configm.description.text19}` + '\n'
              + '> ' + db.logs.get(String('salons')) + ' **|** ' + `${emoji.chanel}${configm.description.text20}` + '\n'
              + '> ' + db.logs.get(String('roles')) + ' **|** ' + `${emoji.protector}${configm.description.text21}` + '\n'
              + '> ' + db.logs.get(String('emojis')) + ' **|** ' + `${emoji.error}${configm.description.text22}` + '\n'
              + '> ' + db.logs.get(String('pseudos')) + ' **|** ' + `${emoji.pen}${configm.description.text23}` + '\n'
              + '> ' + db.logs.get(String('vocal')) + ' **|** ' + `${emoji.mute}${configm.description.text24}` + '\n'
              + '> ' + db.logs.get(String('messages')) + ' **|** ' + `${emoji.list}${configm.description.text25}` + '\n')

          interaction.message.edit({ embeds: ([embed]) })

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color_error}`)
            .setDescription(`${emoji.wrong}${configm.description.text28}` + '`Modération`' + `${configm.description.text29}`)

          console.log(chalk.gray(`L'évènement de "modération" dans le module de "logs" a été désactivé.`))


          interaction.channel.send({
            embeds: ([embed])

          }).then(async (delete_message) => {
            await delay(Number(3) * 1000)
            delete_message.delete()
          })

          interaction.deferUpdate()


        }
      }

    } else {

      ////Erreur Module no actif\\\\

      var embed = new EmbedBuilder()
        .setColor(`${config.color.color_error}`)
        .setDescription(`${emoji.wrong}${general.error.module_activate1}` + ' *`Logs`* ' + `${general.error.module_activate2}`)

      interaction.reply({ embeds: ([embed]), ephemeral: true })
    }
  }

  ///Button add chanel\\\

  if (interaction.customId === "button_config_logs_chanel") {
    if (((interaction.member).permissions.has(PermissionsBitField.Flags.Administrator)) || (interaction.member.id === dev)) {

      interaction.channel.send(`${emoji.pen}${configm.description.text16}`).then(async (question) => {
        (interaction.channel).awaitMessages({
          filter: (m) => m.author.id === interaction.member.id,
          time: (500 * 60 * 100),
          max: 1
        }).then(async (collected) => {
          reply = collected.first().content;
          message = collected.first();
          interaction.channel.bulkDelete(1)
          question.delete()
          await delay(Number(1) * 1000)
          if (!(reply === "cancel")) {
            if ((!(((reply) || '').startsWith('<#' || '')))) {


              try {

                client.channels.cache.get(reply).send({ content: '**`' + interaction.user.tag + '`**' + " a configuré **`" + client.channels.cache.get(reply).name + "`** comme le salon d'arrivé des logs." })

                db.database.set(String('logs_chanel'), (reply));

                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color_good}`)
                  .setDescription(`${emoji.tick}${general.response.save_modifications}`)

                interaction.channel.send({
                  embeds: ([embed])
                }).then(async (response_save) => {
                  await delay(Number(3) * 1000)
                  response_save.delete()
                })

                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color}`)
                  .setTitle(`${emoji.settings}${configm.title.text1}`)
                  .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
                  .setDescription('> ' + `${emoji.chanel}${configm.description.text15}` + ' ' + '*`' + db.database.get(String('logs_chanel')) + '`*'
                    + '``` ``` \n' + `${emoji.présent}${configm.description.text17}` + '\n'
                    + '> ' + db.logs.get(String('moderation')) + ' **|** ' + `${emoji.moderateur}${configm.description.text18}` + '\n'
                    + '> ' + db.logs.get(String('join&leave')) + ' **|** ' + `${emoji.welcome}${configm.description.text19}` + '\n'
                    + '> ' + db.logs.get(String('salons')) + ' **|** ' + `${emoji.chanel}${configm.description.text20}` + '\n'
                    + '> ' + db.logs.get(String('roles')) + ' **|** ' + `${emoji.protector}${configm.description.text21}` + '\n'
                    + '> ' + db.logs.get(String('emojis')) + ' **|** ' + `${emoji.error}${configm.description.text22}` + '\n'
                    + '> ' + db.logs.get(String('pseudos')) + ' **|** ' + `${emoji.pen}${configm.description.text23}` + '\n'
                    + '> ' + db.logs.get(String('vocal')) + ' **|** ' + `${emoji.mute}${configm.description.text24}` + '\n'
                    + '> ' + db.logs.get(String('messages')) + ' **|** ' + `${emoji.list}${configm.description.text25}` + '\n')

                interaction.message.edit({ embeds: ([embed]) })

                console.log(chalk.green("L'utilisateur " + interaction.user.tag + " a configuré le salon de logs sur le salon " + client.channels.cache.get(reply).name + "."))

              } catch (err) {

                console.log(chalk.red(err + ' (SALON RENSEIGNE INTROUVABLE)'))

                var embed = new EmbedBuilder()
                  .setColor(`${config.color.color_error}`)
                  .setDescription(`${emoji.wrong}${general.error.channel_notfound}`)

                interaction.channel.send({
                  embeds: ([embed])
                }).then(async (response_error) => {
                  await delay(Number(3) * 1000)
                  response_error.delete()

                })



              }

            } else {

              var embed = new EmbedBuilder()
                .setColor(`${config.color.color_error}`)
                .setDescription(`${emoji.wrong}${general.error.id_chanel_error}`)
              interaction.channel.send({
                embeds: ([embed])
              }).then(async (response_error) => {
                await delay(Number(3) * 1000)
                response_error.delete()

              })
            }
          } else {

            var embed = new EmbedBuilder()
              .setColor(`${config.color.color_error}`)
              .setDescription(`${emoji.wrong}${general.response.nosave_modif}`)
            interaction.channel.send({
              embeds: ([embed])
            }).then(async (response_nosave) => {
              await delay(Number(3) * 1000)
              response_nosave.delete()

            })
          }
        })
      })
    }
  }

  ///Logs\\\

  if (interaction.customId === "module_button_report") {
    if (interaction.user.id === dev) {
      if (db.module.has(String('report'))) {
        if (db.module.get(String('report')) === "off") {

          ///Mise à jour base de donnés\\\

          db.module.set(String('report'), 'on')
          db.statut.set(String('report'), '🔵')

          ///Update message embed\\\

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color}`)
            .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
            .setTitle(`${emoji.settings}${configuration.title.text1}`)
            .setDescription(`${emoji.captcha}${configuration.description.text1}` + ' '
              + '\n> ' + db.statut.get(String('utilitaire')) + ' ' + `${emoji.moderateur}${configuration.description.text2}`
              + '\n> ' + db.statut.get(String('moderation')) + ' ' + `${emoji.banned}${configuration.description.text3}`
              + '\n> ' + db.statut.get(String('level')) + ' ' + `${emoji.level}${configuration.description.text4}`
              + '\n> ' + db.statut.get(String('partenariat')) + ' ' + `${emoji.partner}${configuration.description.text5}`
              + '\n> ' + db.statut.get(String('ghostping')) + ' ' + `${emoji.ping}${configuration.description.text6}`
              + '\n> ' + db.statut.get(String('welcome')) + ' ' + `${emoji.welcome}${configuration.description.text7}`
              + '\n> ' + db.statut.get(String('embed')) + ' ' + `${emoji.file}${configuration.description.text8}`
              + '\n> ' + db.statut.get(String('verification')) + ' ' + `${emoji.verify}${configuration.description.text9}`
              + '\n> ' + db.statut.get(String('economie')) + ' ' + `${emoji.reward}${configuration.description.text10}`
              + '\n> ' + db.statut.get(String('suggestion')) + ' ' + `${emoji.pen}${configuration.description.text11}`
              + '\n> ' + db.statut.get(String('partenariat_mp')) + ' ' + `${emoji.link}${configuration.description.text12}`
              + '\n> ' + db.statut.get(String('sperso')) + ' ' + `${emoji.chanel}${configuration.description.text13}`
              + '\n> ' + db.statut.get(String('logs')) + ' ' + `${emoji.database}${configuration.description.text14}`
              + '\n> ' + db.statut.get(String('game')) + `${emoji.game}${configm.description.text67}`
              + '\n> ' + db.statut.get(String('pub')) + `${emoji.list}${configm.description.text73}`
              + '\n> ' + db.statut.get(String('report')) + `${emoji.warn}${configm.description.text95}`
              + '\n> ' + db.statut.get(String('invites')) + `${emoji.recycle}${configm.description.text98}`
            )

          interaction.message.edit({ embeds: ([embed]) })

          ///Embed\\\

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color_good}`)
            .setDescription(`${emoji.tick}${general.response.activate_module}`)

          ///Send Embed\\\
          interaction.channel.send({
            embeds: ([embed]), ephemeral: true
          }).then(async (message_delete) => {

            await delay(Number(3) * 1000)
            message_delete.delete()

          })

          ///Debug button\\\

          await interaction.deferUpdate()

        } else if (db.module.get(String('report')) === "on") {

          ///Base de donnés\\\

          db.module.set(String('report'), 'off')
          db.statut.set(String('report'), '🔴')

          ///Update message embed\\\

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color}`)
            .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
            .setTitle(`${emoji.settings}${configuration.title.text1}`)
            .setDescription(`${emoji.captcha}${configuration.description.text1}` + ' '
              + '\n> ' + db.statut.get(String('utilitaire')) + ' ' + `${emoji.moderateur}${configuration.description.text2}`
              + '\n> ' + db.statut.get(String('moderation')) + ' ' + `${emoji.banned}${configuration.description.text3}`
              + '\n> ' + db.statut.get(String('level')) + ' ' + `${emoji.level}${configuration.description.text4}`
              + '\n> ' + db.statut.get(String('partenariat')) + ' ' + `${emoji.partner}${configuration.description.text5}`
              + '\n> ' + db.statut.get(String('ghostping')) + ' ' + `${emoji.ping}${configuration.description.text6}`
              + '\n> ' + db.statut.get(String('welcome')) + ' ' + `${emoji.welcome}${configuration.description.text7}`
              + '\n> ' + db.statut.get(String('embed')) + ' ' + `${emoji.file}${configuration.description.text8}`
              + '\n> ' + db.statut.get(String('verification')) + ' ' + `${emoji.verify}${configuration.description.text9}`
              + '\n> ' + db.statut.get(String('economie')) + ' ' + `${emoji.reward}${configuration.description.text10}`
              + '\n> ' + db.statut.get(String('suggestion')) + ' ' + `${emoji.pen}${configuration.description.text11}`
              + '\n> ' + db.statut.get(String('partenariat_mp')) + ' ' + `${emoji.link}${configuration.description.text12}`
              + '\n> ' + db.statut.get(String('sperso')) + ' ' + `${emoji.chanel}${configuration.description.text13}`
              + '\n> ' + db.statut.get(String('logs')) + ' ' + `${emoji.database}${configuration.description.text14}`
              + '\n> ' + db.statut.get(String('game')) + `${emoji.game}${configm.description.text67}`
              + '\n> ' + db.statut.get(String('pub')) + `${emoji.list}${configm.description.text73}`
              + '\n> ' + db.statut.get(String('report')) + `${emoji.warn}${configm.description.text95}`
              + '\n> ' + db.statut.get(String('invites')) + `${emoji.recycle}${configm.description.text98}`
            )

          interaction.message.edit({ embeds: ([embed]) })

          ///Send Embed\\\

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color_error}`)
            .setDescription(`${emoji.wrong}${general.response.desactivate_module}`)

          ///Send Embed\\\
          interaction.channel.send({
            embeds: ([embed]), ephemeral: true
          }).then(async (message_delete) => {

            await delay(Number(3) * 1000)
            message_delete.delete()

          })

          ///Debug Button\\\

          await interaction.deferUpdate()
        }
      }
    } else {

      ///Error perms dev\\\

      var embed = new EmbedBuilder()
        .setColor(`${config.color.color_error}`)
        .setDescription(`${emoji.wrong}${general.error.perms_dev}`)

      interaction.reply({ embeds: ([embed]), ephemeral: true })

    }

  };

  if (interaction.customId === "module_button_invites") {
    if (interaction.user.id === dev) {
      if (db.module.has(String('invites'))) {
        if (db.module.get(String('invites')) === "off") {

          ///Mise à jour base de donnés\\\

          db.module.set(String('invites'), 'on')
          db.statut.set(String('invites'), '🔵')

          ///Update message embed\\\

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color}`)
            .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
            .setTitle(`${emoji.settings}${configuration.title.text1}`)
            .setDescription(`${emoji.captcha}${configuration.description.text1}` + ' '
              + '\n> ' + db.statut.get(String('utilitaire')) + ' ' + `${emoji.moderateur}${configuration.description.text2}`
              + '\n> ' + db.statut.get(String('moderation')) + ' ' + `${emoji.banned}${configuration.description.text3}`
              + '\n> ' + db.statut.get(String('level')) + ' ' + `${emoji.level}${configuration.description.text4}`
              + '\n> ' + db.statut.get(String('partenariat')) + ' ' + `${emoji.partner}${configuration.description.text5}`
              + '\n> ' + db.statut.get(String('ghostping')) + ' ' + `${emoji.ping}${configuration.description.text6}`
              + '\n> ' + db.statut.get(String('welcome')) + ' ' + `${emoji.welcome}${configuration.description.text7}`
              + '\n> ' + db.statut.get(String('embed')) + ' ' + `${emoji.file}${configuration.description.text8}`
              + '\n> ' + db.statut.get(String('verification')) + ' ' + `${emoji.verify}${configuration.description.text9}`
              + '\n> ' + db.statut.get(String('economie')) + ' ' + `${emoji.reward}${configuration.description.text10}`
              + '\n> ' + db.statut.get(String('suggestion')) + ' ' + `${emoji.pen}${configuration.description.text11}`
              + '\n> ' + db.statut.get(String('partenariat_mp')) + ' ' + `${emoji.link}${configuration.description.text12}`
              + '\n> ' + db.statut.get(String('sperso')) + ' ' + `${emoji.chanel}${configuration.description.text13}`
              + '\n> ' + db.statut.get(String('logs')) + ' ' + `${emoji.database}${configuration.description.text14}`
              + '\n> ' + db.statut.get(String('game')) + `${emoji.game}${configm.description.text67}`
              + '\n> ' + db.statut.get(String('pub')) + `${emoji.list}${configm.description.text73}`
              + '\n> ' + db.statut.get(String('report')) + `${emoji.warn}${configm.description.text95}`
              + '\n> ' + db.statut.get(String('invites')) + `${emoji.recycle}${configm.description.text98}`
            )

          interaction.message.edit({ embeds: ([embed]) })

          ///Embed\\\

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color_good}`)
            .setDescription(`${emoji.tick}${general.response.activate_module}`)

          ///Send Embed\\\
          interaction.channel.send({
            embeds: ([embed]), ephemeral: true
          }).then(async (message_delete) => {

            await delay(Number(3) * 1000)
            message_delete.delete()

          })

          ///Debug button\\\

          await interaction.deferUpdate()

        } else if (db.module.get(String('invites')) === "on") {

          ///Base de donnés\\\

          db.module.set(String('invites'), 'off')
          db.statut.set(String('invites'), '🔴')

          ///Update message embed\\\

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color}`)
            .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
            .setTitle(`${emoji.settings}${configuration.title.text1}`)
            .setDescription(`${emoji.captcha}${configuration.description.text1}` + ' '
              + '\n> ' + db.statut.get(String('utilitaire')) + ' ' + `${emoji.moderateur}${configuration.description.text2}`
              + '\n> ' + db.statut.get(String('moderation')) + ' ' + `${emoji.banned}${configuration.description.text3}`
              + '\n> ' + db.statut.get(String('level')) + ' ' + `${emoji.level}${configuration.description.text4}`
              + '\n> ' + db.statut.get(String('partenariat')) + ' ' + `${emoji.partner}${configuration.description.text5}`
              + '\n> ' + db.statut.get(String('ghostping')) + ' ' + `${emoji.ping}${configuration.description.text6}`
              + '\n> ' + db.statut.get(String('welcome')) + ' ' + `${emoji.welcome}${configuration.description.text7}`
              + '\n> ' + db.statut.get(String('embed')) + ' ' + `${emoji.file}${configuration.description.text8}`
              + '\n> ' + db.statut.get(String('verification')) + ' ' + `${emoji.verify}${configuration.description.text9}`
              + '\n> ' + db.statut.get(String('economie')) + ' ' + `${emoji.reward}${configuration.description.text10}`
              + '\n> ' + db.statut.get(String('suggestion')) + ' ' + `${emoji.pen}${configuration.description.text11}`
              + '\n> ' + db.statut.get(String('partenariat_mp')) + ' ' + `${emoji.link}${configuration.description.text12}`
              + '\n> ' + db.statut.get(String('sperso')) + ' ' + `${emoji.chanel}${configuration.description.text13}`
              + '\n> ' + db.statut.get(String('logs')) + ' ' + `${emoji.database}${configuration.description.text14}`
              + '\n> ' + db.statut.get(String('game')) + `${emoji.game}${configm.description.text67}`
              + '\n> ' + db.statut.get(String('pub')) + `${emoji.list}${configm.description.text73}`
              + '\n> ' + db.statut.get(String('report')) + `${emoji.warn}${configm.description.text95}`
              + '\n> ' + db.statut.get(String('invites')) + `${emoji.recycle}${configm.description.text98}`
            )

          interaction.message.edit({ embeds: ([embed]) })

          ///Send Embed\\\

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color_error}`)
            .setDescription(`${emoji.wrong}${general.response.desactivate_module}`)

          ///Send Embed\\\
          interaction.channel.send({
            embeds: ([embed]), ephemeral: true
          }).then(async (message_delete) => {

            await delay(Number(3) * 1000)
            message_delete.delete()

          })

          ///Debug Button\\\

          await interaction.deferUpdate()
        }
      }
    } else {

      ///Error perms dev\\\

      var embed = new EmbedBuilder()
        .setColor(`${config.color.color_error}`)
        .setDescription(`${emoji.wrong}${general.error.perms_dev}`)

      interaction.reply({ embeds: ([embed]), ephemeral: true })

    }

  };


  if (interaction.customId === "module_button_game") {
    if (interaction.user.id === dev) {
      if (db.module.has(String('game'))) {
        if (db.module.get(String('game')) === "off") {

          ///Mise à jour base de donnés\\\

          db.module.set(String('game'), 'on')
          db.statut.set(String('game'), '🔵')

          ///Update message embed\\\

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color}`)
            .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
            .setTitle(`${emoji.settings}${configuration.title.text1}`)
            .setDescription(`${emoji.captcha}${configuration.description.text1}` + ' '
              + '\n> ' + db.statut.get(String('utilitaire')) + ' ' + `${emoji.moderateur}${configuration.description.text2}`
              + '\n> ' + db.statut.get(String('moderation')) + ' ' + `${emoji.banned}${configuration.description.text3}`
              + '\n> ' + db.statut.get(String('level')) + ' ' + `${emoji.level}${configuration.description.text4}`
              + '\n> ' + db.statut.get(String('partenariat')) + ' ' + `${emoji.partner}${configuration.description.text5}`
              + '\n> ' + db.statut.get(String('ghostping')) + ' ' + `${emoji.ping}${configuration.description.text6}`
              + '\n> ' + db.statut.get(String('welcome')) + ' ' + `${emoji.welcome}${configuration.description.text7}`
              + '\n> ' + db.statut.get(String('embed')) + ' ' + `${emoji.file}${configuration.description.text8}`
              + '\n> ' + db.statut.get(String('verification')) + ' ' + `${emoji.verify}${configuration.description.text9}`
              + '\n> ' + db.statut.get(String('economie')) + ' ' + `${emoji.reward}${configuration.description.text10}`
              + '\n> ' + db.statut.get(String('suggestion')) + ' ' + `${emoji.pen}${configuration.description.text11}`
              + '\n> ' + db.statut.get(String('partenariat_mp')) + ' ' + `${emoji.link}${configuration.description.text12}`
              + '\n> ' + db.statut.get(String('sperso')) + ' ' + `${emoji.chanel}${configuration.description.text13}`
              + '\n> ' + db.statut.get(String('logs')) + ' ' + `${emoji.database}${configuration.description.text14}`
              + '\n> ' + db.statut.get(String('game')) + `${emoji.game}${configm.description.text67}`
              + '\n> ' + db.statut.get(String('pub')) + `${emoji.list}${configm.description.text73}`
              + '\n> ' + db.statut.get(String('report')) + `${emoji.warn}${configm.description.text95}`
              + '\n> ' + db.statut.get(String('invites')) + `${emoji.recycle}${configm.description.text98}`
            )

          interaction.message.edit({ embeds: ([embed]) })

          ///Embed\\\

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color_good}`)
            .setDescription(`${emoji.tick}${general.response.activate_module}`)

          ///Send Embed\\\
          interaction.channel.send({
            embeds: ([embed]), ephemeral: true
          }).then(async (message_delete) => {

            await delay(Number(3) * 1000)
            message_delete.delete()

          })

          ///Debug button\\\

          await interaction.deferUpdate()

        } else if (db.module.get(String('game')) === "on") {

          ///Base de donnés\\\

          db.module.set(String('game'), 'off')
          db.statut.set(String('game'), '🔴')

          ///Update message embed\\\

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color}`)
            .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
            .setTitle(`${emoji.settings}${configuration.title.text1}`)
            .setDescription(`${emoji.captcha}${configuration.description.text1}` + ' '
              + '\n> ' + db.statut.get(String('utilitaire')) + ' ' + `${emoji.moderateur}${configuration.description.text2}`
              + '\n> ' + db.statut.get(String('moderation')) + ' ' + `${emoji.banned}${configuration.description.text3}`
              + '\n> ' + db.statut.get(String('level')) + ' ' + `${emoji.level}${configuration.description.text4}`
              + '\n> ' + db.statut.get(String('partenariat')) + ' ' + `${emoji.partner}${configuration.description.text5}`
              + '\n> ' + db.statut.get(String('ghostping')) + ' ' + `${emoji.ping}${configuration.description.text6}`
              + '\n> ' + db.statut.get(String('welcome')) + ' ' + `${emoji.welcome}${configuration.description.text7}`
              + '\n> ' + db.statut.get(String('embed')) + ' ' + `${emoji.file}${configuration.description.text8}`
              + '\n> ' + db.statut.get(String('verification')) + ' ' + `${emoji.verify}${configuration.description.text9}`
              + '\n> ' + db.statut.get(String('economie')) + ' ' + `${emoji.reward}${configuration.description.text10}`
              + '\n> ' + db.statut.get(String('suggestion')) + ' ' + `${emoji.pen}${configuration.description.text11}`
              + '\n> ' + db.statut.get(String('partenariat_mp')) + ' ' + `${emoji.link}${configuration.description.text12}`
              + '\n> ' + db.statut.get(String('sperso')) + ' ' + `${emoji.chanel}${configuration.description.text13}`
              + '\n> ' + db.statut.get(String('logs')) + ' ' + `${emoji.database}${configuration.description.text14}`
              + '\n> ' + db.statut.get(String('game')) + `${emoji.game}${configm.description.text67}`
              + '\n> ' + db.statut.get(String('pub')) + `${emoji.list}${configm.description.text73}`
              + '\n> ' + db.statut.get(String('report')) + `${emoji.warn}${configm.description.text95}`
              + '\n> ' + db.statut.get(String('invites')) + `${emoji.recycle}${configm.description.text98}`
            )

          interaction.message.edit({ embeds: ([embed]) })

          ///Send Embed\\\

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color_error}`)
            .setDescription(`${emoji.wrong}${general.response.desactivate_module}`)

          ///Send Embed\\\
          interaction.channel.send({
            embeds: ([embed]), ephemeral: true
          }).then(async (message_delete) => {

            await delay(Number(3) * 1000)
            message_delete.delete()

          })

          ///Debug Button\\\

          await interaction.deferUpdate()
        }
      }
    } else {

      ///Error perms dev\\\

      var embed = new EmbedBuilder()
        .setColor(`${config.color.color_error}`)
        .setDescription(`${emoji.wrong}${general.error.perms_dev}`)

      interaction.reply({ embeds: ([embed]), ephemeral: true })

    }

  };

  if (interaction.customId === "module_button_logs") {
    if (interaction.user.id === dev) {
      if (db.module.has(String('logs'))) {
        if (db.module.get(String('logs')) === "off") {

          ///Mise à jour base de donnés\\\

          db.module.set(String('logs'), 'on')
          db.statut.set(String('logs'), '🔵')

          ///Update message embed\\\

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color}`)
            .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
            .setTitle(`${emoji.settings}${configuration.title.text1}`)
            .setDescription(`${emoji.captcha}${configuration.description.text1}` + ' '
              + '\n> ' + db.statut.get(String('utilitaire')) + ' ' + `${emoji.moderateur}${configuration.description.text2}`
              + '\n> ' + db.statut.get(String('moderation')) + ' ' + `${emoji.banned}${configuration.description.text3}`
              + '\n> ' + db.statut.get(String('level')) + ' ' + `${emoji.level}${configuration.description.text4}`
              + '\n> ' + db.statut.get(String('partenariat')) + ' ' + `${emoji.partner}${configuration.description.text5}`
              + '\n> ' + db.statut.get(String('ghostping')) + ' ' + `${emoji.ping}${configuration.description.text6}`
              + '\n> ' + db.statut.get(String('welcome')) + ' ' + `${emoji.welcome}${configuration.description.text7}`
              + '\n> ' + db.statut.get(String('embed')) + ' ' + `${emoji.file}${configuration.description.text8}`
              + '\n> ' + db.statut.get(String('verification')) + ' ' + `${emoji.verify}${configuration.description.text9}`
              + '\n> ' + db.statut.get(String('economie')) + ' ' + `${emoji.reward}${configuration.description.text10}`
              + '\n> ' + db.statut.get(String('suggestion')) + ' ' + `${emoji.pen}${configuration.description.text11}`
              + '\n> ' + db.statut.get(String('partenariat_mp')) + ' ' + `${emoji.link}${configuration.description.text12}`
              + '\n> ' + db.statut.get(String('sperso')) + ' ' + `${emoji.chanel}${configuration.description.text13}`
              + '\n> ' + db.statut.get(String('logs')) + ' ' + `${emoji.database}${configuration.description.text14}`
              + '\n> ' + db.statut.get(String('game')) + `${emoji.game}${configm.description.text67}`
              + '\n> ' + db.statut.get(String('pub')) + `${emoji.list}${configm.description.text73}`
              + '\n> ' + db.statut.get(String('report')) + `${emoji.warn}${configm.description.text95}`
              + '\n> ' + db.statut.get(String('invites')) + `${emoji.recycle}${configm.description.text98}`
            )

          interaction.message.edit({ embeds: ([embed]) })

          ///Embed\\\

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color_good}`)
            .setDescription(`${emoji.tick}${general.response.activate_module}`)

          ///Send Embed\\\
          interaction.channel.send({
            embeds: ([embed]), ephemeral: true
          }).then(async (message_delete) => {

            await delay(Number(3) * 1000)
            message_delete.delete()

          })

          ///Debug button\\\

          await interaction.deferUpdate()

        } else if (db.module.get(String('logs')) === "on") {

          ///Base de donnés\\\

          db.module.set(String('logs'), 'off')
          db.statut.set(String('logs'), '🔴')

          ///Update message embed\\\

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color}`)
            .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
            .setTitle(`${emoji.settings}${configuration.title.text1}`)
            .setDescription(`${emoji.captcha}${configuration.description.text1}` + ' '
              + '\n> ' + db.statut.get(String('utilitaire')) + ' ' + `${emoji.moderateur}${configuration.description.text2}`
              + '\n> ' + db.statut.get(String('moderation')) + ' ' + `${emoji.banned}${configuration.description.text3}`
              + '\n> ' + db.statut.get(String('level')) + ' ' + `${emoji.level}${configuration.description.text4}`
              + '\n> ' + db.statut.get(String('partenariat')) + ' ' + `${emoji.partner}${configuration.description.text5}`
              + '\n> ' + db.statut.get(String('ghostping')) + ' ' + `${emoji.ping}${configuration.description.text6}`
              + '\n> ' + db.statut.get(String('welcome')) + ' ' + `${emoji.welcome}${configuration.description.text7}`
              + '\n> ' + db.statut.get(String('embed')) + ' ' + `${emoji.file}${configuration.description.text8}`
              + '\n> ' + db.statut.get(String('verification')) + ' ' + `${emoji.verify}${configuration.description.text9}`
              + '\n> ' + db.statut.get(String('economie')) + ' ' + `${emoji.reward}${configuration.description.text10}`
              + '\n> ' + db.statut.get(String('suggestion')) + ' ' + `${emoji.pen}${configuration.description.text11}`
              + '\n> ' + db.statut.get(String('partenariat_mp')) + ' ' + `${emoji.link}${configuration.description.text12}`
              + '\n> ' + db.statut.get(String('sperso')) + ' ' + `${emoji.chanel}${configuration.description.text13}`
              + '\n> ' + db.statut.get(String('logs')) + ' ' + `${emoji.database}${configuration.description.text14}`
              + '\n> ' + db.statut.get(String('game')) + `${emoji.game}${configm.description.text67}`
              + '\n> ' + db.statut.get(String('pub')) + `${emoji.list}${configm.description.text73}`
              + '\n> ' + db.statut.get(String('report')) + `${emoji.warn}${configm.description.text95}`
              + '\n> ' + db.statut.get(String('invites')) + `${emoji.recycle}${configm.description.text98}`
            )

          interaction.message.edit({ embeds: ([embed]) })

          ///Send Embed\\\

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color_error}`)
            .setDescription(`${emoji.wrong}${general.response.desactivate_module}`)

          ///Send Embed\\\
          interaction.channel.send({
            embeds: ([embed]), ephemeral: true
          }).then(async (message_delete) => {

            await delay(Number(3) * 1000)
            message_delete.delete()

          })

          ///Debug Button\\\

          await interaction.deferUpdate()
        }
      }
    } else {

      ///Error perms dev\\\

      var embed = new EmbedBuilder()
        .setColor(`${config.color.color_error}`)
        .setDescription(`${emoji.wrong}${general.error.perms_dev}`)

      interaction.reply({ embeds: ([embed]), ephemeral: true })

    }

  };

  ///Salons personnalisés\\\
  if (interaction.customId === "module_button_sperso") {
    if (interaction.user.id === dev) {
      if (db.module.has(String('sperso'))) {
        if (db.module.get(String('sperso')) === "off") {

          ///Mise à jour base de donnés\\\

          db.module.set(String('sperso'), 'on')
          db.statut.set(String('sperso'), '🔵')

          ///Update message embed\\\

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color}`)
            .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
            .setTitle(`${emoji.settings}${configuration.title.text1}`)
            .setDescription(`${emoji.captcha}${configuration.description.text1}` + ' '
              + '\n> ' + db.statut.get(String('utilitaire')) + ' ' + `${emoji.moderateur}${configuration.description.text2}`
              + '\n> ' + db.statut.get(String('moderation')) + ' ' + `${emoji.banned}${configuration.description.text3}`
              + '\n> ' + db.statut.get(String('level')) + ' ' + `${emoji.level}${configuration.description.text4}`
              + '\n> ' + db.statut.get(String('partenariat')) + ' ' + `${emoji.partner}${configuration.description.text5}`
              + '\n> ' + db.statut.get(String('ghostping')) + ' ' + `${emoji.ping}${configuration.description.text6}`
              + '\n> ' + db.statut.get(String('welcome')) + ' ' + `${emoji.welcome}${configuration.description.text7}`
              + '\n> ' + db.statut.get(String('embed')) + ' ' + `${emoji.file}${configuration.description.text8}`
              + '\n> ' + db.statut.get(String('verification')) + ' ' + `${emoji.verify}${configuration.description.text9}`
              + '\n> ' + db.statut.get(String('economie')) + ' ' + `${emoji.reward}${configuration.description.text10}`
              + '\n> ' + db.statut.get(String('suggestion')) + ' ' + `${emoji.pen}${configuration.description.text11}`
              + '\n> ' + db.statut.get(String('partenariat_mp')) + ' ' + `${emoji.link}${configuration.description.text12}`
              + '\n> ' + db.statut.get(String('sperso')) + ' ' + `${emoji.chanel}${configuration.description.text13}`
              + '\n> ' + db.statut.get(String('logs')) + ' ' + `${emoji.database}${configuration.description.text14}`
              + '\n> ' + db.statut.get(String('game')) + `${emoji.game}${configm.description.text67}`
              + '\n> ' + db.statut.get(String('pub')) + `${emoji.list}${configm.description.text73}`
              + '\n> ' + db.statut.get(String('report')) + `${emoji.warn}${configm.description.text95}`
              + '\n> ' + db.statut.get(String('invites')) + `${emoji.recycle}${configm.description.text98}`
            )

          interaction.message.edit({ embeds: ([embed]) })

          ///Embed\\\

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color_good}`)
            .setDescription(`${emoji.tick}${general.response.activate_module}`)

          ///Send Embed\\\
          interaction.channel.send({
            embeds: ([embed]), ephemeral: true
          }).then(async (message_delete) => {

            await delay(Number(3) * 1000)
            message_delete.delete()

          })

          ///Debug button\\\

          await interaction.deferUpdate()

        } else if (db.module.get(String('sperso')) === "on") {

          ///Base de donnés\\\

          db.module.set(String('sperso'), 'off')
          db.statut.set(String('sperso'), '🔴')

          ///Update message embed\\\

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color}`)
            .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
            .setTitle(`${emoji.settings}${configuration.title.text1}`)
            .setDescription(`${emoji.captcha}${configuration.description.text1}` + ' '
              + '\n> ' + db.statut.get(String('utilitaire')) + ' ' + `${emoji.moderateur}${configuration.description.text2}`
              + '\n> ' + db.statut.get(String('moderation')) + ' ' + `${emoji.banned}${configuration.description.text3}`
              + '\n> ' + db.statut.get(String('level')) + ' ' + `${emoji.level}${configuration.description.text4}`
              + '\n> ' + db.statut.get(String('partenariat')) + ' ' + `${emoji.partner}${configuration.description.text5}`
              + '\n> ' + db.statut.get(String('ghostping')) + ' ' + `${emoji.ping}${configuration.description.text6}`
              + '\n> ' + db.statut.get(String('welcome')) + ' ' + `${emoji.welcome}${configuration.description.text7}`
              + '\n> ' + db.statut.get(String('embed')) + ' ' + `${emoji.file}${configuration.description.text8}`
              + '\n> ' + db.statut.get(String('verification')) + ' ' + `${emoji.verify}${configuration.description.text9}`
              + '\n> ' + db.statut.get(String('economie')) + ' ' + `${emoji.reward}${configuration.description.text10}`
              + '\n> ' + db.statut.get(String('suggestion')) + ' ' + `${emoji.pen}${configuration.description.text11}`
              + '\n> ' + db.statut.get(String('partenariat_mp')) + ' ' + `${emoji.link}${configuration.description.text12}`
              + '\n> ' + db.statut.get(String('sperso')) + ' ' + `${emoji.chanel}${configuration.description.text13}`
              + '\n> ' + db.statut.get(String('logs')) + ' ' + `${emoji.database}${configuration.description.text14}`
              + '\n> ' + db.statut.get(String('game')) + `${emoji.game}${configm.description.text67}`
              + '\n> ' + db.statut.get(String('pub')) + `${emoji.list}${configm.description.text73}`
              + '\n> ' + db.statut.get(String('report')) + `${emoji.warn}${configm.description.text95}`
              + '\n> ' + db.statut.get(String('invites')) + `${emoji.recycle}${configm.description.text98}`
            )

          interaction.message.edit({ embeds: ([embed]) })

          ///Send Embed\\\

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color_error}`)
            .setDescription(`${emoji.wrong}${general.response.desactivate_module}`)

          ///Send Embed\\\
          interaction.channel.send({
            embeds: ([embed]), ephemeral: true
          }).then(async (message_delete) => {

            await delay(Number(3) * 1000)
            message_delete.delete()

          })

          ///Debug Button\\\

          await interaction.deferUpdate()
        }
      }
    } else {

      ///Error perms dev\\\

      var embed = new EmbedBuilder()
        .setColor(`${config.color.color_error}`)
        .setDescription(`${emoji.wrong}${general.error.perms_dev}`)

      interaction.reply({ embeds: ([embed]), ephemeral: true })

    }

  };

  ///Partenariat MP\\\
  if (interaction.customId === "module_button_partenariat_mp") {
    if (interaction.user.id === dev) {
      if (db.module.has(String('partenariat_mp'))) {
        if (db.module.get(String('partenariat_mp')) === "off") {

          ///Mise à jour base de donnés\\\

          db.module.set(String('partenariat_mp'), 'on')
          db.statut.set(String('partenariat_mp'), '🔵')

          ///Update message embed\\\

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color}`)
            .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
            .setTitle(`${emoji.settings}${configuration.title.text1}`)
            .setDescription(`${emoji.captcha}${configuration.description.text1}` + ' '
              + '\n> ' + db.statut.get(String('utilitaire')) + ' ' + `${emoji.moderateur}${configuration.description.text2}`
              + '\n> ' + db.statut.get(String('moderation')) + ' ' + `${emoji.banned}${configuration.description.text3}`
              + '\n> ' + db.statut.get(String('level')) + ' ' + `${emoji.level}${configuration.description.text4}`
              + '\n> ' + db.statut.get(String('partenariat')) + ' ' + `${emoji.partner}${configuration.description.text5}`
              + '\n> ' + db.statut.get(String('ghostping')) + ' ' + `${emoji.ping}${configuration.description.text6}`
              + '\n> ' + db.statut.get(String('welcome')) + ' ' + `${emoji.welcome}${configuration.description.text7}`
              + '\n> ' + db.statut.get(String('embed')) + ' ' + `${emoji.file}${configuration.description.text8}`
              + '\n> ' + db.statut.get(String('verification')) + ' ' + `${emoji.verify}${configuration.description.text9}`
              + '\n> ' + db.statut.get(String('economie')) + ' ' + `${emoji.reward}${configuration.description.text10}`
              + '\n> ' + db.statut.get(String('suggestion')) + ' ' + `${emoji.pen}${configuration.description.text11}`
              + '\n> ' + db.statut.get(String('partenariat_mp')) + ' ' + `${emoji.link}${configuration.description.text12}`
              + '\n> ' + db.statut.get(String('sperso')) + ' ' + `${emoji.chanel}${configuration.description.text13}`
              + '\n> ' + db.statut.get(String('logs')) + ' ' + `${emoji.database}${configuration.description.text14}`
              + '\n> ' + db.statut.get(String('game')) + `${emoji.game}${configm.description.text67}`
              + '\n> ' + db.statut.get(String('pub')) + `${emoji.list}${configm.description.text73}`
              + '\n> ' + db.statut.get(String('report')) + `${emoji.warn}${configm.description.text95}`
              + '\n> ' + db.statut.get(String('invites')) + `${emoji.recycle}${configm.description.text98}`
            )

          interaction.message.edit({ embeds: ([embed]) })

          interaction.deferUpdate()

          ///Embed\\\

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color_good}`)
            .setDescription(`${emoji.tick}${general.response.activate_module}`)

          ///Send Embed\\\
          interaction.channel.send({
            embeds: ([embed]), ephemeral: true
          }).then(async (message_delete) => {

            await delay(Number(3) * 1000)
            message_delete.delete()

          })


        } else if (db.module.get(String('partenariat_mp')) === "on") {

          ///Base de donnés\\\

          db.module.set(String('partenariat_mp'), 'off')
          db.statut.set(String('partenariat_mp'), '🔴')


          ///Update message embed\\\

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color}`)
            .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
            .setTitle(`${emoji.settings}${configuration.title.text1}`)
            .setDescription(`${emoji.captcha}${configuration.description.text1}` + ' '
              + '\n> ' + db.statut.get(String('utilitaire')) + ' ' + `${emoji.moderateur}${configuration.description.text2}`
              + '\n> ' + db.statut.get(String('moderation')) + ' ' + `${emoji.banned}${configuration.description.text3}`
              + '\n> ' + db.statut.get(String('level')) + ' ' + `${emoji.level}${configuration.description.text4}`
              + '\n> ' + db.statut.get(String('partenariat')) + ' ' + `${emoji.partner}${configuration.description.text5}`
              + '\n> ' + db.statut.get(String('ghostping')) + ' ' + `${emoji.ping}${configuration.description.text6}`
              + '\n> ' + db.statut.get(String('welcome')) + ' ' + `${emoji.welcome}${configuration.description.text7}`
              + '\n> ' + db.statut.get(String('embed')) + ' ' + `${emoji.file}${configuration.description.text8}`
              + '\n> ' + db.statut.get(String('verification')) + ' ' + `${emoji.verify}${configuration.description.text9}`
              + '\n> ' + db.statut.get(String('economie')) + ' ' + `${emoji.reward}${configuration.description.text10}`
              + '\n> ' + db.statut.get(String('suggestion')) + ' ' + `${emoji.pen}${configuration.description.text11}`
              + '\n> ' + db.statut.get(String('partenariat_mp')) + ' ' + `${emoji.link}${configuration.description.text12}`
              + '\n> ' + db.statut.get(String('sperso')) + ' ' + `${emoji.chanel}${configuration.description.text13}`
              + '\n> ' + db.statut.get(String('logs')) + ' ' + `${emoji.database}${configuration.description.text14}`
              + '\n> ' + db.statut.get(String('game')) + `${emoji.game}${configm.description.text67}`
              + '\n> ' + db.statut.get(String('pub')) + `${emoji.list}${configm.description.text73}`
              + '\n> ' + db.statut.get(String('report')) + `${emoji.warn}${configm.description.text95}`
              + '\n> ' + db.statut.get(String('invites')) + `${emoji.recycle}${configm.description.text98}`
            )

          interaction.message.edit({ embeds: ([embed]) })

          interaction.deferUpdate()

          ///Send Embed\\\

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color_error}`)
            .setDescription(`${emoji.wrong}${general.response.desactivate_module}`)

          ///Send Embed\\\
          interaction.channel.send({
            embeds: ([embed]), ephemeral: true
          }).then(async (message_delete) => {

            await delay(Number(3) * 1000)
            message_delete.delete()

          })

        }
      }
    } else {

      ///Error perms dev\\\

      var embed = new EmbedBuilder()
        .setColor(`${config.color.color_error}`)
        .setDescription(`${emoji.wrong}${general.error.perms_dev}`)

      interaction.reply({ embeds: ([embed]), ephemeral: true })

    }

  };

  ///Suggestion\\\
  if (interaction.customId === "module_button_suggestion") {
    if (interaction.user.id === dev) {
      if (db.module.has(String('suggestion'))) {
        if (db.module.get(String('suggestion')) === "off") {

          ///Mise à jour base de donnés\\\

          db.module.set(String('suggestion'), 'on')
          db.statut.set(String('suggestion'), '🔵')

          ///Update message embed\\\

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color}`)
            .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
            .setTitle(`${emoji.settings}${configuration.title.text1}`)
            .setDescription(`${emoji.captcha}${configuration.description.text1}` + ' '
              + '\n> ' + db.statut.get(String('utilitaire')) + ' ' + `${emoji.moderateur}${configuration.description.text2}`
              + '\n> ' + db.statut.get(String('moderation')) + ' ' + `${emoji.banned}${configuration.description.text3}`
              + '\n> ' + db.statut.get(String('level')) + ' ' + `${emoji.level}${configuration.description.text4}`
              + '\n> ' + db.statut.get(String('partenariat')) + ' ' + `${emoji.partner}${configuration.description.text5}`
              + '\n> ' + db.statut.get(String('ghostping')) + ' ' + `${emoji.ping}${configuration.description.text6}`
              + '\n> ' + db.statut.get(String('welcome')) + ' ' + `${emoji.welcome}${configuration.description.text7}`
              + '\n> ' + db.statut.get(String('embed')) + ' ' + `${emoji.file}${configuration.description.text8}`
              + '\n> ' + db.statut.get(String('verification')) + ' ' + `${emoji.verify}${configuration.description.text9}`
              + '\n> ' + db.statut.get(String('economie')) + ' ' + `${emoji.reward}${configuration.description.text10}`
              + '\n> ' + db.statut.get(String('suggestion')) + ' ' + `${emoji.pen}${configuration.description.text11}`
              + '\n> ' + db.statut.get(String('partenariat_mp')) + ' ' + `${emoji.link}${configuration.description.text12}`
              + '\n> ' + db.statut.get(String('sperso')) + ' ' + `${emoji.chanel}${configuration.description.text13}`
              + '\n> ' + db.statut.get(String('logs')) + ' ' + `${emoji.database}${configuration.description.text14}`
              + '\n> ' + db.statut.get(String('game')) + `${emoji.game}${configm.description.text67}`
              + '\n> ' + db.statut.get(String('pub')) + `${emoji.list}${configm.description.text73}`
              + '\n> ' + db.statut.get(String('report')) + `${emoji.warn}${configm.description.text95}`
              + '\n> ' + db.statut.get(String('invites')) + `${emoji.recycle}${configm.description.text98}`
            )

          interaction.message.edit({ embeds: ([embed]) })

          ///Embed\\\

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color_good}`)
            .setDescription(`${emoji.tick}${general.response.activate_module}`)

          ///Send Embed\\\
          interaction.channel.send({
            embeds: ([embed]), ephemeral: true
          }).then(async (message_delete) => {

            await delay(Number(3) * 1000)
            message_delete.delete()

          })

          ///Debug button\\\

          await interaction.deferUpdate()

        } else if (db.module.get(String('suggestion')) === "on") {

          ///Base de donnés\\\

          db.module.set(String('suggestion'), 'off')
          db.statut.set(String('suggestion'), '🔴')

          ///Update message embed\\\

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color}`)
            .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
            .setTitle(`${emoji.settings}${configuration.title.text1}`)
            .setDescription(`${emoji.captcha}${configuration.description.text1}` + ' '
              + '\n> ' + db.statut.get(String('utilitaire')) + ' ' + `${emoji.moderateur}${configuration.description.text2}`
              + '\n> ' + db.statut.get(String('moderation')) + ' ' + `${emoji.banned}${configuration.description.text3}`
              + '\n> ' + db.statut.get(String('level')) + ' ' + `${emoji.level}${configuration.description.text4}`
              + '\n> ' + db.statut.get(String('partenariat')) + ' ' + `${emoji.partner}${configuration.description.text5}`
              + '\n> ' + db.statut.get(String('ghostping')) + ' ' + `${emoji.ping}${configuration.description.text6}`
              + '\n> ' + db.statut.get(String('welcome')) + ' ' + `${emoji.welcome}${configuration.description.text7}`
              + '\n> ' + db.statut.get(String('embed')) + ' ' + `${emoji.file}${configuration.description.text8}`
              + '\n> ' + db.statut.get(String('verification')) + ' ' + `${emoji.verify}${configuration.description.text9}`
              + '\n> ' + db.statut.get(String('economie')) + ' ' + `${emoji.reward}${configuration.description.text10}`
              + '\n> ' + db.statut.get(String('suggestion')) + ' ' + `${emoji.pen}${configuration.description.text11}`
              + '\n> ' + db.statut.get(String('partenariat_mp')) + ' ' + `${emoji.link}${configuration.description.text12}`
              + '\n> ' + db.statut.get(String('sperso')) + ' ' + `${emoji.chanel}${configuration.description.text13}`
              + '\n> ' + db.statut.get(String('logs')) + ' ' + `${emoji.database}${configuration.description.text14}`
              + '\n> ' + db.statut.get(String('game')) + `${emoji.game}${configm.description.text67}`
              + '\n> ' + db.statut.get(String('pub')) + `${emoji.list}${configm.description.text73}`
              + '\n> ' + db.statut.get(String('report')) + `${emoji.warn}${configm.description.text95}`
              + '\n> ' + db.statut.get(String('invites')) + `${emoji.recycle}${configm.description.text98}`
            )

          interaction.message.edit({ embeds: ([embed]) })

          ///Send Embed\\\

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color_error}`)
            .setDescription(`${emoji.wrong}${general.response.desactivate_module}`)

          ///Send Embed\\\
          interaction.channel.send({
            embeds: ([embed]), ephemeral: true
          }).then(async (message_delete) => {

            await delay(Number(3) * 1000)
            message_delete.delete()

          })

          ///Debug Button\\\

          await interaction.deferUpdate()
        }
      }
    } else {

      ///Error perms dev\\\

      var embed = new EmbedBuilder()
        .setColor(`${config.color.color_error}`)
        .setDescription(`${emoji.wrong}${general.error.perms_dev}`)

      interaction.reply({ embeds: ([embed]), ephemeral: true })

    }

  };

  ///Economie\\\
  if (interaction.customId === "module_button_economie") {
    if (interaction.user.id === dev) {
      if (db.module.has(String('economie'))) {
        if (db.module.get(String('economie')) === "off") {

          ///Mise à jour base de donnés\\\

          db.module.set(String('economie'), 'on')
          db.statut.set(String('economie'), '🔵')

          ///Update message embed\\\

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color}`)
            .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
            .setTitle(`${emoji.settings}${configuration.title.text1}`)
            .setDescription(`${emoji.captcha}${configuration.description.text1}` + ' '
              + '\n> ' + db.statut.get(String('utilitaire')) + ' ' + `${emoji.moderateur}${configuration.description.text2}`
              + '\n> ' + db.statut.get(String('moderation')) + ' ' + `${emoji.banned}${configuration.description.text3}`
              + '\n> ' + db.statut.get(String('level')) + ' ' + `${emoji.level}${configuration.description.text4}`
              + '\n> ' + db.statut.get(String('partenariat')) + ' ' + `${emoji.partner}${configuration.description.text5}`
              + '\n> ' + db.statut.get(String('ghostping')) + ' ' + `${emoji.ping}${configuration.description.text6}`
              + '\n> ' + db.statut.get(String('welcome')) + ' ' + `${emoji.welcome}${configuration.description.text7}`
              + '\n> ' + db.statut.get(String('embed')) + ' ' + `${emoji.file}${configuration.description.text8}`
              + '\n> ' + db.statut.get(String('verification')) + ' ' + `${emoji.verify}${configuration.description.text9}`
              + '\n> ' + db.statut.get(String('economie')) + ' ' + `${emoji.reward}${configuration.description.text10}`
              + '\n> ' + db.statut.get(String('suggestion')) + ' ' + `${emoji.pen}${configuration.description.text11}`
              + '\n> ' + db.statut.get(String('partenariat_mp')) + ' ' + `${emoji.link}${configuration.description.text12}`
              + '\n> ' + db.statut.get(String('sperso')) + ' ' + `${emoji.chanel}${configuration.description.text13}`
              + '\n> ' + db.statut.get(String('logs')) + ' ' + `${emoji.database}${configuration.description.text14}`
              + '\n> ' + db.statut.get(String('game')) + `${emoji.game}${configm.description.text67}`
              + '\n> ' + db.statut.get(String('pub')) + `${emoji.list}${configm.description.text73}`
              + '\n> ' + db.statut.get(String('report')) + `${emoji.warn}${configm.description.text95}`
              + '\n> ' + db.statut.get(String('invites')) + `${emoji.recycle}${configm.description.text98}`
            )

          interaction.message.edit({ embeds: ([embed]) })

          ///Embed\\\

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color_good}`)
            .setDescription(`${emoji.tick}${general.response.activate_module}`)

          ///Send Embed\\\
          interaction.channel.send({
            embeds: ([embed]), ephemeral: true
          }).then(async (message_delete) => {

            await delay(Number(3) * 1000)
            message_delete.delete()

          })

          ///Debug button\\\

          await interaction.deferUpdate()

        } else if (db.module.get(String('economie')) === "on") {

          ///Base de donnés\\\

          db.module.set(String('economie'), 'off')
          db.statut.set(String('economie'), '🔴')

          ///Update message embed\\\

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color}`)
            .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
            .setTitle(`${emoji.settings}${configuration.title.text1}`)
            .setDescription(`${emoji.captcha}${configuration.description.text1}` + ' '
              + '\n> ' + db.statut.get(String('utilitaire')) + ' ' + `${emoji.moderateur}${configuration.description.text2}`
              + '\n> ' + db.statut.get(String('moderation')) + ' ' + `${emoji.banned}${configuration.description.text3}`
              + '\n> ' + db.statut.get(String('level')) + ' ' + `${emoji.level}${configuration.description.text4}`
              + '\n> ' + db.statut.get(String('partenariat')) + ' ' + `${emoji.partner}${configuration.description.text5}`
              + '\n> ' + db.statut.get(String('ghostping')) + ' ' + `${emoji.ping}${configuration.description.text6}`
              + '\n> ' + db.statut.get(String('welcome')) + ' ' + `${emoji.welcome}${configuration.description.text7}`
              + '\n> ' + db.statut.get(String('embed')) + ' ' + `${emoji.file}${configuration.description.text8}`
              + '\n> ' + db.statut.get(String('verification')) + ' ' + `${emoji.verify}${configuration.description.text9}`
              + '\n> ' + db.statut.get(String('economie')) + ' ' + `${emoji.reward}${configuration.description.text10}`
              + '\n> ' + db.statut.get(String('suggestion')) + ' ' + `${emoji.pen}${configuration.description.text11}`
              + '\n> ' + db.statut.get(String('partenariat_mp')) + ' ' + `${emoji.link}${configuration.description.text12}`
              + '\n> ' + db.statut.get(String('sperso')) + ' ' + `${emoji.chanel}${configuration.description.text13}`
              + '\n> ' + db.statut.get(String('logs')) + ' ' + `${emoji.database}${configuration.description.text14}`
              + '\n> ' + db.statut.get(String('game')) + `${emoji.game}${configm.description.text67}`
              + '\n> ' + db.statut.get(String('pub')) + `${emoji.list}${configm.description.text73}`
              + '\n> ' + db.statut.get(String('report')) + `${emoji.warn}${configm.description.text95}`
              + '\n> ' + db.statut.get(String('invites')) + `${emoji.recycle}${configm.description.text98}`
            )

          interaction.message.edit({ embeds: ([embed]) })

          ///Send Embed\\\

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color_error}`)
            .setDescription(`${emoji.wrong}${general.response.desactivate_module}`)

          ///Send Embed\\\
          interaction.channel.send({
            embeds: ([embed]), ephemeral: true
          }).then(async (message_delete) => {

            await delay(Number(3) * 1000)
            message_delete.delete()

          })

          ///Debug Button\\\

          await interaction.deferUpdate()
        }
      }
    } else {

      ///Error perms dev\\\

      var embed = new EmbedBuilder()
        .setColor(`${config.color.color_error}`)
        .setDescription(`${emoji.wrong}${general.error.perms_dev}`)

      interaction.reply({ embeds: ([embed]), ephemeral: true })

    }

  };

  if (interaction.customId === "module_button_pub") {
    if (interaction.user.id === dev) {
      if (db.module.has(String('pub'))) {
        if (db.module.get(String('pub')) === "off") {

          ///Mise à jour base de donnés\\\

          db.module.set(String('pub'), 'on')
          db.statut.set(String('pub'), '🔵')

          ///Update message embed\\\

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color}`)
            .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
            .setTitle(`${emoji.settings}${configuration.title.text1}`)
            .setDescription(`${emoji.captcha}${configuration.description.text1}` + ' '
              + '\n> ' + db.statut.get(String('utilitaire')) + ' ' + `${emoji.moderateur}${configuration.description.text2}`
              + '\n> ' + db.statut.get(String('moderation')) + ' ' + `${emoji.banned}${configuration.description.text3}`
              + '\n> ' + db.statut.get(String('level')) + ' ' + `${emoji.level}${configuration.description.text4}`
              + '\n> ' + db.statut.get(String('partenariat')) + ' ' + `${emoji.partner}${configuration.description.text5}`
              + '\n> ' + db.statut.get(String('ghostping')) + ' ' + `${emoji.ping}${configuration.description.text6}`
              + '\n> ' + db.statut.get(String('welcome')) + ' ' + `${emoji.welcome}${configuration.description.text7}`
              + '\n> ' + db.statut.get(String('embed')) + ' ' + `${emoji.file}${configuration.description.text8}`
              + '\n> ' + db.statut.get(String('verification')) + ' ' + `${emoji.verify}${configuration.description.text9}`
              + '\n> ' + db.statut.get(String('economie')) + ' ' + `${emoji.reward}${configuration.description.text10}`
              + '\n> ' + db.statut.get(String('suggestion')) + ' ' + `${emoji.pen}${configuration.description.text11}`
              + '\n> ' + db.statut.get(String('partenariat_mp')) + ' ' + `${emoji.link}${configuration.description.text12}`
              + '\n> ' + db.statut.get(String('sperso')) + ' ' + `${emoji.chanel}${configuration.description.text13}`
              + '\n> ' + db.statut.get(String('logs')) + ' ' + `${emoji.database}${configuration.description.text14}`
              + '\n> ' + db.statut.get(String('game')) + `${emoji.game}${configm.description.text67}`
              + '\n> ' + db.statut.get(String('pub')) + `${emoji.list}${configm.description.text73}`
              + '\n> ' + db.statut.get(String('report')) + `${emoji.warn}${configm.description.text95}`
              + '\n> ' + db.statut.get(String('invites')) + `${emoji.recycle}${configm.description.text98}`
            )

          interaction.message.edit({ embeds: ([embed]) })

          ///Embed\\\

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color_good}`)
            .setDescription(`${emoji.tick}${general.response.activate_module}`)

          ///Send Embed\\\
          interaction.channel.send({
            embeds: ([embed]), ephemeral: true
          }).then(async (message_delete) => {

            await delay(Number(3) * 1000)
            message_delete.delete()

          })

          ///Debug button\\\

          await interaction.deferUpdate()

        } else if (db.module.get(String('pub')) === "on") {

          ///Base de donnés\\\

          db.module.set(String('pub'), 'off')
          db.statut.set(String('pub'), '🔴')

          ///Update message embed\\\

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color}`)
            .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
            .setTitle(`${emoji.settings}${configuration.title.text1}`)
            .setDescription(`${emoji.captcha}${configuration.description.text1}` + ' '
              + '\n> ' + db.statut.get(String('utilitaire')) + ' ' + `${emoji.moderateur}${configuration.description.text2}`
              + '\n> ' + db.statut.get(String('moderation')) + ' ' + `${emoji.banned}${configuration.description.text3}`
              + '\n> ' + db.statut.get(String('level')) + ' ' + `${emoji.level}${configuration.description.text4}`
              + '\n> ' + db.statut.get(String('partenariat')) + ' ' + `${emoji.partner}${configuration.description.text5}`
              + '\n> ' + db.statut.get(String('ghostping')) + ' ' + `${emoji.ping}${configuration.description.text6}`
              + '\n> ' + db.statut.get(String('welcome')) + ' ' + `${emoji.welcome}${configuration.description.text7}`
              + '\n> ' + db.statut.get(String('embed')) + ' ' + `${emoji.file}${configuration.description.text8}`
              + '\n> ' + db.statut.get(String('verification')) + ' ' + `${emoji.verify}${configuration.description.text9}`
              + '\n> ' + db.statut.get(String('economie')) + ' ' + `${emoji.reward}${configuration.description.text10}`
              + '\n> ' + db.statut.get(String('suggestion')) + ' ' + `${emoji.pen}${configuration.description.text11}`
              + '\n> ' + db.statut.get(String('partenariat_mp')) + ' ' + `${emoji.link}${configuration.description.text12}`
              + '\n> ' + db.statut.get(String('sperso')) + ' ' + `${emoji.chanel}${configuration.description.text13}`
              + '\n> ' + db.statut.get(String('logs')) + ' ' + `${emoji.database}${configuration.description.text14}`
              + '\n> ' + db.statut.get(String('game')) + `${emoji.game}${configm.description.text67}`
              + '\n> ' + db.statut.get(String('pub')) + `${emoji.list}${configm.description.text73}`
              + '\n> ' + db.statut.get(String('report')) + `${emoji.warn}${configm.description.text95}`
              + '\n> ' + db.statut.get(String('invites')) + `${emoji.recycle}${configm.description.text98}`
            )

          interaction.message.edit({ embeds: ([embed]) })

          ///Send Embed\\\

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color_error}`)
            .setDescription(`${emoji.wrong}${general.response.desactivate_module}`)

          ///Send Embed\\\
          interaction.channel.send({
            embeds: ([embed]), ephemeral: true
          }).then(async (message_delete) => {

            await delay(Number(3) * 1000)
            message_delete.delete()

          })

          ///Debug Button\\\

          await interaction.deferUpdate()
        }
      }
    } else {

      ///Error perms dev\\\

      var embed = new EmbedBuilder()
        .setColor(`${config.color.color_error}`)
        .setDescription(`${emoji.wrong}${general.error.perms_dev}`)

      interaction.reply({ embeds: ([embed]), ephemeral: true })

    }

  };

  ///Vérification\\\
  if (interaction.customId === "module_button_verification") {
    if (interaction.user.id === dev) {
      if (db.module.has(String('verification'))) {
        if (db.module.get(String('verification')) === "off") {

          ///Mise à jour base de donnés\\\

          db.module.set(String('verification'), 'on')
          db.statut.set(String('verification'), '🔵')

          ///Update message embed\\\

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color}`)
            .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
            .setTitle(`${emoji.settings}${configuration.title.text1}`)
            .setDescription(`${emoji.captcha}${configuration.description.text1}` + ' '
              + '\n> ' + db.statut.get(String('utilitaire')) + ' ' + `${emoji.moderateur}${configuration.description.text2}`
              + '\n> ' + db.statut.get(String('moderation')) + ' ' + `${emoji.banned}${configuration.description.text3}`
              + '\n> ' + db.statut.get(String('level')) + ' ' + `${emoji.level}${configuration.description.text4}`
              + '\n> ' + db.statut.get(String('partenariat')) + ' ' + `${emoji.partner}${configuration.description.text5}`
              + '\n> ' + db.statut.get(String('ghostping')) + ' ' + `${emoji.ping}${configuration.description.text6}`
              + '\n> ' + db.statut.get(String('welcome')) + ' ' + `${emoji.welcome}${configuration.description.text7}`
              + '\n> ' + db.statut.get(String('embed')) + ' ' + `${emoji.file}${configuration.description.text8}`
              + '\n> ' + db.statut.get(String('verification')) + ' ' + `${emoji.verify}${configuration.description.text9}`
              + '\n> ' + db.statut.get(String('economie')) + ' ' + `${emoji.reward}${configuration.description.text10}`
              + '\n> ' + db.statut.get(String('suggestion')) + ' ' + `${emoji.pen}${configuration.description.text11}`
              + '\n> ' + db.statut.get(String('partenariat_mp')) + ' ' + `${emoji.link}${configuration.description.text12}`
              + '\n> ' + db.statut.get(String('sperso')) + ' ' + `${emoji.chanel}${configuration.description.text13}`
              + '\n> ' + db.statut.get(String('logs')) + ' ' + `${emoji.database}${configuration.description.text14}`
              + '\n> ' + db.statut.get(String('game')) + `${emoji.game}${configm.description.text67}`
              + '\n> ' + db.statut.get(String('pub')) + `${emoji.list}${configm.description.text73}`
              + '\n> ' + db.statut.get(String('report')) + `${emoji.warn}${configm.description.text95}`
              + '\n> ' + db.statut.get(String('invites')) + `${emoji.recycle}${configm.description.text98}`
            )

          interaction.message.edit({ embeds: ([embed]) })

          ///Embed\\\

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color_good}`)
            .setDescription(`${emoji.tick}${general.response.activate_module}`)

          ///Send Embed\\\
          interaction.channel.send({
            embeds: ([embed]), ephemeral: true
          }).then(async (message_delete) => {

            await delay(Number(3) * 1000)
            message_delete.delete()

          })

          ///Debug button\\\

          await interaction.deferUpdate()

        } else if (db.module.get(String('verification')) === "on") {

          ///Base de donnés\\\

          db.module.set(String('verification'), 'off')
          db.statut.set(String('verification'), '🔴')

          ///Update message embed\\\

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color}`)
            .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
            .setTitle(`${emoji.settings}${configuration.title.text1}`)
            .setDescription(`${emoji.captcha}${configuration.description.text1}` + ' '
              + '\n> ' + db.statut.get(String('utilitaire')) + ' ' + `${emoji.moderateur}${configuration.description.text2}`
              + '\n> ' + db.statut.get(String('moderation')) + ' ' + `${emoji.banned}${configuration.description.text3}`
              + '\n> ' + db.statut.get(String('level')) + ' ' + `${emoji.level}${configuration.description.text4}`
              + '\n> ' + db.statut.get(String('partenariat')) + ' ' + `${emoji.partner}${configuration.description.text5}`
              + '\n> ' + db.statut.get(String('ghostping')) + ' ' + `${emoji.ping}${configuration.description.text6}`
              + '\n> ' + db.statut.get(String('welcome')) + ' ' + `${emoji.welcome}${configuration.description.text7}`
              + '\n> ' + db.statut.get(String('embed')) + ' ' + `${emoji.file}${configuration.description.text8}`
              + '\n> ' + db.statut.get(String('verification')) + ' ' + `${emoji.verify}${configuration.description.text9}`
              + '\n> ' + db.statut.get(String('economie')) + ' ' + `${emoji.reward}${configuration.description.text10}`
              + '\n> ' + db.statut.get(String('suggestion')) + ' ' + `${emoji.pen}${configuration.description.text11}`
              + '\n> ' + db.statut.get(String('partenariat_mp')) + ' ' + `${emoji.link}${configuration.description.text12}`
              + '\n> ' + db.statut.get(String('sperso')) + ' ' + `${emoji.chanel}${configuration.description.text13}`
              + '\n> ' + db.statut.get(String('logs')) + ' ' + `${emoji.database}${configuration.description.text14}`
              + '\n> ' + db.statut.get(String('game')) + `${emoji.game}${configm.description.text67}`
              + '\n> ' + db.statut.get(String('pub')) + `${emoji.list}${configm.description.text73}`
              + '\n> ' + db.statut.get(String('report')) + `${emoji.warn}${configm.description.text95}`
              + '\n> ' + db.statut.get(String('invites')) + `${emoji.recycle}${configm.description.text98}`
            )

          interaction.message.edit({ embeds: ([embed]) })

          ///Send Embed\\\

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color_error}`)
            .setDescription(`${emoji.wrong}${general.response.desactivate_module}`)

          ///Send Embed\\\
          interaction.channel.send({
            embeds: ([embed]), ephemeral: true
          }).then(async (message_delete) => {

            await delay(Number(3) * 1000)
            message_delete.delete()

          })

          ///Debug Button\\\

          await interaction.deferUpdate()
        }
      }
    } else {

      ///Error perms dev\\\

      var embed = new EmbedBuilder()
        .setColor(`${config.color.color_error}`)
        .setDescription(`${emoji.wrong}${general.error.perms_dev}`)

      interaction.reply({ embeds: ([embed]), ephemeral: true })

    }

  };

  ///Embed\\\
  if (interaction.customId === "module_button_embed") {
    if (interaction.user.id === dev) {
      if (db.module.has(String('embed'))) {
        if (db.module.get(String('embed')) === "off") {

          ///Mise à jour base de donnés\\\

          db.module.set(String('embed'), 'on')
          db.statut.set(String('embed'), '🔵')

          ///Update message embed\\\

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color}`)
            .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
            .setTitle(`${emoji.settings}${configuration.title.text1}`)
            .setDescription(`${emoji.captcha}${configuration.description.text1}` + ' '
              + '\n> ' + db.statut.get(String('utilitaire')) + ' ' + `${emoji.moderateur}${configuration.description.text2}`
              + '\n> ' + db.statut.get(String('moderation')) + ' ' + `${emoji.banned}${configuration.description.text3}`
              + '\n> ' + db.statut.get(String('level')) + ' ' + `${emoji.level}${configuration.description.text4}`
              + '\n> ' + db.statut.get(String('partenariat')) + ' ' + `${emoji.partner}${configuration.description.text5}`
              + '\n> ' + db.statut.get(String('ghostping')) + ' ' + `${emoji.ping}${configuration.description.text6}`
              + '\n> ' + db.statut.get(String('welcome')) + ' ' + `${emoji.welcome}${configuration.description.text7}`
              + '\n> ' + db.statut.get(String('embed')) + ' ' + `${emoji.file}${configuration.description.text8}`
              + '\n> ' + db.statut.get(String('verification')) + ' ' + `${emoji.verify}${configuration.description.text9}`
              + '\n> ' + db.statut.get(String('economie')) + ' ' + `${emoji.reward}${configuration.description.text10}`
              + '\n> ' + db.statut.get(String('suggestion')) + ' ' + `${emoji.pen}${configuration.description.text11}`
              + '\n> ' + db.statut.get(String('partenariat_mp')) + ' ' + `${emoji.link}${configuration.description.text12}`
              + '\n> ' + db.statut.get(String('sperso')) + ' ' + `${emoji.chanel}${configuration.description.text13}`
              + '\n> ' + db.statut.get(String('logs')) + ' ' + `${emoji.database}${configuration.description.text14}`
              + '\n> ' + db.statut.get(String('game')) + `${emoji.game}${configm.description.text67}`
              + '\n> ' + db.statut.get(String('pub')) + `${emoji.list}${configm.description.text73}`
              + '\n> ' + db.statut.get(String('report')) + `${emoji.warn}${configm.description.text95}`
              + '\n> ' + db.statut.get(String('invites')) + `${emoji.recycle}${configm.description.text98}`
            )

          interaction.message.edit({ embeds: ([embed]) })

          ///Embed\\\

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color_good}`)
            .setDescription(`${emoji.tick}${general.response.activate_module}`)

          ///Send Embed\\\
          interaction.channel.send({
            embeds: ([embed]), ephemeral: true
          }).then(async (message_delete) => {

            await delay(Number(3) * 1000)
            message_delete.delete()

          })

          ///Debug button\\\

          await interaction.deferUpdate()

        } else if (db.module.get(String('embed')) === "on") {

          ///Base de donnés\\\

          db.module.set(String('embed'), 'off')
          db.statut.set(String('embed'), '🔴')

          ///Update message embed\\\

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color}`)
            .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
            .setTitle(`${emoji.settings}${configuration.title.text1}`)
            .setDescription(`${emoji.captcha}${configuration.description.text1}` + ' '
              + '\n> ' + db.statut.get(String('utilitaire')) + ' ' + `${emoji.moderateur}${configuration.description.text2}`
              + '\n> ' + db.statut.get(String('moderation')) + ' ' + `${emoji.banned}${configuration.description.text3}`
              + '\n> ' + db.statut.get(String('level')) + ' ' + `${emoji.level}${configuration.description.text4}`
              + '\n> ' + db.statut.get(String('partenariat')) + ' ' + `${emoji.partner}${configuration.description.text5}`
              + '\n> ' + db.statut.get(String('ghostping')) + ' ' + `${emoji.ping}${configuration.description.text6}`
              + '\n> ' + db.statut.get(String('welcome')) + ' ' + `${emoji.welcome}${configuration.description.text7}`
              + '\n> ' + db.statut.get(String('embed')) + ' ' + `${emoji.file}${configuration.description.text8}`
              + '\n> ' + db.statut.get(String('verification')) + ' ' + `${emoji.verify}${configuration.description.text9}`
              + '\n> ' + db.statut.get(String('economie')) + ' ' + `${emoji.reward}${configuration.description.text10}`
              + '\n> ' + db.statut.get(String('suggestion')) + ' ' + `${emoji.pen}${configuration.description.text11}`
              + '\n> ' + db.statut.get(String('partenariat_mp')) + ' ' + `${emoji.link}${configuration.description.text12}`
              + '\n> ' + db.statut.get(String('sperso')) + ' ' + `${emoji.chanel}${configuration.description.text13}`
              + '\n> ' + db.statut.get(String('logs')) + ' ' + `${emoji.database}${configuration.description.text14}`
              + '\n> ' + db.statut.get(String('game')) + `${emoji.game}${configm.description.text67}`
              + '\n> ' + db.statut.get(String('pub')) + `${emoji.list}${configm.description.text73}`
              + '\n> ' + db.statut.get(String('report')) + `${emoji.warn}${configm.description.text95}`
              + '\n> ' + db.statut.get(String('invites')) + `${emoji.recycle}${configm.description.text98}`
            )

          interaction.message.edit({ embeds: ([embed]) })

          ///Send Embed\\\

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color_error}`)
            .setDescription(`${emoji.wrong}${general.response.desactivate_module}`)

          ///Send Embed\\\
          interaction.channel.send({
            embeds: ([embed]), ephemeral: true
          }).then(async (message_delete) => {

            await delay(Number(3) * 1000)
            message_delete.delete()

          })

          ///Debug Button\\\

          await interaction.deferUpdate()
        }
      }
    } else {

      ///Error perms dev\\\

      var embed = new EmbedBuilder()
        .setColor(`${config.color.color_error}`)
        .setDescription(`${emoji.wrong}${general.error.perms_dev}`)

      interaction.reply({ embeds: ([embed]), ephemeral: true })

    }

  };

  ///Welcome\\\
  if (interaction.customId === "module_button_welcome") {
    if (interaction.user.id === dev) {
      if (db.module.has(String('welcome'))) {
        if (db.module.get(String('welcome')) === "off") {

          ///Mise à jour base de donnés\\\

          db.module.set(String('welcome'), 'on')
          db.statut.set(String('welcome'), '🔵')

          ///Update message embed\\\

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color}`)
            .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
            .setTitle(`${emoji.settings}${configuration.title.text1}`)
            .setDescription(`${emoji.captcha}${configuration.description.text1}` + ' '
              + '\n> ' + db.statut.get(String('utilitaire')) + ' ' + `${emoji.moderateur}${configuration.description.text2}`
              + '\n> ' + db.statut.get(String('moderation')) + ' ' + `${emoji.banned}${configuration.description.text3}`
              + '\n> ' + db.statut.get(String('level')) + ' ' + `${emoji.level}${configuration.description.text4}`
              + '\n> ' + db.statut.get(String('partenariat')) + ' ' + `${emoji.partner}${configuration.description.text5}`
              + '\n> ' + db.statut.get(String('ghostping')) + ' ' + `${emoji.ping}${configuration.description.text6}`
              + '\n> ' + db.statut.get(String('welcome')) + ' ' + `${emoji.welcome}${configuration.description.text7}`
              + '\n> ' + db.statut.get(String('embed')) + ' ' + `${emoji.file}${configuration.description.text8}`
              + '\n> ' + db.statut.get(String('verification')) + ' ' + `${emoji.verify}${configuration.description.text9}`
              + '\n> ' + db.statut.get(String('economie')) + ' ' + `${emoji.reward}${configuration.description.text10}`
              + '\n> ' + db.statut.get(String('suggestion')) + ' ' + `${emoji.pen}${configuration.description.text11}`
              + '\n> ' + db.statut.get(String('partenariat_mp')) + ' ' + `${emoji.link}${configuration.description.text12}`
              + '\n> ' + db.statut.get(String('sperso')) + ' ' + `${emoji.chanel}${configuration.description.text13}`
              + '\n> ' + db.statut.get(String('logs')) + ' ' + `${emoji.database}${configuration.description.text14}`
              + '\n> ' + db.statut.get(String('game')) + `${emoji.game}${configm.description.text67}`
              + '\n> ' + db.statut.get(String('pub')) + `${emoji.list}${configm.description.text73}`
              + '\n> ' + db.statut.get(String('report')) + `${emoji.warn}${configm.description.text95}`
              + '\n> ' + db.statut.get(String('invites')) + `${emoji.recycle}${configm.description.text98}`
            )

          interaction.message.edit({ embeds: ([embed]) })

          ///Embed\\\

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color_good}`)
            .setDescription(`${emoji.tick}${general.response.activate_module}`)

          ///Send Embed\\\
          interaction.channel.send({
            embeds: ([embed]), ephemeral: true
          }).then(async (message_delete) => {

            await delay(Number(3) * 1000)
            message_delete.delete()

          })

          ///Debug button\\\

          await interaction.deferUpdate()

        } else if (db.module.get(String('welcome')) === "on") {

          ///Base de donnés\\\

          db.module.set(String('welcome'), 'off')
          db.statut.set(String('welcome'), '🔴')

          ///Update message embed\\\

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color}`)
            .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
            .setTitle(`${emoji.settings}${configuration.title.text1}`)
            .setDescription(`${emoji.captcha}${configuration.description.text1}` + ' '
              + '\n> ' + db.statut.get(String('utilitaire')) + ' ' + `${emoji.moderateur}${configuration.description.text2}`
              + '\n> ' + db.statut.get(String('moderation')) + ' ' + `${emoji.banned}${configuration.description.text3}`
              + '\n> ' + db.statut.get(String('level')) + ' ' + `${emoji.level}${configuration.description.text4}`
              + '\n> ' + db.statut.get(String('partenariat')) + ' ' + `${emoji.partner}${configuration.description.text5}`
              + '\n> ' + db.statut.get(String('ghostping')) + ' ' + `${emoji.ping}${configuration.description.text6}`
              + '\n> ' + db.statut.get(String('welcome')) + ' ' + `${emoji.welcome}${configuration.description.text7}`
              + '\n> ' + db.statut.get(String('embed')) + ' ' + `${emoji.file}${configuration.description.text8}`
              + '\n> ' + db.statut.get(String('verification')) + ' ' + `${emoji.verify}${configuration.description.text9}`
              + '\n> ' + db.statut.get(String('economie')) + ' ' + `${emoji.reward}${configuration.description.text10}`
              + '\n> ' + db.statut.get(String('suggestion')) + ' ' + `${emoji.pen}${configuration.description.text11}`
              + '\n> ' + db.statut.get(String('partenariat_mp')) + ' ' + `${emoji.link}${configuration.description.text12}`
              + '\n> ' + db.statut.get(String('sperso')) + ' ' + `${emoji.chanel}${configuration.description.text13}`
              + '\n> ' + db.statut.get(String('logs')) + ' ' + `${emoji.database}${configuration.description.text14}`
              + '\n> ' + db.statut.get(String('game')) + `${emoji.game}${configm.description.text67}`
              + '\n> ' + db.statut.get(String('pub')) + `${emoji.list}${configm.description.text73}`
              + '\n> ' + db.statut.get(String('report')) + `${emoji.warn}${configm.description.text95}`
              + '\n> ' + db.statut.get(String('invites')) + `${emoji.recycle}${configm.description.text98}`
            )

          interaction.message.edit({ embeds: ([embed]) })

          ///Send Embed\\\

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color_error}`)
            .setDescription(`${emoji.wrong}${general.response.desactivate_module}`)

          ///Send Embed\\\
          interaction.channel.send({
            embeds: ([embed]), ephemeral: true
          }).then(async (message_delete) => {

            await delay(Number(3) * 1000)
            message_delete.delete()

          })

          ///Debug Button\\\

          await interaction.deferUpdate()
        }
      }
    } else {

      ///Error perms dev\\\

      var embed = new EmbedBuilder()
        .setColor(`${config.color.color_error}`)
        .setDescription(`${emoji.wrong}${general.error.perms_dev}`)

      interaction.reply({ embeds: ([embed]), ephemeral: true })

    }

  };

  ///Ghostping\\\
  if (interaction.customId === "module_button_ghostping") {
    if (interaction.user.id === dev) {
      if (db.module.has(String('ghostping'))) {
        if (db.module.get(String('ghostping')) === "off") {

          ///Mise à jour base de donnés\\\

          db.module.set(String('ghostping'), 'on')
          db.statut.set(String('ghostping'), '🔵')

          ///Update message embed\\\

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color}`)
            .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
            .setTitle(`${emoji.settings}${configuration.title.text1}`)
            .setDescription(`${emoji.captcha}${configuration.description.text1}` + ' '
              + '\n> ' + db.statut.get(String('utilitaire')) + ' ' + `${emoji.moderateur}${configuration.description.text2}`
              + '\n> ' + db.statut.get(String('moderation')) + ' ' + `${emoji.banned}${configuration.description.text3}`
              + '\n> ' + db.statut.get(String('level')) + ' ' + `${emoji.level}${configuration.description.text4}`
              + '\n> ' + db.statut.get(String('partenariat')) + ' ' + `${emoji.partner}${configuration.description.text5}`
              + '\n> ' + db.statut.get(String('ghostping')) + ' ' + `${emoji.ping}${configuration.description.text6}`
              + '\n> ' + db.statut.get(String('welcome')) + ' ' + `${emoji.welcome}${configuration.description.text7}`
              + '\n> ' + db.statut.get(String('embed')) + ' ' + `${emoji.file}${configuration.description.text8}`
              + '\n> ' + db.statut.get(String('verification')) + ' ' + `${emoji.verify}${configuration.description.text9}`
              + '\n> ' + db.statut.get(String('economie')) + ' ' + `${emoji.reward}${configuration.description.text10}`
              + '\n> ' + db.statut.get(String('suggestion')) + ' ' + `${emoji.pen}${configuration.description.text11}`
              + '\n> ' + db.statut.get(String('partenariat_mp')) + ' ' + `${emoji.link}${configuration.description.text12}`
              + '\n> ' + db.statut.get(String('sperso')) + ' ' + `${emoji.chanel}${configuration.description.text13}`
              + '\n> ' + db.statut.get(String('logs')) + ' ' + `${emoji.database}${configuration.description.text14}`
              + '\n> ' + db.statut.get(String('game')) + `${emoji.game}${configm.description.text67}`
              + '\n> ' + db.statut.get(String('pub')) + `${emoji.list}${configm.description.text73}`
              + '\n> ' + db.statut.get(String('report')) + `${emoji.warn}${configm.description.text95}`
              + '\n> ' + db.statut.get(String('invites')) + `${emoji.recycle}${configm.description.text98}`
            )

          interaction.message.edit({ embeds: ([embed]) })

          ///Embed\\\

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color_good}`)
            .setDescription(`${emoji.tick}${general.response.activate_module}`)

          ///Send Embed\\\
          interaction.channel.send({
            embeds: ([embed]), ephemeral: true
          }).then(async (message_delete) => {

            await delay(Number(3) * 1000)
            message_delete.delete()

          })

          ///Debug button\\\

          await interaction.deferUpdate()

        } else if (db.module.get(String('ghostping')) === "on") {

          ///Base de donnés\\\

          db.module.set(String('ghostping'), 'off')
          db.statut.set(String('ghostping'), '🔴')

          ///Update message embed\\\

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color}`)
            .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
            .setTitle(`${emoji.settings}${configuration.title.text1}`)
            .setDescription(`${emoji.captcha}${configuration.description.text1}` + ' '
              + '\n> ' + db.statut.get(String('utilitaire')) + ' ' + `${emoji.moderateur}${configuration.description.text2}`
              + '\n> ' + db.statut.get(String('moderation')) + ' ' + `${emoji.banned}${configuration.description.text3}`
              + '\n> ' + db.statut.get(String('level')) + ' ' + `${emoji.level}${configuration.description.text4}`
              + '\n> ' + db.statut.get(String('partenariat')) + ' ' + `${emoji.partner}${configuration.description.text5}`
              + '\n> ' + db.statut.get(String('ghostping')) + ' ' + `${emoji.ping}${configuration.description.text6}`
              + '\n> ' + db.statut.get(String('welcome')) + ' ' + `${emoji.welcome}${configuration.description.text7}`
              + '\n> ' + db.statut.get(String('embed')) + ' ' + `${emoji.file}${configuration.description.text8}`
              + '\n> ' + db.statut.get(String('verification')) + ' ' + `${emoji.verify}${configuration.description.text9}`
              + '\n> ' + db.statut.get(String('economie')) + ' ' + `${emoji.reward}${configuration.description.text10}`
              + '\n> ' + db.statut.get(String('suggestion')) + ' ' + `${emoji.pen}${configuration.description.text11}`
              + '\n> ' + db.statut.get(String('partenariat_mp')) + ' ' + `${emoji.link}${configuration.description.text12}`
              + '\n> ' + db.statut.get(String('sperso')) + ' ' + `${emoji.chanel}${configuration.description.text13}`
              + '\n> ' + db.statut.get(String('logs')) + ' ' + `${emoji.database}${configuration.description.text14}`
              + '\n> ' + db.statut.get(String('game')) + `${emoji.game}${configm.description.text67}`
              + '\n> ' + db.statut.get(String('pub')) + `${emoji.list}${configm.description.text73}`
              + '\n> ' + db.statut.get(String('report')) + `${emoji.warn}${configm.description.text95}`
              + '\n> ' + db.statut.get(String('invites')) + `${emoji.recycle}${configm.description.text98}`
            )

          interaction.message.edit({ embeds: ([embed]) })

          ///Send Embed\\\

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color_error}`)
            .setDescription(`${emoji.wrong}${general.response.desactivate_module}`)

          ///Send Embed\\\
          interaction.channel.send({
            embeds: ([embed]), ephemeral: true
          }).then(async (message_delete) => {

            await delay(Number(3) * 1000)
            message_delete.delete()

          })

          ///Debug Button\\\

          await interaction.deferUpdate()
        }
      }
    } else {

      ///Error perms dev\\\

      var embed = new EmbedBuilder()
        .setColor(`${config.color.color_error}`)
        .setDescription(`${emoji.wrong}${general.error.perms_dev}`)

      interaction.reply({ embeds: ([embed]), ephemeral: true })

    }

  };

  ///Partenariat\\\
  if (interaction.customId === "module_button_partenariat") {
    if (interaction.user.id === dev) {
      if (db.module.has(String('partenariat'))) {
        if (db.module.get(String('partenariat')) === "off") {

          ///Mise à jour base de donnés\\\

          db.module.set(String('partenariat'), 'on')
          db.statut.set(String('partenariat'), '🔵')

          ///Update message embed\\\

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color}`)
            .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
            .setTitle(`${emoji.settings}${configuration.title.text1}`)
            .setDescription(`${emoji.captcha}${configuration.description.text1}` + ' '
              + '\n> ' + db.statut.get(String('utilitaire')) + ' ' + `${emoji.moderateur}${configuration.description.text2}`
              + '\n> ' + db.statut.get(String('moderation')) + ' ' + `${emoji.banned}${configuration.description.text3}`
              + '\n> ' + db.statut.get(String('level')) + ' ' + `${emoji.level}${configuration.description.text4}`
              + '\n> ' + db.statut.get(String('partenariat')) + ' ' + `${emoji.partner}${configuration.description.text5}`
              + '\n> ' + db.statut.get(String('ghostping')) + ' ' + `${emoji.ping}${configuration.description.text6}`
              + '\n> ' + db.statut.get(String('welcome')) + ' ' + `${emoji.welcome}${configuration.description.text7}`
              + '\n> ' + db.statut.get(String('embed')) + ' ' + `${emoji.file}${configuration.description.text8}`
              + '\n> ' + db.statut.get(String('verification')) + ' ' + `${emoji.verify}${configuration.description.text9}`
              + '\n> ' + db.statut.get(String('economie')) + ' ' + `${emoji.reward}${configuration.description.text10}`
              + '\n> ' + db.statut.get(String('suggestion')) + ' ' + `${emoji.pen}${configuration.description.text11}`
              + '\n> ' + db.statut.get(String('partenariat_mp')) + ' ' + `${emoji.link}${configuration.description.text12}`
              + '\n> ' + db.statut.get(String('sperso')) + ' ' + `${emoji.chanel}${configuration.description.text13}`
              + '\n> ' + db.statut.get(String('logs')) + ' ' + `${emoji.database}${configuration.description.text14}`
              + '\n> ' + db.statut.get(String('game')) + `${emoji.game}${configm.description.text67}`
              + '\n> ' + db.statut.get(String('pub')) + `${emoji.list}${configm.description.text73}`
              + '\n> ' + db.statut.get(String('report')) + `${emoji.warn}${configm.description.text95}`
              + '\n> ' + db.statut.get(String('invites')) + `${emoji.recycle}${configm.description.text98}`
            )

          interaction.message.edit({ embeds: ([embed]) })

          ///Embed\\\

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color_good}`)
            .setDescription(`${emoji.tick}${general.response.activate_module}`)

          ///Send Embed\\\
          interaction.channel.send({
            embeds: ([embed]), ephemeral: true
          }).then(async (message_delete) => {

            await delay(Number(3) * 1000)
            message_delete.delete()

          })

          ///Debug button\\\

          await interaction.deferUpdate()

        } else if (db.module.get(String('partenariat')) === "on") {

          ///Base de donnés\\\

          db.module.set(String('partenariat'), 'off')
          db.statut.set(String('partenariat'), '🔴')

          ///Update message embed\\\

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color}`)
            .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
            .setTitle(`${emoji.settings}${configuration.title.text1}`)
            .setDescription(`${emoji.captcha}${configuration.description.text1}` + ' '
              + '\n> ' + db.statut.get(String('utilitaire')) + ' ' + `${emoji.moderateur}${configuration.description.text2}`
              + '\n> ' + db.statut.get(String('moderation')) + ' ' + `${emoji.banned}${configuration.description.text3}`
              + '\n> ' + db.statut.get(String('level')) + ' ' + `${emoji.level}${configuration.description.text4}`
              + '\n> ' + db.statut.get(String('partenariat')) + ' ' + `${emoji.partner}${configuration.description.text5}`
              + '\n> ' + db.statut.get(String('ghostping')) + ' ' + `${emoji.ping}${configuration.description.text6}`
              + '\n> ' + db.statut.get(String('welcome')) + ' ' + `${emoji.welcome}${configuration.description.text7}`
              + '\n> ' + db.statut.get(String('embed')) + ' ' + `${emoji.file}${configuration.description.text8}`
              + '\n> ' + db.statut.get(String('verification')) + ' ' + `${emoji.verify}${configuration.description.text9}`
              + '\n> ' + db.statut.get(String('economie')) + ' ' + `${emoji.reward}${configuration.description.text10}`
              + '\n> ' + db.statut.get(String('suggestion')) + ' ' + `${emoji.pen}${configuration.description.text11}`
              + '\n> ' + db.statut.get(String('partenariat_mp')) + ' ' + `${emoji.link}${configuration.description.text12}`
              + '\n> ' + db.statut.get(String('sperso')) + ' ' + `${emoji.chanel}${configuration.description.text13}`
              + '\n> ' + db.statut.get(String('logs')) + ' ' + `${emoji.database}${configuration.description.text14}`
              + '\n> ' + db.statut.get(String('game')) + `${emoji.game}${configm.description.text67}`
              + '\n> ' + db.statut.get(String('pub')) + `${emoji.list}${configm.description.text73}`
              + '\n> ' + db.statut.get(String('report')) + `${emoji.warn}${configm.description.text95}`
              + '\n> ' + db.statut.get(String('invites')) + `${emoji.recycle}${configm.description.text98}`
            )

          interaction.message.edit({ embeds: ([embed]) })

          ///Send Embed\\\

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color_error}`)
            .setDescription(`${emoji.wrong}${general.response.desactivate_module}`)

          ///Send Embed\\\
          interaction.channel.send({
            embeds: ([embed]), ephemeral: true
          }).then(async (message_delete) => {

            await delay(Number(3) * 1000)
            message_delete.delete()

          })

          ///Debug Button\\\

          await interaction.deferUpdate()
        }
      }
    } else {

      ///Error perms dev\\\

      var embed = new EmbedBuilder()
        .setColor(`${config.color.color_error}`)
        .setDescription(`${emoji.wrong}${general.error.perms_dev}`)

      interaction.reply({ embeds: ([embed]), ephemeral: true })

    }

  };

  ///Level\\\
  if (interaction.customId === "module_button_level") {
    if (interaction.user.id === dev) {
      if (db.module.has(String('level'))) {
        if (db.module.get(String('level')) === "off") {

          ///Mise à jour base de donnés\\\

          db.module.set(String('level'), 'on')
          db.statut.set(String('level'), '🔵')

          ///Update message embed\\\

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color}`)
            .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
            .setTitle(`${emoji.settings}${configuration.title.text1}`)
            .setDescription(`${emoji.captcha}${configuration.description.text1}` + ' '
              + '\n> ' + db.statut.get(String('utilitaire')) + ' ' + `${emoji.moderateur}${configuration.description.text2}`
              + '\n> ' + db.statut.get(String('moderation')) + ' ' + `${emoji.banned}${configuration.description.text3}`
              + '\n> ' + db.statut.get(String('level')) + ' ' + `${emoji.level}${configuration.description.text4}`
              + '\n> ' + db.statut.get(String('partenariat')) + ' ' + `${emoji.partner}${configuration.description.text5}`
              + '\n> ' + db.statut.get(String('ghostping')) + ' ' + `${emoji.ping}${configuration.description.text6}`
              + '\n> ' + db.statut.get(String('welcome')) + ' ' + `${emoji.welcome}${configuration.description.text7}`
              + '\n> ' + db.statut.get(String('embed')) + ' ' + `${emoji.file}${configuration.description.text8}`
              + '\n> ' + db.statut.get(String('verification')) + ' ' + `${emoji.verify}${configuration.description.text9}`
              + '\n> ' + db.statut.get(String('economie')) + ' ' + `${emoji.reward}${configuration.description.text10}`
              + '\n> ' + db.statut.get(String('suggestion')) + ' ' + `${emoji.pen}${configuration.description.text11}`
              + '\n> ' + db.statut.get(String('partenariat_mp')) + ' ' + `${emoji.link}${configuration.description.text12}`
              + '\n> ' + db.statut.get(String('sperso')) + ' ' + `${emoji.chanel}${configuration.description.text13}`
              + '\n> ' + db.statut.get(String('logs')) + ' ' + `${emoji.database}${configuration.description.text14}`
              + '\n> ' + db.statut.get(String('game')) + `${emoji.game}${configm.description.text67}`
              + '\n> ' + db.statut.get(String('pub')) + `${emoji.list}${configm.description.text73}`
              + '\n> ' + db.statut.get(String('report')) + `${emoji.warn}${configm.description.text95}`
              + '\n> ' + db.statut.get(String('invites')) + `${emoji.recycle}${configm.description.text98}`
            )

          interaction.message.edit({ embeds: ([embed]) })

          ///Embed\\\

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color_good}`)
            .setDescription(`${emoji.tick}${general.response.activate_module}`)

          ///Send Embed\\\
          interaction.channel.send({
            embeds: ([embed]), ephemeral: true
          }).then(async (message_delete) => {

            await delay(Number(3) * 1000)
            message_delete.delete()

          })

          ///Debug button\\\

          await interaction.deferUpdate()

        } else if (db.module.get(String('level')) === "on") {

          ///Base de donnés\\\

          db.module.set(String('level'), 'off')
          db.statut.set(String('level'), '🔴')

          ///Update message embed\\\

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color}`)
            .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
            .setTitle(`${emoji.settings}${configuration.title.text1}`)
            .setDescription(`${emoji.captcha}${configuration.description.text1}` + ' '
              + '\n> ' + db.statut.get(String('utilitaire')) + ' ' + `${emoji.moderateur}${configuration.description.text2}`
              + '\n> ' + db.statut.get(String('moderation')) + ' ' + `${emoji.banned}${configuration.description.text3}`
              + '\n> ' + db.statut.get(String('level')) + ' ' + `${emoji.level}${configuration.description.text4}`
              + '\n> ' + db.statut.get(String('partenariat')) + ' ' + `${emoji.partner}${configuration.description.text5}`
              + '\n> ' + db.statut.get(String('ghostping')) + ' ' + `${emoji.ping}${configuration.description.text6}`
              + '\n> ' + db.statut.get(String('welcome')) + ' ' + `${emoji.welcome}${configuration.description.text7}`
              + '\n> ' + db.statut.get(String('embed')) + ' ' + `${emoji.file}${configuration.description.text8}`
              + '\n> ' + db.statut.get(String('verification')) + ' ' + `${emoji.verify}${configuration.description.text9}`
              + '\n> ' + db.statut.get(String('economie')) + ' ' + `${emoji.reward}${configuration.description.text10}`
              + '\n> ' + db.statut.get(String('suggestion')) + ' ' + `${emoji.pen}${configuration.description.text11}`
              + '\n> ' + db.statut.get(String('partenariat_mp')) + ' ' + `${emoji.link}${configuration.description.text12}`
              + '\n> ' + db.statut.get(String('sperso')) + ' ' + `${emoji.chanel}${configuration.description.text13}`
              + '\n> ' + db.statut.get(String('logs')) + ' ' + `${emoji.database}${configuration.description.text14}`
              + '\n> ' + db.statut.get(String('game')) + `${emoji.game}${configm.description.text67}`
              + '\n> ' + db.statut.get(String('pub')) + `${emoji.list}${configm.description.text73}`
              + '\n> ' + db.statut.get(String('report')) + `${emoji.warn}${configm.description.text95}`
              + '\n> ' + db.statut.get(String('invites')) + `${emoji.recycle}${configm.description.text98}`
            )

          interaction.message.edit({ embeds: ([embed]) })

          ///Send Embed\\\

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color_error}`)
            .setDescription(`${emoji.wrong}${general.response.desactivate_module}`)

          ///Send Embed\\\
          interaction.channel.send({
            embeds: ([embed]), ephemeral: true
          }).then(async (message_delete) => {

            await delay(Number(3) * 1000)
            message_delete.delete()

          })

          ///Debug Button\\\

          await interaction.deferUpdate()
        }
      }
    } else {

      ///Error perms dev\\\

      var embed = new EmbedBuilder()
        .setColor(`${config.color.color_error}`)
        .setDescription(`${emoji.wrong}${general.error.perms_dev}`)

      interaction.reply({ embeds: ([embed]), ephemeral: true })

    }

  };

  ///Modération\\\
  if (interaction.customId === "module_button_moderation") {
    if (interaction.user.id === dev) {
      if (db.module.has(String('moderation'))) {
        if (db.module.get(String('moderation')) === "off") {

          ///Mise à jour base de donnés\\\

          db.module.set(String('moderation'), 'on')
          db.statut.set(String('moderation'), '🔵')

          ///Update message embed\\\

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color}`)
            .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
            .setTitle(`${emoji.settings}${configuration.title.text1}`)
            .setDescription(`${emoji.captcha}${configuration.description.text1}` + ' '
              + '\n> ' + db.statut.get(String('utilitaire')) + ' ' + `${emoji.moderateur}${configuration.description.text2}`
              + '\n> ' + db.statut.get(String('moderation')) + ' ' + `${emoji.banned}${configuration.description.text3}`
              + '\n> ' + db.statut.get(String('level')) + ' ' + `${emoji.level}${configuration.description.text4}`
              + '\n> ' + db.statut.get(String('partenariat')) + ' ' + `${emoji.partner}${configuration.description.text5}`
              + '\n> ' + db.statut.get(String('ghostping')) + ' ' + `${emoji.ping}${configuration.description.text6}`
              + '\n> ' + db.statut.get(String('welcome')) + ' ' + `${emoji.welcome}${configuration.description.text7}`
              + '\n> ' + db.statut.get(String('embed')) + ' ' + `${emoji.file}${configuration.description.text8}`
              + '\n> ' + db.statut.get(String('verification')) + ' ' + `${emoji.verify}${configuration.description.text9}`
              + '\n> ' + db.statut.get(String('economie')) + ' ' + `${emoji.reward}${configuration.description.text10}`
              + '\n> ' + db.statut.get(String('suggestion')) + ' ' + `${emoji.pen}${configuration.description.text11}`
              + '\n> ' + db.statut.get(String('partenariat_mp')) + ' ' + `${emoji.link}${configuration.description.text12}`
              + '\n> ' + db.statut.get(String('sperso')) + ' ' + `${emoji.chanel}${configuration.description.text13}`
              + '\n> ' + db.statut.get(String('logs')) + ' ' + `${emoji.database}${configuration.description.text14}`
              + '\n> ' + db.statut.get(String('game')) + `${emoji.game}${configm.description.text67}`
              + '\n> ' + db.statut.get(String('pub')) + `${emoji.list}${configm.description.text73}`
              + '\n> ' + db.statut.get(String('report')) + `${emoji.warn}${configm.description.text95}`
              + '\n> ' + db.statut.get(String('invites')) + `${emoji.recycle}${configm.description.text98}`
            )

          interaction.message.edit({ embeds: ([embed]) })

          ///Embed\\\

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color_good}`)
            .setDescription(`${emoji.tick}${general.response.activate_module}`)

          ///Send Embed\\\
          interaction.channel.send({
            embeds: ([embed]), ephemeral: true
          }).then(async (message_delete) => {

            await delay(Number(3) * 1000)
            message_delete.delete()

          })

          ///Debug button\\\

          await interaction.deferUpdate()

        } else if (db.module.get(String('moderation')) === "on") {

          ///Base de donnés\\\

          db.module.set(String('moderation'), 'off')
          db.statut.set(String('moderation'), '🔴')

          ///Update message embed\\\

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color}`)
            .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
            .setTitle(`${emoji.settings}${configuration.title.text1}`)
            .setDescription(`${emoji.captcha}${configuration.description.text1}` + ' '
              + '\n> ' + db.statut.get(String('utilitaire')) + ' ' + `${emoji.moderateur}${configuration.description.text2}`
              + '\n> ' + db.statut.get(String('moderation')) + ' ' + `${emoji.banned}${configuration.description.text3}`
              + '\n> ' + db.statut.get(String('level')) + ' ' + `${emoji.level}${configuration.description.text4}`
              + '\n> ' + db.statut.get(String('partenariat')) + ' ' + `${emoji.partner}${configuration.description.text5}`
              + '\n> ' + db.statut.get(String('ghostping')) + ' ' + `${emoji.ping}${configuration.description.text6}`
              + '\n> ' + db.statut.get(String('welcome')) + ' ' + `${emoji.welcome}${configuration.description.text7}`
              + '\n> ' + db.statut.get(String('embed')) + ' ' + `${emoji.file}${configuration.description.text8}`
              + '\n> ' + db.statut.get(String('verification')) + ' ' + `${emoji.verify}${configuration.description.text9}`
              + '\n> ' + db.statut.get(String('economie')) + ' ' + `${emoji.reward}${configuration.description.text10}`
              + '\n> ' + db.statut.get(String('suggestion')) + ' ' + `${emoji.pen}${configuration.description.text11}`
              + '\n> ' + db.statut.get(String('partenariat_mp')) + ' ' + `${emoji.link}${configuration.description.text12}`
              + '\n> ' + db.statut.get(String('sperso')) + ' ' + `${emoji.chanel}${configuration.description.text13}`
              + '\n> ' + db.statut.get(String('logs')) + ' ' + `${emoji.database}${configuration.description.text14}`
              + '\n> ' + db.statut.get(String('game')) + `${emoji.game}${configm.description.text67}`
              + '\n> ' + db.statut.get(String('pub')) + `${emoji.list}${configm.description.text73}`
              + '\n> ' + db.statut.get(String('report')) + `${emoji.warn}${configm.description.text95}`
              + '\n> ' + db.statut.get(String('invites')) + `${emoji.recycle}${configm.description.text98}`
            )

          interaction.message.edit({ embeds: ([embed]) })

          ///Send Embed\\\

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color_error}`)
            .setDescription(`${emoji.wrong}${general.response.desactivate_module}`)

          ///Send Embed\\\
          interaction.channel.send({
            embeds: ([embed]), ephemeral: true
          }).then(async (message_delete) => {

            await delay(Number(3) * 1000)
            message_delete.delete()

          })

          ///Debug Button\\\

          await interaction.deferUpdate()
        }
      }
    } else {

      ///Error perms dev\\\

      var embed = new EmbedBuilder()
        .setColor(`${config.color.color_error}`)
        .setDescription(`${emoji.wrong}${general.error.perms_dev}`)

      interaction.reply({ embeds: ([embed]), ephemeral: true })

    }

  };

  ///Utilitaire\\\
  if (interaction.customId === "module_button_utilitaire") {
    if (interaction.user.id === dev) {
      if (db.module.has(String('utilitaire'))) {
        if (db.module.get(String('utilitaire')) === "off") {

          ///Mise à jour base de donnés\\\

          db.module.set(String('utilitaire'), 'on')
          db.statut.set(String('utilitaire'), '🔵')

          ///Update message embed\\\

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color}`)
            .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
            .setTitle(`${emoji.settings}${configuration.title.text1}`)
            .setDescription(`${emoji.captcha}${configuration.description.text1}` + ' '
              + '\n> ' + db.statut.get(String('utilitaire')) + ' ' + `${emoji.moderateur}${configuration.description.text2}`
              + '\n> ' + db.statut.get(String('moderation')) + ' ' + `${emoji.banned}${configuration.description.text3}`
              + '\n> ' + db.statut.get(String('level')) + ' ' + `${emoji.level}${configuration.description.text4}`
              + '\n> ' + db.statut.get(String('partenariat')) + ' ' + `${emoji.partner}${configuration.description.text5}`
              + '\n> ' + db.statut.get(String('ghostping')) + ' ' + `${emoji.ping}${configuration.description.text6}`
              + '\n> ' + db.statut.get(String('welcome')) + ' ' + `${emoji.welcome}${configuration.description.text7}`
              + '\n> ' + db.statut.get(String('embed')) + ' ' + `${emoji.file}${configuration.description.text8}`
              + '\n> ' + db.statut.get(String('verification')) + ' ' + `${emoji.verify}${configuration.description.text9}`
              + '\n> ' + db.statut.get(String('economie')) + ' ' + `${emoji.reward}${configuration.description.text10}`
              + '\n> ' + db.statut.get(String('suggestion')) + ' ' + `${emoji.pen}${configuration.description.text11}`
              + '\n> ' + db.statut.get(String('partenariat_mp')) + ' ' + `${emoji.link}${configuration.description.text12}`
              + '\n> ' + db.statut.get(String('sperso')) + ' ' + `${emoji.chanel}${configuration.description.text13}`
              + '\n> ' + db.statut.get(String('logs')) + ' ' + `${emoji.database}${configuration.description.text14}`
              + '\n> ' + db.statut.get(String('game')) + `${emoji.game}${configm.description.text67}`
              + '\n> ' + db.statut.get(String('pub')) + `${emoji.list}${configm.description.text73}`
              + '\n> ' + db.statut.get(String('report')) + `${emoji.warn}${configm.description.text95}`
              + '\n> ' + db.statut.get(String('invites')) + `${emoji.recycle}${configm.description.text98}`
            )

          interaction.message.edit({ embeds: ([embed]) })

          ///Embed\\\

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color_good}`)
            .setDescription(`${emoji.tick}${general.response.activate_module}`)

          ///Send Embed\\\
          interaction.channel.send({
            embeds: ([embed]), ephemeral: true
          }).then(async (message_delete) => {

            await delay(Number(3) * 1000)
            message_delete.delete()

          })

          ///Debug button\\\

          await interaction.deferUpdate()

        } else if (db.module.get(String('utilitaire')) === "on") {

          ///Base de donnés\\\

          db.module.set(String('utilitaire'), 'off')
          db.statut.set(String('utilitaire'), '🔴')

          ///Update message embed\\\

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color}`)
            .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
            .setTitle(`${emoji.settings}${configuration.title.text1}`)
            .setDescription(`${emoji.captcha}${configuration.description.text1}` + ' '
              + '\n> ' + db.statut.get(String('utilitaire')) + ' ' + `${emoji.moderateur}${configuration.description.text2}`
              + '\n> ' + db.statut.get(String('moderation')) + ' ' + `${emoji.banned}${configuration.description.text3}`
              + '\n> ' + db.statut.get(String('level')) + ' ' + `${emoji.level}${configuration.description.text4}`
              + '\n> ' + db.statut.get(String('partenariat')) + ' ' + `${emoji.partner}${configuration.description.text5}`
              + '\n> ' + db.statut.get(String('ghostping')) + ' ' + `${emoji.ping}${configuration.description.text6}`
              + '\n> ' + db.statut.get(String('welcome')) + ' ' + `${emoji.welcome}${configuration.description.text7}`
              + '\n> ' + db.statut.get(String('embed')) + ' ' + `${emoji.file}${configuration.description.text8}`
              + '\n> ' + db.statut.get(String('verification')) + ' ' + `${emoji.verify}${configuration.description.text9}`
              + '\n> ' + db.statut.get(String('economie')) + ' ' + `${emoji.reward}${configuration.description.text10}`
              + '\n> ' + db.statut.get(String('suggestion')) + ' ' + `${emoji.pen}${configuration.description.text11}`
              + '\n> ' + db.statut.get(String('partenariat_mp')) + ' ' + `${emoji.link}${configuration.description.text12}`
              + '\n> ' + db.statut.get(String('sperso')) + ' ' + `${emoji.chanel}${configuration.description.text13}`
              + '\n> ' + db.statut.get(String('logs')) + ' ' + `${emoji.database}${configuration.description.text14}`
              + '\n> ' + db.statut.get(String('game')) + `${emoji.game}${configm.description.text67}`
              + '\n> ' + db.statut.get(String('pub')) + `${emoji.list}${configm.description.text73}`
              + '\n> ' + db.statut.get(String('report')) + `${emoji.warn}${configm.description.text95}`
              + '\n> ' + db.statut.get(String('invites')) + `${emoji.recycle}${configm.description.text98}`
            )

          interaction.message.edit({ embeds: ([embed]) })

          ///Send Embed\\\

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color_error}`)
            .setDescription(`${emoji.wrong}${general.response.desactivate_module}`)

          ///Send Embed\\\
          interaction.channel.send({
            embeds: ([embed]), ephemeral: true
          }).then(async (message_delete) => {

            await delay(Number(3) * 1000)
            message_delete.delete()

          })


          ///Debug Button\\\

          await interaction.deferUpdate()
        }
      }
    } else {

      ///Error perms dev\\\

      var embed = new EmbedBuilder()
        .setColor(`${config.color.color_error}`)
        .setDescription(`${emoji.wrong}${general.error.perms_dev}`)

      interaction.reply({ embeds: ([embed]), ephemeral: true })

    }

  };



  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



  ///Configuration\\\
  ///Level Module\\\
  if (interaction.commandName === "invites") {
    if (interaction.guildId === server_id) {
      if (db.module.has(String('invites')) && db.module.get(String('invites')) === "on") {

        try {

          if (!((String(interaction.options.getUser('utilisateur'))) === "null")) {
            if (db.database.has(String(interaction.options.getUser('utilisateur').id + '-invites_count'))) {


              var embed = new EmbedBuilder()
                .setColor(`${config.color.color}`)
                .setDescription(`${emoji.recycle}${invite.description.text1}` + db.database.get(String(interaction.options.getUser('utilisateur').id + '-invites_count')) + `${invite.description.text2}`)

              interaction.reply({ embeds: ([embed]) })
            } else {

              var embed = new EmbedBuilder()
                .setColor(`${config.color.color}`)
                .setDescription(`${emoji.recycle}${invite.description.text1}` + "0" + `${invite.description.text2}`)

              interaction.reply({ embeds: ([embed]) })
            }
          } else {
            if (db.database.has(String(interaction.user.id + '-invites_count'))) {

              var embed = new EmbedBuilder()
                .setColor(`${config.color.color}`)
                .setDescription(`${emoji.recycle}${invite.description.text1}` + db.database.get(String(interaction.user.id + '-invites_count')) + `${invite.description.text2}`)

              interaction.reply({ embeds: ([embed]) })
            } else {

              var embed = new EmbedBuilder()
                .setColor(`${config.color.color}`)
                .setDescription(`${emoji.recycle}${invite.description.text1}` + "0" + `${invite.description.text2}`)

              interaction.reply({ embeds: ([embed]) })

            }
          }

        } catch (err) {
          console.log(chalk.red(err) + 'Ligne 22710');

          var embed = new EmbedBuilder()
            .setColor(`${config.color.error}`)
            .setDescription(`${emoji.error}${server_infos.description.text9}`)

          interaction.reply({ embeds: ([embed]), ephemeral: true })

          let error = err

          var embed = new EmbedBuilder()
            .setColor(`${config.color.error}`)
            .setTitle(`${emoji.error}${server_infos.title.text2}`)
            .setDescription('```invites``` ```diff' + `\n\n` + `- ${error}` + '```')
            .setAuthor({ name: client.user.tag + ' | ' + client.user.id, iconURL: client.user.displayAvatarURL() })
            .setFooter({ text: interaction.user.tag + ' | ' + interaction.user.id, iconURL: interaction.user.displayAvatarURL() })

          client.channels.cache.get(String(`${config.channels.error}`)).send({ embeds: ([embed]) })

        }

      } else {
        var embed = new EmbedBuilder()
          .setColor(`${config.color.color_error}`)
          .setDescription(`${emoji.wrong}${general.error.module_activate1}` + ' *`Niveaux`* ' + `${general.error.module_activate2}`)

        interaction.reply({ embeds: ([embed]), ephemeral: true })
      }
    } else {

      var embed = new EmbedBuilder()
        .setColor(`${config.color.color_error}`)
        .setDescription(`${emoji.wrong}${general.error.server_follow}`)

      interaction.reply({ embeds: ([embed]), ephemeral: true })
    }
  }

  if (interaction.commandName === "xp") {
    if (interaction.guildId === server_id) {
      if (db.module.has(String('level')) && db.module.get(String('level')) === "on") {

        try {

          if (!((String(interaction.options.getUser('utilisateur'))) === "null")) {
            if (db.xp.has(String((interaction.options.getUser('utilisateur')).id + '-xp'))) {


              var embed = new EmbedBuilder()
                .setColor(`${config.color.color}`)
                .setDescription(`${emoji.giveaway}${xp.description.text1}` + db.xp.get(String(interaction.options.getUser('utilisateur').id) + '-xp') + `${xp.description.text2}`)

              interaction.reply({ embeds: ([embed]) })
            } else {

              var embed = new EmbedBuilder()
                .setColor(`${config.color.color}`)
                .setDescription(`${emoji.giveaway}${xp.description.text1}` + "0" + `${xp.description.text2}`)

              interaction.reply({ embeds: ([embed]) })
            }
          } else {
            if (db.xp.has(String((interaction.user.id) + '-xp'))) {

              var embed = new EmbedBuilder()
                .setColor(`${config.color.color}`)
                .setDescription(`${emoji.giveaway}${xp.description.text3}` + db.xp.get(String((String(interaction.user.id)) + '-xp')) + `${xp.description.text2}`)

              interaction.reply({ embeds: ([embed]) })
            } else {

              var embed = new EmbedBuilder()
                .setColor(`${config.color.color}`)
                .setDescription(`${emoji.giveaway}${xp.description.text3}` + "0" + `${xp.description.text2}`)

              interaction.reply({ embeds: ([embed]) })

            }
          }

        } catch (err) {
          console.log(chalk.red(err) + 'Ligne 22710');

          var embed = new EmbedBuilder()
            .setColor(`${config.color.error}`)
            .setDescription(`${emoji.error}${server_infos.description.text9}`)

          interaction.reply({ embeds: ([embed]), ephemeral: true })

          let error = err

          var embed = new EmbedBuilder()
            .setColor(`${config.color.error}`)
            .setTitle(`${emoji.error}${server_infos.title.text2}`)
            .setDescription('```invites``` ```diff' + `\n\n` + `- ${error}` + '```')
            .setAuthor({ name: client.user.tag + ' | ' + client.user.id, iconURL: client.user.displayAvatarURL() })
            .setFooter({ text: interaction.user.tag + ' | ' + interaction.user.id, iconURL: interaction.user.displayAvatarURL() })

          client.channels.cache.get(String(`${config.channels.error}`)).send({ embeds: ([embed]) })

        }

      } else {
        var embed = new EmbedBuilder()
          .setColor(`${config.color.color_error}`)
          .setDescription(`${emoji.wrong}${general.error.module_activate1}` + ' *`Niveaux`* ' + `${general.error.module_activate2}`)

        interaction.reply({ embeds: ([embed]), ephemeral: true })
      }
    } else {

      var embed = new EmbedBuilder()
        .setColor(`${config.color.color_error}`)
        .setDescription(`${emoji.wrong}${general.error.server_follow}`)

      interaction.reply({ embeds: ([embed]), ephemeral: true })
    }
  }

  if (interaction.commandName === "level") {
    if (interaction.guildId === server_id) {
      if (db.module.has(String('level')) && db.module.get(String('level')) === "on") {

        try {

          if (!((String(interaction.options.getUser('utilisateur'))) === "null")) {
            if (db.level.has(String(interaction.options.getUser('utilisateur') + '-level'))) {

              var embed = new EmbedBuilder()
                .setColor(`${config.color.color}`)
                .setDescription(`${emoji.level}${level.description.text1}` + db.level.get(String(interaction.options.getUser('utilisateur').id + '-level')) + `${level.description.text2}`)

              interaction.reply({ embeds: ([embed]) })
            } else {

              var embed = new EmbedBuilder()
                .setColor(`${config.color.color}`)
                .setDescription(`${emoji.level}${level.description.text1}` + "1" + `${level.description.text2}`)

              interaction.reply({ embeds: ([embed]) })
            }
          } else {
            if (db.level.has(String(interaction.user.id + '-level'))) {

              var embed = new EmbedBuilder()
                .setColor(`${config.color.color}`)
                .setDescription(`${emoji.level}${level.description.text3}` + db.level.get(String(interaction.user.id + '-level')) + `${level.description.text4}`)

              interaction.reply({ embeds: ([embed]) })
            } else {

              db.level.set(String(interaction.user.id + '-level'), '0')

              var embed = new EmbedBuilder()
                .setColor(`${config.color.color}`)
                .setDescription(`${emoji.level}${level.description.text3}` + "1" + `${level.description.text4}`)

              interaction.reply({ embeds: ([embed]) })

            }
          }

        } catch (err) {
          console.log(chalk.red(err) + '22892');

          var embed = new EmbedBuilder()
            .setColor(`${config.color.error}`)
            .setDescription(`${emoji.error}${server_infos.description.text9}`)

          interaction.reply({ embeds: ([embed]), ephemeral: true })

          let error = err

          var embed = new EmbedBuilder()
            .setColor(`${config.color.error}`)
            .setTitle(`${emoji.error}${server_infos.title.text2}`)
            .setDescription('```level``` ```diff' + `\n\n` + `- ${error}` + '```')
            .setAuthor({ name: client.user.tag + ' | ' + client.user.id, iconURL: client.user.displayAvatarURL() })
            .setFooter({ text: interaction.user.tag + ' | ' + interaction.user.id, iconURL: interaction.user.displayAvatarURL() })

          client.channels.cache.get(String(`${config.channels.error}`)).send({ embeds: ([embed]) })

        }

      } else {
        var embed = new EmbedBuilder()
          .setColor(`${config.color.color_error}`)
          .setDescription(`${emoji.wrong}${general.error.module_activate1}` + ' *`Niveaux`* ' + `${general.error.module_activate2}`)

        interaction.reply({ embeds: ([embed]), ephemeral: true })
      }
    } else {

      var embed = new EmbedBuilder()
        .setColor(`${config.color.color_error}`)
        .setDescription(`${emoji.wrong}${general.error.server_follow}`)

      interaction.reply({ embeds: ([embed]), ephemeral: true })
    }
  }
  ///Utilitaire Module\\\
  if (interaction.commandName === "chanel_count") {
    if (interaction.guildId === server_id) {
      if (db.module.has(String('utilitaire')) && db.module.get(String('utilitaire')) === "on") {

        try {

          var embed = new EmbedBuilder()
            .setColor(`${config.color.color}`)
            .setTitle(`${emoji.chanel}${chanel_count.title.text1}`)
            .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
            .setDescription(`${chanel_count.description.text1}` + '*`' + ((interaction.guild).channels.cache.size) + '`*' + `${chanel_count.description.text2}`)

          interaction.reply({ embeds: ([embed]) })

        } catch (err) {
          console.log(chalk.red(err));

          var embed = new EmbedBuilder()
            .setColor(`${config.color.error}`)
            .setDescription(`${emoji.error}${server_infos.description.text9}`)

          interaction.reply({ embeds: ([embed]), ephemeral: true })

          let error = err

          var embed = new EmbedBuilder()
            .setColor(`${config.color.error}`)
            .setTitle(`${emoji.error}${server_infos.title.text2}`)
            .setDescription('```chanel_count``` ```diff' + `\n\n` + `- ${error}` + '```')
            .setAuthor({ name: client.user.tag + ' | ' + client.user.id, iconURL: client.user.displayAvatarURL() })
            .setFooter({ text: interaction.user.tag + ' | ' + interaction.user.id, iconURL: interaction.user.displayAvatarURL() })

          client.channels.cache.get(String(`${config.channels.error}`)).send({ embeds: ([embed]) })

        }
      } else {
        var embed = new EmbedBuilder()
          .setColor(`${config.color.color_error}`)
          .setDescription(`${emoji.wrong}${general.error.module_activate1}` + ' *`Utilitaire`* ' + `${general.error.module_activate2}`)

        interaction.reply({ embeds: ([embed]), ephemeral: true })
      }
    } else {

      var embed = new EmbedBuilder()
        .setColor(`${config.color.color_error}`)
        .setDescription(`${emoji.wrong}${general.error.server_follow}`)

      interaction.reply({ embeds: ([embed]), ephemeral: true })
    }
  }

  ///Utilitaire bot_count

  if (interaction.commandName === "bot_count") {
    if (interaction.guildId === server_id) {
      if (db.module.has(String('utilitaire')) && db.module.get(String('utilitaire')) === "on") {

        try {
          var embed = new EmbedBuilder()
            .setColor(`${config.color.color}`)
            .setDescription(`${emoji.bot}${bot_count.description.text1}` + ((interaction.guild).members.cache.filter(m => m.user.bot).size) + `${bot_count.description.text2}`)

          interaction.reply({ embeds: ([embed]) })

        } catch (err) {
          console.log(chalk.red(err));

          var embed = new EmbedBuilder()
            .setColor(`${config.color.error}`)
            .setDescription(`${emoji.error}${server_infos.description.text9}`)

          interaction.reply({ embeds: ([embed]), ephemeral: true })

          let error = err

          var embed = new EmbedBuilder()
            .setColor(`${config.color.error}`)
            .setTitle(`${emoji.error}${server_infos.title.text2}`)
            .setDescription('```bot_count``` ```diff' + `\n\n` + `- ${error}` + '```')
            .setAuthor({ name: client.user.tag + ' | ' + client.user.id, iconURL: client.user.displayAvatarURL() })
            .setFooter({ text: interaction.user.tag + ' | ' + interaction.user.id, iconURL: interaction.user.displayAvatarURL() })

          client.channels.cache.get(String(`${config.channels.error}`)).send({ embeds: ([embed]) })

        }

      } else {
        var embed = new EmbedBuilder()
          .setColor(`${config.color.color_error}`)
          .setDescription(`${emoji.wrong}${general.error.module_activate1}` + ' *`Utilitaire`* ' + `${general.error.module_activate2}`)

        interaction.reply({ embeds: ([embed]), ephemeral: true })
      }
    } else {

      var embed = new EmbedBuilder()
        .setColor(`${config.color.color}`)
        .setDescription(`${emoji.wrong}${general.error.server_follow}`)

      interaction.reply({ embeds: ([embed]), ephemeral: true })
    }
  }
  if (interaction.commandName === "channel_count") {
    if (interaction.guildId === server_id) {
      if (db.module.has(String('utilitaire')) && db.module.get(String('utilitaire')) === "on") {

        try {
          var embed = new EmbedBuilder()
            .setColor(`${config.color.color}`)
            .setDescription(`${emoji.chanel}${chanel_count.description.text1}` + String((interaction.guild).channels.cache.size) + `${chanel_count.description.text2}`)

          interaction.reply({ embeds: ([embed]) })

        } catch (err) {
          console.log(chalk.red(err));

          var embed = new EmbedBuilder()
            .setColor(`${config.color.error}`)
            .setDescription(`${emoji.error}${server_infos.description.text9}`)

          interaction.reply({ embeds: ([embed]), ephemeral: true })

          let error = err

          var embed = new EmbedBuilder()
            .setColor(`${config.color.error}`)
            .setTitle(`${emoji.error}${server_infos.title.text2}`)
            .setDescription('```channel_count``` ```diff' + `\n\n` + `- ${error}` + '```')
            .setAuthor({ name: client.user.tag + ' | ' + client.user.id, iconURL: client.user.displayAvatarURL() })
            .setFooter({ text: interaction.user.tag + ' | ' + interaction.user.id, iconURL: interaction.user.displayAvatarURL() })

          client.channels.cache.get(String(`${config.channels.error}`)).send({ embeds: ([embed]) })

        }

      } else {
        var embed = new EmbedBuilder()
          .setColor(`${config.color.color_error}`)
          .setDescription(`${emoji.wrong}${general.error.module_activate1}` + ' *`Utilitaire`* ' + `${general.error.module_activate2}`)

        interaction.reply({ embeds: ([embed]), ephemeral: true })
      }
    } else {

      var embed = new EmbedBuilder()
        .setColor(`${config.color.color}`)
        .setDescription(`${emoji.wrong}${general.error.server_follow}`)

      interaction.reply({ embeds: ([embed]), ephemeral: true })
    }
  }

  ///Utilitaire server_infos

  if (interaction.commandName === "server_infos") {
    if (interaction.guildId === server_id) {
      if (db.module.has(String('utilitaire')) && db.module.get(String('utilitaire')) === "on") {

        try {
          var embed = new EmbedBuilder()
            .setColor(`${config.color.color}`)
            .setTitle(`${emoji.server}${server_infos.title.text1}`)
            .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
            .setDescription(`> ${emoji.infos} ${server_infos.description.text1}` + '*`' + interaction.guild.name + '`*'
              + `\n > ${emoji.link}${server_infos.description.text2}` + '*`' + interaction.guildId + '`*'
              + `\n> ${emoji.owner}${server_infos.description.text3}` + '*<@' + interaction.guild.ownerId + '>' + ' / `' + interaction.guild.ownerId + '`*'
              + `\n> ${emoji.chanel}${server_infos.description.text4}` + '*`' + interaction.guild.description + '`*'
              + `\n> ${emoji.file}${server_infos.description.text5}` + '*`' + interaction.guild.createdAt + '`*'
              + `\n> ${emoji.community}${server_infos.description.text6}` + '*`' + interaction.guild.memberCount + '`*'
              + `\n> ${emoji.boost}${server_infos.description.text7}` + '*`' + interaction.guild.premiumSubscriptionCount + '`*'
              + `\n> ${emoji.booster}${server_infos.description.text8}` + '*`' + interaction.guild.premiumTier + '`*')

          interaction.reply({ embeds: ([embed]) })

        } catch (err) {
          console.log(chalk.red(err));

          var embed = new EmbedBuilder()
            .setColor(`${config.color.error}`)
            .setDescription(`${emoji.error}${server_infos.description.text9}`)

          interaction.reply({ embeds: ([embed]), ephemeral: true })

          let error = err

          var embed = new EmbedBuilder()
            .setColor(`${config.color.error}`)
            .setTitle(`${emoji.error}${server_infos.title.text2}`)
            .setDescription('```server_infos``` ```diff' + `\n\n` + `- ${error}` + '```')
            .setAuthor({ name: client.user.tag + ' | ' + client.user.id, iconURL: client.user.displayAvatarURL() })
            .setFooter({ text: interaction.user.tag + ' | ' + interaction.user.id, iconURL: interaction.user.displayAvatarURL() })

          client.channels.cache.get(String(`${config.channels.error}`)).send({ embeds: ([embed]) })

        }
      } else {
        var embed = new EmbedBuilder()
          .setColor(`${config.color.color_error}`)
          .setDescription(`${emoji.wrong}${general.error.module_activate1}` + ' *`Utilitaire`* ' + `${general.error.module_activate2}`)

        interaction.reply({ embeds: ([embed]), ephemeral: true })
      }
    } else {

      var embed = new EmbedBuilder()
        .setColor(`${config.color.color_error}`)
        .setDescription(`${emoji.wrong}${general.error.server_follow}`)

      interaction.reply({ embeds: ([embed]), ephemeral: true })
    }
  }

  if (interaction.commandName === "user_infos") {
    if (interaction.guildId === server_id) {
      if (db.module.has(String('utilitaire')) && db.module.get(String('utilitaire')) === "on") {

        if (String(interaction.options.getUser("utilisateur")) === "null") {

          try {
            var embed = new EmbedBuilder()
              .setColor(`${config.color.color}`)
              .setTitle(`${emoji.server}${userinfo.title.text1}`)
              .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
              .setDescription(`> ${emoji.infos} ${userinfo.description.text1}` + '*`' + interaction.member.user.username + '`*'
                + `\n > ${emoji.link}${userinfo.description.text2}` + '*`' + interaction.member.id + '`*'
                + `\n> ${emoji.welcome}${userinfo.description.text3}` + '*`' + interaction.member.joinedAt + '`*'
                + `\n> ${emoji.file}${userinfo.description.text4}` + '*`' + interaction.member.user.createdAt + '`*')

            interaction.reply({ embeds: ([embed]) })

          } catch (err) {
            console.log(chalk.red(err));

            var embed = new EmbedBuilder()
              .setColor(`${config.color.error}`)
              .setDescription(`${emoji.error}${server_infos.description.text9}`)

            interaction.reply({ embeds: ([embed]), ephemeral: true })

            let error = err

            var embed = new EmbedBuilder()
              .setColor(`${config.color.error}`)
              .setTitle(`${emoji.error}${server_infos.title.text2}`)
              .setDescription('```user_infos``` ```diff' + `\n\n` + `- ${error}` + '```')
              .setAuthor({ name: client.user.tag + ' | ' + client.user.id, iconURL: client.user.displayAvatarURL() })
              .setFooter({ text: interaction.user.tag + ' | ' + interaction.user.id, iconURL: interaction.user.displayAvatarURL() })

            client.channels.cache.get(String(`${config.channels.error}`)).send({ embeds: ([embed]) })

          }

        } else {

          let member = interaction.options.getUser("utilisateur")

          try {
            var embed = new EmbedBuilder()
              .setColor(`${config.color.color}`)
              .setTitle(`${emoji.server}${userinfo.title.text1}`)
              .setFooter({ text: `${general.response.footer_author}` + interaction.user.tag, iconURL: interaction.user.displayAvatarURL() })
              .setDescription(`> ${emoji.infos} ${userinfo.description.text1}` + '*`' + member.username + '`*'
                + `\n > ${emoji.link}${userinfo.description.text2}` + '*`' + member.id + '`*'
                + `\n> ${emoji.welcome}${userinfo.description.text3}` + '*`' + "Introuvable" + '`*'
                + `\n> ${emoji.file}${userinfo.description.text4}` + '*`' + member.createdAt + '`*')

            interaction.reply({ embeds: ([embed]) })

          } catch (err) {
            console.log(chalk.red(err));

            var embed = new EmbedBuilder()
              .setColor(`${config.color.error}`)
              .setDescription(`${emoji.error}${server_infos.description.text9}`)

            interaction.reply({ embeds: ([embed]), ephemeral: true })

            let error = err

            var embed = new EmbedBuilder()
              .setColor(`${config.color.error}`)
              .setTitle(`${emoji.error}${server_infos.title.text2}`)
              .setDescription('```user_infos``` ```diff' + `\n\n` + `- ${error}` + '```')
              .setAuthor({ name: client.user.tag + ' | ' + client.user.id, iconURL: client.user.displayAvatarURL() })
              .setFooter({ text: interaction.user.tag + ' | ' + interaction.user.id, iconURL: interaction.user.displayAvatarURL() })

            client.channels.cache.get(String(`${config.channels.error}`)).send({ embeds: ([embed]) })

          }

        }
      } else {
        var embed = new EmbedBuilder()
          .setColor(`${config.color.color_error}`)
          .setDescription(`${emoji.wrong}${general.error.module_activate1}` + ' *`Utilitaire`* ' + `${general.error.module_activate2}`)

        interaction.reply({ embeds: ([embed]), ephemeral: true })
      }
    } else {

      var embed = new EmbedBuilder()
        .setColor(`${config.color.color_error}`)
        .setDescription(`${emoji.wrong}${general.error.server_follow}`)

      interaction.reply({ embeds: ([embed]), ephemeral: true })
    }
  }

});

///login\\\
client.login(token); 
